Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    COLON_SEP
    COMMENT
    CONST
    ENUM
    GOTO
    IMPLEMENTS
    UNCLOSED_CHAR
    UNCLOSED_STR

Grammar

Rule 0     S' -> start
Rule 1     expression -> assignment_expression
Rule 2     expression_not_name -> assignment_expression_not_name
Rule 3     assignment_expression -> assignment
Rule 4     assignment_expression -> conditional_expression
Rule 5     assignment_expression_not_name -> assignment
Rule 6     assignment_expression_not_name -> conditional_expression_not_name
Rule 7     assignment -> postfix_expression assignment_operator assignment_expression
Rule 8     assignment_operator -> ASSIGN
Rule 9     assignment_operator -> MUL_ASSIGN
Rule 10    assignment_operator -> QUO_ASSIGN
Rule 11    assignment_operator -> REM_ASSIGN
Rule 12    assignment_operator -> ADD_ASSIGN
Rule 13    assignment_operator -> SUB_ASSIGN
Rule 14    assignment_operator -> SHL_ASSIGN
Rule 15    assignment_operator -> SHR_ASSIGN
Rule 16    assignment_operator -> SHR_UN_ASSIGN
Rule 17    assignment_operator -> AND_ASSIGN
Rule 18    assignment_operator -> OR_ASSIGN
Rule 19    assignment_operator -> XOR_ASSIGN
Rule 20    conditional_expression -> conditional_or_expression
Rule 21    conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression
Rule 22    conditional_expression_not_name -> conditional_or_expression_not_name
Rule 23    conditional_expression_not_name -> conditional_or_expression_not_name QUES expression COLON conditional_expression
Rule 24    conditional_expression_not_name -> name QUES expression COLON conditional_expression
Rule 25    conditional_or_expression -> conditional_and_expression
Rule 26    conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression
Rule 27    conditional_or_expression_not_name -> conditional_and_expression_not_name
Rule 28    conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
Rule 29    conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression
Rule 30    conditional_and_expression -> inclusive_or_expression
Rule 31    conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression
Rule 32    conditional_and_expression_not_name -> inclusive_or_expression_not_name
Rule 33    conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
Rule 34    conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression
Rule 35    marker_next_quad -> <empty>
Rule 36    inclusive_or_expression -> exclusive_or_expression
Rule 37    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 38    inclusive_or_expression_not_name -> exclusive_or_expression_not_name
Rule 39    inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression
Rule 40    inclusive_or_expression_not_name -> name OR exclusive_or_expression
Rule 41    exclusive_or_expression -> and_expression
Rule 42    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 43    exclusive_or_expression_not_name -> and_expression_not_name
Rule 44    exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression
Rule 45    exclusive_or_expression_not_name -> name XOR and_expression
Rule 46    and_expression -> equality_expression
Rule 47    and_expression -> and_expression AND equality_expression
Rule 48    and_expression_not_name -> equality_expression_not_name
Rule 49    and_expression_not_name -> and_expression_not_name AND equality_expression
Rule 50    and_expression_not_name -> name AND equality_expression
Rule 51    equality_expression -> instanceof_expression
Rule 52    equality_expression -> equality_expression EQL instanceof_expression
Rule 53    equality_expression -> equality_expression NEQ instanceof_expression
Rule 54    equality_expression_not_name -> instanceof_expression_not_name
Rule 55    equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression
Rule 56    equality_expression_not_name -> name EQL instanceof_expression
Rule 57    equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression
Rule 58    equality_expression_not_name -> name NEQ instanceof_expression
Rule 59    instanceof_expression -> relational_expression
Rule 60    instanceof_expression -> instanceof_expression INSTANCEOF reference_type
Rule 61    instanceof_expression_not_name -> relational_expression_not_name
Rule 62    instanceof_expression_not_name -> name INSTANCEOF reference_type
Rule 63    instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type
Rule 64    relational_expression -> shift_expression
Rule 65    relational_expression -> relational_expression GTR shift_expression
Rule 66    relational_expression -> relational_expression LSS shift_expression
Rule 67    relational_expression -> relational_expression GEQ shift_expression
Rule 68    relational_expression -> relational_expression LEQ shift_expression
Rule 69    relational_expression_not_name -> shift_expression_not_name
Rule 70    relational_expression_not_name -> shift_expression_not_name LSS shift_expression
Rule 71    relational_expression_not_name -> name LSS shift_expression
Rule 72    relational_expression_not_name -> shift_expression_not_name GTR shift_expression
Rule 73    relational_expression_not_name -> name GTR shift_expression
Rule 74    relational_expression_not_name -> shift_expression_not_name GEQ shift_expression
Rule 75    relational_expression_not_name -> name GEQ shift_expression
Rule 76    relational_expression_not_name -> shift_expression_not_name LEQ shift_expression
Rule 77    relational_expression_not_name -> name LEQ shift_expression
Rule 78    shift_expression -> additive_expression
Rule 79    shift_expression -> shift_expression SHL additive_expression
Rule 80    shift_expression -> shift_expression SHR additive_expression
Rule 81    shift_expression -> shift_expression SHR_UN additive_expression
Rule 82    shift_expression_not_name -> additive_expression_not_name
Rule 83    shift_expression_not_name -> shift_expression_not_name SHL additive_expression
Rule 84    shift_expression_not_name -> name SHL additive_expression
Rule 85    shift_expression_not_name -> shift_expression_not_name SHR additive_expression
Rule 86    shift_expression_not_name -> name SHR additive_expression
Rule 87    shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression
Rule 88    shift_expression_not_name -> name SHR_UN additive_expression
Rule 89    additive_expression -> multiplicative_expression
Rule 90    additive_expression -> additive_expression ADD multiplicative_expression
Rule 91    additive_expression -> additive_expression SUB multiplicative_expression
Rule 92    additive_expression_not_name -> multiplicative_expression_not_name
Rule 93    additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression
Rule 94    additive_expression_not_name -> name ADD multiplicative_expression
Rule 95    additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression
Rule 96    additive_expression_not_name -> name SUB multiplicative_expression
Rule 97    multiplicative_expression -> unary_expression
Rule 98    multiplicative_expression -> multiplicative_expression MUL unary_expression
Rule 99    multiplicative_expression -> multiplicative_expression QUO unary_expression
Rule 100   multiplicative_expression -> multiplicative_expression REM unary_expression
Rule 101   multiplicative_expression_not_name -> unary_expression_not_name
Rule 102   multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression
Rule 103   multiplicative_expression_not_name -> name MUL unary_expression
Rule 104   multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression
Rule 105   multiplicative_expression_not_name -> name QUO unary_expression
Rule 106   multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression
Rule 107   multiplicative_expression_not_name -> name REM unary_expression
Rule 108   unary_expression -> pre_increment_expression
Rule 109   unary_expression -> pre_decrement_expression
Rule 110   unary_expression -> ADD unary_expression
Rule 111   unary_expression -> SUB unary_expression
Rule 112   unary_expression -> unary_expression_not_plus_minus
Rule 113   unary_expression_not_name -> pre_increment_expression
Rule 114   unary_expression_not_name -> pre_decrement_expression
Rule 115   unary_expression_not_name -> ADD unary_expression
Rule 116   unary_expression_not_name -> SUB unary_expression
Rule 117   unary_expression_not_name -> unary_expression_not_plus_minus_not_name
Rule 118   pre_increment_expression -> INC unary_expression
Rule 119   pre_decrement_expression -> DEC unary_expression
Rule 120   unary_expression_not_plus_minus -> postfix_expression
Rule 121   unary_expression_not_plus_minus -> LNOT unary_expression
Rule 122   unary_expression_not_plus_minus -> NOT unary_expression
Rule 123   unary_expression_not_plus_minus -> cast_expression
Rule 124   unary_expression_not_plus_minus_not_name -> postfix_expression_not_name
Rule 125   unary_expression_not_plus_minus_not_name -> LNOT unary_expression
Rule 126   unary_expression_not_plus_minus_not_name -> NOT unary_expression
Rule 127   unary_expression_not_plus_minus_not_name -> cast_expression
Rule 128   postfix_expression -> primary
Rule 129   postfix_expression -> name
Rule 130   postfix_expression -> post_increment_expression
Rule 131   postfix_expression -> post_decrement_expression
Rule 132   postfix_expression_not_name -> primary
Rule 133   postfix_expression_not_name -> post_increment_expression
Rule 134   postfix_expression_not_name -> post_decrement_expression
Rule 135   post_increment_expression -> postfix_expression INC
Rule 136   post_decrement_expression -> postfix_expression DEC
Rule 137   primary -> primary_no_new_array
Rule 138   primary -> array_creation_with_array_initializer
Rule 139   primary -> array_creation_without_array_initializer
Rule 140   primary_no_new_array -> literal
Rule 141   primary_no_new_array -> THIS
Rule 142   primary_no_new_array -> class_instance_creation_expression
Rule 143   primary_no_new_array -> field_access
Rule 144   primary_no_new_array -> method_invocation
Rule 145   primary_no_new_array -> array_access
Rule 146   primary_no_new_array -> LPAREN name RPAREN
Rule 147   primary_no_new_array -> LPAREN expression_not_name RPAREN
Rule 148   primary_no_new_array -> name PERIOD THIS
Rule 149   primary_no_new_array -> name PERIOD SUPER
Rule 150   primary_no_new_array -> name PERIOD CLASS
Rule 151   primary_no_new_array -> name dims PERIOD CLASS
Rule 152   primary_no_new_array -> primitive_type dims PERIOD CLASS
Rule 153   primary_no_new_array -> primitive_type PERIOD CLASS
Rule 154   dims_opt -> dims
Rule 155   dims_opt -> empty
Rule 156   dims -> dims_loop
Rule 157   dims_loop -> one_dim_loop
Rule 158   dims_loop -> dims_loop one_dim_loop
Rule 159   one_dim_loop -> LBRACK RBRACK
Rule 160   cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression
Rule 161   cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
Rule 162   cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
Rule 163   cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus
Rule 164   cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus
Rule 165   block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE
Rule 166   block_statements_opt -> block_statements
Rule 167   block_statements_opt -> empty
Rule 168   block_statements -> block_statement
Rule 169   block_statements -> block_statements block_statement
Rule 170   block_statement -> local_variable_declaration_statement
Rule 171   block_statement -> statement
Rule 172   block_statement -> class_declaration
Rule 173   block_statement -> interface_declaration
Rule 174   local_variable_declaration_statement -> local_variable_declaration SEMICOLON
Rule 175   local_variable_declaration -> type variable_declarators
Rule 176   local_variable_declaration -> modifiers type variable_declarators
Rule 177   variable_declarators -> variable_declarator
Rule 178   variable_declarators -> variable_declarators COMMA variable_declarator
Rule 179   variable_declarator -> variable_declarator_id
Rule 180   variable_declarator -> variable_declarator_id ASSIGN variable_initializer
Rule 181   variable_declarator_id -> IDENT dims_opt
Rule 182   variable_initializer -> expression
Rule 183   variable_initializer -> array_initializer
Rule 184   statement -> statement_without_trailing_substatement
Rule 185   statement -> labeled_statement
Rule 186   statement -> if_then_statement
Rule 187   statement -> if_then_else_statement
Rule 188   statement -> while_statement
Rule 189   statement -> for_statement
Rule 190   statement -> enhanced_for_statement
Rule 191   statement_without_trailing_substatement -> block
Rule 192   statement_without_trailing_substatement -> expression_statement
Rule 193   statement_without_trailing_substatement -> assert_statement
Rule 194   statement_without_trailing_substatement -> empty_statement
Rule 195   statement_without_trailing_substatement -> switch_statement
Rule 196   statement_without_trailing_substatement -> do_statement
Rule 197   statement_without_trailing_substatement -> break_statement
Rule 198   statement_without_trailing_substatement -> continue_statement
Rule 199   statement_without_trailing_substatement -> return_statement
Rule 200   statement_without_trailing_substatement -> synchronized_statement
Rule 201   statement_without_trailing_substatement -> throw_statement
Rule 202   statement_without_trailing_substatement -> try_statement
Rule 203   statement_without_trailing_substatement -> try_statement_with_resources
Rule 204   expression_statement -> statement_expression SEMICOLON
Rule 205   expression_statement -> explicit_constructor_invocation
Rule 206   statement_expression -> assignment
Rule 207   statement_expression -> pre_increment_expression
Rule 208   statement_expression -> pre_decrement_expression
Rule 209   statement_expression -> post_increment_expression
Rule 210   statement_expression -> post_decrement_expression
Rule 211   statement_expression -> method_invocation
Rule 212   statement_expression -> class_instance_creation_expression
Rule 213   comma_opt -> COMMA
Rule 214   comma_opt -> empty
Rule 215   array_initializer -> LBRACE comma_opt RBRACE
Rule 216   array_initializer -> LBRACE variable_initializers RBRACE
Rule 217   array_initializer -> LBRACE variable_initializers COMMA RBRACE
Rule 218   variable_initializers -> variable_initializer
Rule 219   variable_initializers -> variable_initializers COMMA variable_initializer
Rule 220   method_invocation -> IDENT LPAREN argument_list_opt RPAREN
Rule 221   method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
Rule 222   method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
Rule 223   method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
Rule 224   method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN
Rule 225   method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN
Rule 226   method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
Rule 227   labeled_statement -> label COLON statement
Rule 228   labeled_statement_no_short_if -> label COLON statement_no_short_if
Rule 229   label -> IDENT
Rule 230   if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
Rule 231   label_for_if1 -> <empty>
Rule 232   label_for_if2 -> <empty>
Rule 233   label_for_if3 -> <empty>
Rule 234   if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
Rule 235   if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
Rule 236   while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
Rule 237   while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
Rule 238   inc_for_while_stack -> <empty>
Rule 239   label_for_while1 -> <empty>
Rule 240   label_for_while2 -> <empty>
Rule 241   for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
Rule 242   for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
Rule 243   label_for_for1 -> <empty>
Rule 244   label_for_for2 -> <empty>
Rule 245   label_for_for3 -> <empty>
Rule 246   for_init_opt -> for_init
Rule 247   for_init_opt -> empty
Rule 248   for_init -> statement_expression_list
Rule 249   for_init -> local_variable_declaration
Rule 250   statement_expression_list -> statement_expression
Rule 251   statement_expression_list -> statement_expression_list COMMA statement_expression
Rule 252   expression_opt -> expression
Rule 253   expression_opt -> empty
Rule 254   for_update_opt -> for_update
Rule 255   for_update_opt -> empty
Rule 256   for_update -> statement_expression_list
Rule 257   enhanced_for_statement -> enhanced_for_statement_header statement
Rule 258   enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if
Rule 259   enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN
Rule 260   enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
Rule 261   enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
Rule 262   statement_no_short_if -> statement_without_trailing_substatement
Rule 263   statement_no_short_if -> labeled_statement_no_short_if
Rule 264   statement_no_short_if -> if_then_else_statement_no_short_if
Rule 265   statement_no_short_if -> while_statement_no_short_if
Rule 266   statement_no_short_if -> for_statement_no_short_if
Rule 267   statement_no_short_if -> enhanced_for_statement_no_short_if
Rule 268   assert_statement -> ASSERT expression SEMICOLON
Rule 269   assert_statement -> ASSERT expression COLON expression SEMICOLON
Rule 270   empty_statement -> SEMICOLON
Rule 271   switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block
Rule 272   switch_block -> LBRACE RBRACE
Rule 273   switch_block -> LBRACE switch_block_statements dec_scope RBRACE
Rule 274   switch_block -> LBRACE switch_labels dec_scope RBRACE
Rule 275   switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE
Rule 276   switch_block_statements -> switch_block_statement
Rule 277   switch_block_statements -> switch_block_statements switch_block_statement
Rule 278   switch_block_statement -> switch_labels block_statements
Rule 279   switch_labels -> switch_label
Rule 280   switch_labels -> switch_labels switch_label
Rule 281   switch_label -> CASE constant_expression COLON
Rule 282   switch_label -> DEFAULT COLON
Rule 283   constant_expression -> expression
Rule 284   do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 285   break_statement -> BREAK SEMICOLON
Rule 286   break_statement -> BREAK IDENT SEMICOLON
Rule 287   continue_statement -> CONTINUE SEMICOLON
Rule 288   continue_statement -> CONTINUE IDENT SEMICOLON
Rule 289   return_statement -> RETURN expression_opt SEMICOLON
Rule 290   synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block
Rule 291   throw_statement -> THROW expression SEMICOLON
Rule 292   try_statement -> TRY try_block catches
Rule 293   try_statement -> TRY try_block catches_opt finally
Rule 294   try_block -> block
Rule 295   catches -> catch_clause
Rule 296   catches -> catches catch_clause
Rule 297   catches_opt -> catches
Rule 298   catches_opt -> empty
Rule 299   catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block
Rule 300   catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id
Rule 301   catch_type -> union_type
Rule 302   union_type -> type
Rule 303   union_type -> union_type OR type
Rule 304   try_statement_with_resources -> TRY resource_specification try_block catches_opt
Rule 305   try_statement_with_resources -> TRY resource_specification try_block catches_opt finally
Rule 306   resource_specification -> LPAREN resources semi_opt RPAREN
Rule 307   semi_opt -> SEMICOLON
Rule 308   semi_opt -> empty
Rule 309   resources -> resource
Rule 310   resources -> resources trailing_semicolon resource
Rule 311   trailing_semicolon -> SEMICOLON
Rule 312   resource -> type variable_declarator_id ASSIGN variable_initializer
Rule 313   resource -> modifiers type variable_declarator_id ASSIGN variable_initializer
Rule 314   finally -> FINALLY block
Rule 315   explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON
Rule 316   explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON
Rule 317   explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
Rule 318   explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
Rule 319   explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
Rule 320   explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
Rule 321   explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
Rule 322   explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
Rule 323   explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
Rule 324   explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
Rule 325   explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
Rule 326   explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
Rule 327   class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
Rule 328   class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
Rule 329   class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
Rule 330   class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
Rule 331   class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
Rule 332   class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
Rule 333   class_instance_creation_expression_name -> name PERIOD
Rule 334   class_body_opt -> class_body
Rule 335   class_body_opt -> empty
Rule 336   field_access -> primary PERIOD IDENT
Rule 337   field_access -> SUPER PERIOD IDENT
Rule 338   array_access -> name LBRACK expression RBRACK
Rule 339   array_access -> primary_no_new_array LBRACK expression RBRACK
Rule 340   array_access -> array_creation_with_array_initializer LBRACK expression RBRACK
Rule 341   array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer
Rule 342   array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer
Rule 343   dim_with_or_without_exprs -> dim_with_or_without_expr
Rule 344   dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr
Rule 345   dim_with_or_without_expr -> LBRACK expression RBRACK
Rule 346   dim_with_or_without_expr -> LBRACK RBRACK
Rule 347   array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs
Rule 348   array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs
Rule 349   name -> simple_name
Rule 350   name -> qualified_name
Rule 351   simple_name -> IDENT
Rule 352   qualified_name -> name PERIOD simple_name
Rule 353   literal -> HEX_LIT
Rule 354   literal -> OCTAL_LIT
Rule 355   literal -> BINARY_LIT
Rule 356   literal -> DECIMAL_LIT
Rule 357   literal -> FLOAT_HEX_LIT
Rule 358   literal -> FLOAT_DEC_LIT
Rule 359   literal -> CHAR_LIT
Rule 360   literal -> STRING_LIT
Rule 361   literal -> BOOL_LIT
Rule 362   literal -> NULL_LIT
Rule 363   modifiers_opt -> modifiers
Rule 364   modifiers_opt -> empty
Rule 365   modifiers -> modifier
Rule 366   modifiers -> modifiers modifier
Rule 367   modifier -> PUBLIC
Rule 368   modifier -> PROTECTED
Rule 369   modifier -> PRIVATE
Rule 370   modifier -> STATIC
Rule 371   modifier -> ABSTRACT
Rule 372   modifier -> FINAL
Rule 373   modifier -> NATIVE
Rule 374   modifier -> SYNCHRONIZED
Rule 375   modifier -> TRANSIENT
Rule 376   modifier -> VOLATILE
Rule 377   modifier -> STRICTFP
Rule 378   modifier -> annotation
Rule 379   type -> primitive_type
Rule 380   type -> reference_type
Rule 381   primitive_type -> BOOLEAN
Rule 382   primitive_type -> VOID
Rule 383   primitive_type -> BYTE
Rule 384   primitive_type -> SHORT
Rule 385   primitive_type -> INT
Rule 386   primitive_type -> LONG
Rule 387   primitive_type -> CHAR
Rule 388   primitive_type -> FLOAT
Rule 389   primitive_type -> DOUBLE
Rule 390   reference_type -> class_or_interface_type
Rule 391   reference_type -> array_type
Rule 392   class_or_interface_type -> class_or_interface
Rule 393   class_or_interface_type -> generic_type
Rule 394   class_type -> class_or_interface_type
Rule 395   class_or_interface -> name
Rule 396   class_or_interface -> generic_type PERIOD name
Rule 397   generic_type -> class_or_interface type_arguments
Rule 398   generic_type -> class_or_interface LSS GTR
Rule 399   array_type -> primitive_type dims
Rule 400   array_type -> name dims
Rule 401   array_type -> generic_type dims
Rule 402   array_type -> generic_type PERIOD name dims
Rule 403   type_arguments -> LSS type_argument_list1
Rule 404   type_argument_list1 -> type_argument1
Rule 405   type_argument_list1 -> type_argument_list COMMA type_argument1
Rule 406   type_argument_list -> type_argument
Rule 407   type_argument_list -> type_argument_list COMMA type_argument
Rule 408   type_argument -> reference_type
Rule 409   type_argument -> wildcard
Rule 410   type_argument1 -> reference_type1
Rule 411   type_argument1 -> wildcard1
Rule 412   reference_type1 -> reference_type GTR
Rule 413   reference_type1 -> class_or_interface LSS type_argument_list2
Rule 414   type_argument_list2 -> type_argument2
Rule 415   type_argument_list2 -> type_argument_list COMMA type_argument2
Rule 416   type_argument2 -> reference_type2
Rule 417   type_argument2 -> wildcard2
Rule 418   reference_type2 -> reference_type SHR
Rule 419   reference_type2 -> class_or_interface LSS type_argument_list3
Rule 420   type_argument_list3 -> type_argument3
Rule 421   type_argument_list3 -> type_argument_list COMMA type_argument3
Rule 422   type_argument3 -> reference_type3
Rule 423   type_argument3 -> wildcard3
Rule 424   reference_type3 -> reference_type SHR_UN
Rule 425   wildcard -> QUES
Rule 426   wildcard -> QUES wildcard_bounds
Rule 427   wildcard_bounds -> EXTENDS reference_type
Rule 428   wildcard_bounds -> SUPER reference_type
Rule 429   wildcard1 -> QUES GTR
Rule 430   wildcard1 -> QUES wildcard_bounds1
Rule 431   wildcard_bounds1 -> EXTENDS reference_type1
Rule 432   wildcard_bounds1 -> SUPER reference_type1
Rule 433   wildcard2 -> QUES SHR
Rule 434   wildcard2 -> QUES wildcard_bounds2
Rule 435   wildcard_bounds2 -> EXTENDS reference_type2
Rule 436   wildcard_bounds2 -> SUPER reference_type2
Rule 437   wildcard3 -> QUES SHR_UN
Rule 438   wildcard3 -> QUES wildcard_bounds3
Rule 439   wildcard_bounds3 -> EXTENDS reference_type3
Rule 440   wildcard_bounds3 -> SUPER reference_type3
Rule 441   type_parameter_header -> IDENT
Rule 442   type_parameters -> LSS type_parameter_list1
Rule 443   type_parameter_list -> type_parameter
Rule 444   type_parameter_list -> type_parameter_list COMMA type_parameter
Rule 445   type_parameter -> type_parameter_header
Rule 446   type_parameter -> type_parameter_header EXTENDS reference_type
Rule 447   type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list
Rule 448   additional_bound_list -> additional_bound
Rule 449   additional_bound_list -> additional_bound_list additional_bound
Rule 450   additional_bound -> AND reference_type
Rule 451   type_parameter_list1 -> type_parameter1
Rule 452   type_parameter_list1 -> type_parameter_list COMMA type_parameter1
Rule 453   type_parameter1 -> type_parameter_header GTR
Rule 454   type_parameter1 -> type_parameter_header EXTENDS reference_type1
Rule 455   type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1
Rule 456   additional_bound_list1 -> additional_bound1
Rule 457   additional_bound_list1 -> additional_bound_list additional_bound1
Rule 458   additional_bound1 -> AND reference_type1
Rule 459   type_declaration -> class_declaration
Rule 460   type_declaration -> interface_declaration
Rule 461   type_declaration -> SEMICOLON
Rule 462   class_declaration -> class_header class_body
Rule 463   class_header -> class_header_name empty empty
Rule 464   class_header_name -> class_header_name1 type_parameters
Rule 465   class_header_name -> class_header_name1
Rule 466   class_header_name1 -> modifiers_opt CLASS IDENT
Rule 467   interface_type_list -> interface_type
Rule 468   interface_type_list -> interface_type_list COMMA interface_type
Rule 469   interface_type -> class_or_interface_type
Rule 470   class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
Rule 471   class_body_declarations_opt -> class_body_declarations
Rule 472   class_body_declarations_opt -> empty
Rule 473   class_body_declarations -> class_body_declaration
Rule 474   class_body_declarations -> class_body_declarations class_body_declaration
Rule 475   class_body_declaration -> class_member_declaration
Rule 476   class_body_declaration -> static_initializer
Rule 477   class_body_declaration -> constructor_declaration
Rule 478   class_body_declaration -> block
Rule 479   class_member_declaration -> field_declaration
Rule 480   class_member_declaration -> class_declaration
Rule 481   class_member_declaration -> method_declaration
Rule 482   class_member_declaration -> interface_declaration
Rule 483   class_member_declaration -> SEMICOLON
Rule 484   field_declaration -> modifiers_opt type variable_declarators SEMICOLON
Rule 485   static_initializer -> STATIC block
Rule 486   constructor_declaration -> constructor_header method_body
Rule 487   constructor_header -> constructor_header_name formal_parameter_list_opt RPAREN method_header_throws_clause_opt
Rule 488   constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN
Rule 489   constructor_header_name -> modifiers_opt IDENT LPAREN
Rule 490   formal_parameter_list_opt -> formal_parameter_list
Rule 491   formal_parameter_list_opt -> empty
Rule 492   formal_parameter_list -> formal_parameter
Rule 493   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 494   formal_parameter -> modifiers_opt type variable_declarator_id
Rule 495   formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id
Rule 496   method_header_throws_clause_opt -> method_header_throws_clause
Rule 497   method_header_throws_clause_opt -> empty
Rule 498   method_header_throws_clause -> THROWS class_type_list
Rule 499   class_type_list -> class_type_elt
Rule 500   class_type_list -> class_type_list COMMA class_type_elt
Rule 501   class_type_elt -> class_type
Rule 502   method_body -> LBRACE block_statements_opt dec_scope RBRACE
Rule 503   method_declaration -> abstract_method_declaration
Rule 504   method_declaration -> method_header method_body
Rule 505   abstract_method_declaration -> method_header101 SEMICOLON
Rule 506   method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
Rule 507   method_header -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt
Rule 508   method_header_name -> modifiers_opt type_parameters type IDENT LPAREN
Rule 509   method_header_name -> modifiers_opt type IDENT LPAREN
Rule 510   method_header_extended_dims -> dims_opt
Rule 511   interface_declaration -> interface_header interface_body
Rule 512   interface_header -> interface_header_name interface_header_extends_opt
Rule 513   interface_header_name -> interface_header_name1 type_parameters
Rule 514   interface_header_name -> interface_header_name1
Rule 515   interface_header_name1 -> modifiers_opt INTERFACE IDENT
Rule 516   interface_header_extends_opt -> interface_header_extends
Rule 517   interface_header_extends_opt -> empty
Rule 518   interface_header_extends -> EXTENDS interface_type_list
Rule 519   interface_body -> LBRACE interface_member_declarations_opt RBRACE
Rule 520   interface_member_declarations_opt -> interface_member_declarations
Rule 521   interface_member_declarations_opt -> empty
Rule 522   interface_member_declarations -> interface_member_declaration
Rule 523   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 524   interface_member_declaration -> constant_declaration
Rule 525   interface_member_declaration -> abstract_method_declaration
Rule 526   interface_member_declaration -> class_declaration
Rule 527   interface_member_declaration -> interface_declaration
Rule 528   interface_member_declaration -> SEMICOLON
Rule 529   constant_declaration -> field_declaration
Rule 530   argument_list_opt -> argument_list
Rule 531   argument_list_opt -> empty
Rule 532   argument_list -> expression
Rule 533   argument_list -> argument_list COMMA expression
Rule 534   member_value -> conditional_expression_not_name
Rule 535   member_value -> name
Rule 536   member_value -> annotation
Rule 537   member_value -> member_value_array_initializer
Rule 538   member_value_array_initializer -> LBRACE member_values COMMA RBRACE
Rule 539   member_value_array_initializer -> LBRACE member_values RBRACE
Rule 540   member_value_array_initializer -> LBRACE COMMA RBRACE
Rule 541   member_value_array_initializer -> LBRACE RBRACE
Rule 542   member_values -> member_value
Rule 543   member_values -> member_values COMMA member_value
Rule 544   annotation -> normal_annotation
Rule 545   annotation -> marker_annotation
Rule 546   annotation -> single_member_annotation
Rule 547   normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN
Rule 548   annotation_name -> ATRATE name
Rule 549   member_value_pairs_opt -> member_value_pairs
Rule 550   member_value_pairs_opt -> empty
Rule 551   member_value_pairs -> member_value_pair
Rule 552   member_value_pairs -> member_value_pairs COMMA member_value_pair
Rule 553   member_value_pair -> simple_name ASSIGN member_value
Rule 554   marker_annotation -> annotation_name
Rule 555   single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN
Rule 556   single_member_annotation_member_value -> member_value
Rule 557   compilation_unit -> package_declaration
Rule 558   compilation_unit -> package_declaration import_declarations
Rule 559   compilation_unit -> package_declaration import_declarations type_declarations
Rule 560   compilation_unit -> package_declaration type_declarations
Rule 561   compilation_unit -> import_declarations
Rule 562   compilation_unit -> type_declarations
Rule 563   compilation_unit -> import_declarations type_declarations
Rule 564   compilation_unit -> empty
Rule 565   package_declaration -> package_declaration_name SEMICOLON
Rule 566   package_declaration_name -> modifiers PACKAGE name
Rule 567   package_declaration_name -> PACKAGE name
Rule 568   import_declarations -> import_declaration
Rule 569   import_declarations -> import_declarations import_declaration
Rule 570   import_declaration -> single_type_import_declaration
Rule 571   import_declaration -> type_import_on_demand_declaration
Rule 572   import_declaration -> single_static_import_declaration
Rule 573   import_declaration -> static_import_on_demand_declaration
Rule 574   single_type_import_declaration -> IMPORT name SEMICOLON
Rule 575   type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON
Rule 576   single_static_import_declaration -> IMPORT STATIC name SEMICOLON
Rule 577   static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON
Rule 578   type_declarations -> type_declaration
Rule 579   type_declarations -> type_declarations type_declaration
Rule 580   start -> INC compilation_unit
Rule 581   start -> DEC expression
Rule 582   start -> MUL block_statement
Rule 583   empty -> <empty>
Rule 584   inc_scope -> <empty>
Rule 585   dec_scope -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 371
ADD                  : 90 93 94 110 115
ADD_ASSIGN           : 12
AND                  : 47 49 50 450 458
AND_ASSIGN           : 17
ARROW                : 
ASSERT               : 268 269
ASSIGN               : 8 180 312 313 553
ATRATE               : 548
BINARY_LIT           : 355
BOOLEAN              : 381
BOOL_LIT             : 361
BREAK                : 285 286
BYTE                 : 383
CASE                 : 281
CATCH                : 299
CHAR                 : 387
CHAR_LIT             : 359
CLASS                : 150 151 152 153 466
COLON                : 21 23 24 227 228 259 269 281 282
COLON_SEP            : 
COMMA                : 178 213 217 219 251 405 407 415 421 444 452 468 493 500 533 538 540 543 552
COMMENT              : 
CONST                : 
CONTINUE             : 287 288
DEC                  : 119 136 581
DECIMAL_LIT          : 356
DEFAULT              : 282
DO                   : 284
DOUBLE               : 389
ELLIPSIS             : 495
ELSE                 : 234 235
ENUM                 : 
EQL                  : 52 55 56
EXTENDS              : 427 431 435 439 446 447 454 455 518
FINAL                : 372
FINALLY              : 314
FLOAT                : 388
FLOAT_DEC_LIT        : 358
FLOAT_HEX_LIT        : 357
FOR                  : 241 242 260 261
GEQ                  : 67 74 75
GOTO                 : 
GTR                  : 65 72 73 398 412 429 453
HEX_LIT              : 353
IDENT                : 181 220 221 222 223 224 225 226 229 260 261 286 288 336 337 351 441 466 488 489 508 509 515
IF                   : 230 234 235
IMPLEMENTS           : 
IMPORT               : 574 575 576 577
INC                  : 118 135 580
INSTANCEOF           : 60 62 63
INT                  : 385
INTERFACE            : 515
LAND                 : 31 33 34
LBRACE               : 165 215 216 217 272 273 274 275 470 502 519 538 539 540 541
LBRACK               : 159 338 339 340 345 346
LEQ                  : 68 76 77
LNOT                 : 121 125
LONG                 : 386
LOR                  : 26 28 29
LPAREN               : 146 147 160 161 162 163 164 220 221 222 223 224 225 226 230 234 235 236 237 241 242 260 261 271 284 290 299 306 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 488 489 508 509 547 555
LSS                  : 66 70 71 398 403 413 419 442
MUL                  : 98 102 103 575 577 582
MUL_ASSIGN           : 9
NATIVE               : 373
NEQ                  : 53 57 58
NEW                  : 327 328 329 330 331 332 341 342 347 348
NOT                  : 122 126
NULL_LIT             : 362
OCTAL_LIT            : 354
OR                   : 37 39 40 303
OR_ASSIGN            : 18
PACKAGE              : 566 567
PERIOD               : 148 149 150 151 152 153 162 221 222 223 224 225 226 319 320 321 322 323 324 325 326 329 330 333 336 337 352 396 402 575 577
PRIVATE              : 369
PROTECTED            : 368
PUBLIC               : 367
QUES                 : 21 23 24 425 426 429 430 433 434 437 438
QUO                  : 99 104 105
QUO_ASSIGN           : 10
RBRACE               : 165 215 216 217 272 273 274 275 470 502 519 538 539 540 541
RBRACK               : 159 338 339 340 345 346
REM                  : 100 106 107
REM_ASSIGN           : 11
RETURN               : 289
RPAREN               : 146 147 160 161 162 163 164 220 221 222 223 224 225 226 230 234 235 236 237 241 242 259 271 284 290 299 306 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 487 506 507 547 555
SEMICOLON            : 174 204 241 241 242 242 268 269 270 284 285 286 287 288 289 291 307 311 315 316 317 318 319 320 321 322 323 324 325 326 461 483 484 505 528 565 574 575 576 577
SHL                  : 79 83 84
SHL_ASSIGN           : 14
SHORT                : 384
SHR                  : 80 85 86 418 433
SHR_ASSIGN           : 15
SHR_UN               : 81 87 88 424 437
SHR_UN_ASSIGN        : 16
STATIC               : 370 485 576 577
STRICTFP             : 377
STRING_LIT           : 360
SUB                  : 91 95 96 111 116
SUB_ASSIGN           : 13
SUPER                : 149 223 226 316 317 319 320 323 324 337 428 432 436 440
SWITCH               : 271
SYNCHRONIZED         : 290 374
THIS                 : 141 148 315 318 321 322 325 326
THROW                : 291
THROWS               : 498
TRANSIENT            : 375
TRY                  : 292 293 304 305
UNCLOSED_CHAR        : 
UNCLOSED_STR         : 
VOID                 : 382
VOLATILE             : 376
WHILE                : 236 237 284
XOR                  : 42 44 45
XOR_ASSIGN           : 19
error                : 

Nonterminals, with rules where they appear

abstract_method_declaration : 503 525
additional_bound     : 448 449
additional_bound1    : 456 457
additional_bound_list : 447 449 457
additional_bound_list1 : 455
additive_expression  : 78 79 80 81 83 84 85 86 87 88 90 91
additive_expression_not_name : 82 93 95
and_expression       : 41 42 44 45 47
and_expression_not_name : 43 49
annotation           : 378 536
annotation_name      : 547 554 555
argument_list        : 530 533
argument_list_opt    : 220 221 222 223 224 225 226 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332
array_access         : 145
array_creation_with_array_initializer : 138 340
array_creation_without_array_initializer : 139
array_initializer    : 183 341 342
array_type           : 391
assert_statement     : 193
assignment           : 3 5 206
assignment_expression : 1 7
assignment_expression_not_name : 2
assignment_operator  : 7
block                : 191 290 294 299 314 478 485
block_statement      : 168 169 582
block_statements     : 166 169 278
block_statements_opt : 165 502
break_statement      : 197
cast_expression      : 123 127
catch_clause         : 295 296
catch_formal_parameter : 299
catch_type           : 300
catches              : 292 296 297
catches_opt          : 293 304 305
class_body           : 334 462
class_body_declaration : 473 474
class_body_declarations : 471 474
class_body_declarations_opt : 470
class_body_opt       : 327 328 329 330 331 332
class_declaration    : 172 459 480 526
class_header         : 462
class_header_name    : 463
class_header_name1   : 464 465
class_instance_creation_expression : 142 212
class_instance_creation_expression_name : 331 332
class_member_declaration : 475
class_or_interface   : 392 397 398 413 419
class_or_interface_type : 162 342 348 390 394 469
class_type           : 327 328 329 330 331 332 501
class_type_elt       : 499 500
class_type_list      : 498 500
comma_opt            : 215
compilation_unit     : 580
conditional_and_expression : 25 26 28 29 31
conditional_and_expression_not_name : 27 33
conditional_expression : 4 21 23 24
conditional_expression_not_name : 6 534
conditional_or_expression : 20 21 26
conditional_or_expression_not_name : 22 23 28
constant_declaration : 524
constant_expression  : 281
constructor_declaration : 477
constructor_header   : 486
constructor_header_name : 487
continue_statement   : 198
dec_scope            : 165 273 274 275 470 502 506
dim_with_or_without_expr : 343 344
dim_with_or_without_exprs : 341 342 344 347 348
dims                 : 151 152 154 164 399 400 401 402
dims_loop            : 156 158
dims_opt             : 160 161 162 181 260 261 510
do_statement         : 196
empty                : 155 167 214 247 253 255 298 308 335 364 463 463 472 491 497 517 521 531 550 564
empty_statement      : 194
enhanced_for_statement : 190
enhanced_for_statement_header : 257 258
enhanced_for_statement_header_init : 259
enhanced_for_statement_no_short_if : 267
equality_expression  : 46 47 49 50 52 53
equality_expression_not_name : 48 55 57
exclusive_or_expression : 36 37 39 40 42
exclusive_or_expression_not_name : 38 44
explicit_constructor_invocation : 205
expression           : 21 23 24 182 230 234 235 236 237 252 259 268 269 269 271 283 284 290 291 338 339 340 345 532 533 581
expression_not_name  : 147
expression_opt       : 241 242 289
expression_statement : 192
field_access         : 143
field_declaration    : 479 529
finally              : 293 305
for_init             : 246
for_init_opt         : 241 242
for_statement        : 189
for_statement_no_short_if : 266
for_update           : 254
for_update_opt       : 241 242
formal_parameter     : 492 493
formal_parameter_list : 490 493
formal_parameter_list_opt : 487 506 507
generic_type         : 393 396 401 402
if_then_else_statement : 187
if_then_else_statement_no_short_if : 264
if_then_statement    : 186
import_declaration   : 568 569
import_declarations  : 558 559 561 563 569
inc_for_while_stack  : 236 237 241 242 260 261
inc_scope            : 165 230 234 235 236 237 241 242 260 261 271 470
inclusive_or_expression : 30 31 33 34 37
inclusive_or_expression_not_name : 32 39
instanceof_expression : 51 52 53 55 56 57 58 60
instanceof_expression_not_name : 54 63
interface_body       : 511
interface_declaration : 173 460 482 527
interface_header     : 511
interface_header_extends : 516
interface_header_extends_opt : 512
interface_header_name : 512
interface_header_name1 : 513 514
interface_member_declaration : 522 523
interface_member_declarations : 520 523
interface_member_declarations_opt : 519
interface_type       : 467 468
interface_type_list  : 468 518
label                : 227 228
label_for_for1       : 241 241 241 242 242 242
label_for_for2       : 241 242
label_for_for3       : 241 242
label_for_if1        : 230 230 234 235
label_for_if2        : 234 235
label_for_if3        : 234 235
label_for_while1     : 236 236 237 237
label_for_while2     : 236 237
labeled_statement    : 185
labeled_statement_no_short_if : 263
literal              : 140
local_variable_declaration : 174 249
local_variable_declaration_statement : 170
marker_annotation    : 545
marker_next_quad     : 26 28 29 31 33 34
member_value         : 542 543 553 556
member_value_array_initializer : 537
member_value_pair    : 551 552
member_value_pairs   : 549 552
member_value_pairs_opt : 547
member_values        : 538 539 543
method_body          : 486 504
method_declaration   : 481
method_header        : 504
method_header101     : 505
method_header_extended_dims : 506 507
method_header_name   : 506 507
method_header_throws_clause : 496
method_header_throws_clause_opt : 487 506 507
method_invocation    : 144 211
modifier             : 365 366
modifiers            : 176 261 313 363 366 566
modifiers_opt        : 300 466 484 488 489 494 495 508 509 515
multiplicative_expression : 89 90 91 93 94 95 96 98 99 100
multiplicative_expression_not_name : 92 102 104 106
name                 : 24 29 34 40 45 50 56 58 62 71 73 75 77 84 86 88 94 96 103 105 107 129 146 148 149 150 151 161 162 163 164 221 224 320 322 324 326 333 338 352 395 396 400 402 535 548 566 567 574 575 576 577
normal_annotation    : 544
one_dim_loop         : 157 158
package_declaration  : 557 558 559 560
package_declaration_name : 565
post_decrement_expression : 131 134 210
post_increment_expression : 130 133 209
postfix_expression   : 7 120 135 136
postfix_expression_not_name : 124
pre_decrement_expression : 109 114 208
pre_increment_expression : 108 113 207
primary              : 128 132 222 225 319 321 323 325 329 330 336
primary_no_new_array : 137 339
primitive_type       : 152 153 160 341 347 379 399
qualified_name       : 350
reference_type       : 60 62 63 380 408 412 418 424 427 428 446 447 450 455
reference_type1      : 410 431 432 454 458
reference_type2      : 416 435 436
reference_type3      : 422 439 440
relational_expression : 59 65 66 67 68
relational_expression_not_name : 61
resource             : 309 310
resource_specification : 304 305
resources            : 306 310
return_statement     : 199
semi_opt             : 306
shift_expression     : 64 65 66 67 68 70 71 72 73 74 75 76 77 79 80 81
shift_expression_not_name : 69 70 72 74 76 83 85 87
simple_name          : 349 352 553
single_member_annotation : 546
single_member_annotation_member_value : 555
single_static_import_declaration : 572
single_type_import_declaration : 570
start                : 0
statement            : 171 227 230 234 236 241 257 284
statement_expression : 204 250 251
statement_expression_list : 248 251 256
statement_no_short_if : 228 234 235 235 237 242 258
statement_without_trailing_substatement : 184 262
static_import_on_demand_declaration : 573
static_initializer   : 476
switch_block         : 271
switch_block_statement : 276 277
switch_block_statements : 273 275 277
switch_label         : 279 280
switch_labels        : 274 275 278 280
switch_statement     : 195
synchronized_statement : 200
throw_statement      : 201
trailing_semicolon   : 310
try_block            : 292 293 304 305
try_statement        : 202
try_statement_with_resources : 203
type                 : 175 176 260 261 302 303 312 313 484 494 495 508 509
type_argument        : 406 407
type_argument1       : 404 405
type_argument2       : 414 415
type_argument3       : 420 421
type_argument_list   : 405 407 415 421
type_argument_list1  : 403
type_argument_list2  : 413
type_argument_list3  : 419
type_arguments       : 161 162 221 222 223 317 318 323 324 325 326 327 329 332 397
type_declaration     : 578 579
type_declarations    : 559 560 562 563 579
type_import_on_demand_declaration : 571
type_parameter       : 443 444
type_parameter1      : 451 452
type_parameter_header : 445 446 447 453 454 455
type_parameter_list  : 444 452
type_parameter_list1 : 442
type_parameters      : 464 488 508 513
unary_expression     : 97 98 99 100 102 103 104 105 106 107 110 111 115 116 118 119 121 122 125 126 160
unary_expression_not_name : 101
unary_expression_not_plus_minus : 112 161 162 163 164
unary_expression_not_plus_minus_not_name : 117
union_type           : 301 303
variable_declarator  : 177 178
variable_declarator_id : 179 180 300 312 313 494 495
variable_declarators : 175 176 178 484
variable_initializer : 180 218 219 312 313
variable_initializers : 216 217 219
while_statement      : 188
while_statement_no_short_if : 265
wildcard             : 409
wildcard1            : 411
wildcard2            : 417
wildcard3            : 423
wildcard_bounds      : 426
wildcard_bounds1     : 430
wildcard_bounds2     : 434
wildcard_bounds3     : 438

Parsing method: LALR

state 0

    (0) S' -> . start
    (580) start -> . INC compilation_unit
    (581) start -> . DEC expression
    (582) start -> . MUL block_statement

    INC             shift and go to state 2
    DEC             shift and go to state 3
    MUL             shift and go to state 4

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (580) start -> INC . compilation_unit
    (557) compilation_unit -> . package_declaration
    (558) compilation_unit -> . package_declaration import_declarations
    (559) compilation_unit -> . package_declaration import_declarations type_declarations
    (560) compilation_unit -> . package_declaration type_declarations
    (561) compilation_unit -> . import_declarations
    (562) compilation_unit -> . type_declarations
    (563) compilation_unit -> . import_declarations type_declarations
    (564) compilation_unit -> . empty
    (565) package_declaration -> . package_declaration_name SEMICOLON
    (568) import_declarations -> . import_declaration
    (569) import_declarations -> . import_declarations import_declaration
    (578) type_declarations -> . type_declaration
    (579) type_declarations -> . type_declarations type_declaration
    (583) empty -> .
    (566) package_declaration_name -> . modifiers PACKAGE name
    (567) package_declaration_name -> . PACKAGE name
    (570) import_declaration -> . single_type_import_declaration
    (571) import_declaration -> . type_import_on_demand_declaration
    (572) import_declaration -> . single_static_import_declaration
    (573) import_declaration -> . static_import_on_demand_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (574) single_type_import_declaration -> . IMPORT name SEMICOLON
    (575) type_import_on_demand_declaration -> . IMPORT name PERIOD MUL SEMICOLON
    (576) single_static_import_declaration -> . IMPORT STATIC name SEMICOLON
    (577) static_import_on_demand_declaration -> . IMPORT STATIC name PERIOD MUL SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (548) annotation_name -> . ATRATE name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty

    $end            reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PACKAGE         shift and go to state 15
    SEMICOLON       shift and go to state 11
    IMPORT          shift and go to state 23
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    compilation_unit               shift and go to state 5
    package_declaration            shift and go to state 6
    import_declarations            shift and go to state 7
    type_declarations              shift and go to state 8
    empty                          shift and go to state 9
    package_declaration_name       shift and go to state 10
    import_declaration             shift and go to state 12
    type_declaration               shift and go to state 13
    modifiers                      shift and go to state 14
    single_type_import_declaration shift and go to state 16
    type_import_on_demand_declaration shift and go to state 17
    single_static_import_declaration shift and go to state 18
    static_import_on_demand_declaration shift and go to state 19
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    modifier                       shift and go to state 22
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    annotation                     shift and go to state 37
    class_header_name              shift and go to state 38
    interface_header_name          shift and go to state 39
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    annotation_name                shift and go to state 45
    modifiers_opt                  shift and go to state 46

state 3

    (581) start -> DEC . expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 49
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 4

    (582) start -> MUL . block_statement
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (583) empty -> .
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    block_statement                shift and go to state 115
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 5

    (580) start -> INC compilation_unit .

    $end            reduce using rule 580 (start -> INC compilation_unit .)


state 6

    (557) compilation_unit -> package_declaration .
    (558) compilation_unit -> package_declaration . import_declarations
    (559) compilation_unit -> package_declaration . import_declarations type_declarations
    (560) compilation_unit -> package_declaration . type_declarations
    (568) import_declarations -> . import_declaration
    (569) import_declarations -> . import_declarations import_declaration
    (578) type_declarations -> . type_declaration
    (579) type_declarations -> . type_declarations type_declaration
    (570) import_declaration -> . single_type_import_declaration
    (571) import_declaration -> . type_import_on_demand_declaration
    (572) import_declaration -> . single_static_import_declaration
    (573) import_declaration -> . static_import_on_demand_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (574) single_type_import_declaration -> . IMPORT name SEMICOLON
    (575) type_import_on_demand_declaration -> . IMPORT name PERIOD MUL SEMICOLON
    (576) single_static_import_declaration -> . IMPORT STATIC name SEMICOLON
    (577) static_import_on_demand_declaration -> . IMPORT STATIC name PERIOD MUL SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 557 (compilation_unit -> package_declaration .)
    SEMICOLON       shift and go to state 11
    IMPORT          shift and go to state 23
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    import_declarations            shift and go to state 186
    type_declarations              shift and go to state 187
    import_declaration             shift and go to state 12
    type_declaration               shift and go to state 13
    single_type_import_declaration shift and go to state 16
    type_import_on_demand_declaration shift and go to state 17
    single_static_import_declaration shift and go to state 18
    static_import_on_demand_declaration shift and go to state 19
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 7

    (561) compilation_unit -> import_declarations .
    (563) compilation_unit -> import_declarations . type_declarations
    (569) import_declarations -> import_declarations . import_declaration
    (578) type_declarations -> . type_declaration
    (579) type_declarations -> . type_declarations type_declaration
    (570) import_declaration -> . single_type_import_declaration
    (571) import_declaration -> . type_import_on_demand_declaration
    (572) import_declaration -> . single_static_import_declaration
    (573) import_declaration -> . static_import_on_demand_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (574) single_type_import_declaration -> . IMPORT name SEMICOLON
    (575) type_import_on_demand_declaration -> . IMPORT name PERIOD MUL SEMICOLON
    (576) single_static_import_declaration -> . IMPORT STATIC name SEMICOLON
    (577) static_import_on_demand_declaration -> . IMPORT STATIC name PERIOD MUL SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 561 (compilation_unit -> import_declarations .)
    SEMICOLON       shift and go to state 11
    IMPORT          shift and go to state 23
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    type_declarations              shift and go to state 189
    import_declaration             shift and go to state 190
    type_declaration               shift and go to state 13
    single_type_import_declaration shift and go to state 16
    type_import_on_demand_declaration shift and go to state 17
    single_static_import_declaration shift and go to state 18
    static_import_on_demand_declaration shift and go to state 19
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 8

    (562) compilation_unit -> type_declarations .
    (579) type_declarations -> type_declarations . type_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 562 (compilation_unit -> type_declarations .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    type_declaration               shift and go to state 191
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 9

    (564) compilation_unit -> empty .
    (364) modifiers_opt -> empty .

    $end            reduce using rule 564 (compilation_unit -> empty .)
    CLASS           reduce using rule 364 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 364 (modifiers_opt -> empty .)


state 10

    (565) package_declaration -> package_declaration_name . SEMICOLON

    SEMICOLON       shift and go to state 192


state 11

    (461) type_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 461 (type_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 461 (type_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 461 (type_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 461 (type_declaration -> SEMICOLON .)
    STATIC          reduce using rule 461 (type_declaration -> SEMICOLON .)
    ABSTRACT        reduce using rule 461 (type_declaration -> SEMICOLON .)
    FINAL           reduce using rule 461 (type_declaration -> SEMICOLON .)
    NATIVE          reduce using rule 461 (type_declaration -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 461 (type_declaration -> SEMICOLON .)
    TRANSIENT       reduce using rule 461 (type_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 461 (type_declaration -> SEMICOLON .)
    STRICTFP        reduce using rule 461 (type_declaration -> SEMICOLON .)
    ATRATE          reduce using rule 461 (type_declaration -> SEMICOLON .)
    CLASS           reduce using rule 461 (type_declaration -> SEMICOLON .)
    INTERFACE       reduce using rule 461 (type_declaration -> SEMICOLON .)
    $end            reduce using rule 461 (type_declaration -> SEMICOLON .)


state 12

    (568) import_declarations -> import_declaration .

    SEMICOLON       reduce using rule 568 (import_declarations -> import_declaration .)
    IMPORT          reduce using rule 568 (import_declarations -> import_declaration .)
    PUBLIC          reduce using rule 568 (import_declarations -> import_declaration .)
    PROTECTED       reduce using rule 568 (import_declarations -> import_declaration .)
    PRIVATE         reduce using rule 568 (import_declarations -> import_declaration .)
    STATIC          reduce using rule 568 (import_declarations -> import_declaration .)
    ABSTRACT        reduce using rule 568 (import_declarations -> import_declaration .)
    FINAL           reduce using rule 568 (import_declarations -> import_declaration .)
    NATIVE          reduce using rule 568 (import_declarations -> import_declaration .)
    SYNCHRONIZED    reduce using rule 568 (import_declarations -> import_declaration .)
    TRANSIENT       reduce using rule 568 (import_declarations -> import_declaration .)
    VOLATILE        reduce using rule 568 (import_declarations -> import_declaration .)
    STRICTFP        reduce using rule 568 (import_declarations -> import_declaration .)
    ATRATE          reduce using rule 568 (import_declarations -> import_declaration .)
    CLASS           reduce using rule 568 (import_declarations -> import_declaration .)
    INTERFACE       reduce using rule 568 (import_declarations -> import_declaration .)
    $end            reduce using rule 568 (import_declarations -> import_declaration .)


state 13

    (578) type_declarations -> type_declaration .

    SEMICOLON       reduce using rule 578 (type_declarations -> type_declaration .)
    PUBLIC          reduce using rule 578 (type_declarations -> type_declaration .)
    PROTECTED       reduce using rule 578 (type_declarations -> type_declaration .)
    PRIVATE         reduce using rule 578 (type_declarations -> type_declaration .)
    STATIC          reduce using rule 578 (type_declarations -> type_declaration .)
    ABSTRACT        reduce using rule 578 (type_declarations -> type_declaration .)
    FINAL           reduce using rule 578 (type_declarations -> type_declaration .)
    NATIVE          reduce using rule 578 (type_declarations -> type_declaration .)
    SYNCHRONIZED    reduce using rule 578 (type_declarations -> type_declaration .)
    TRANSIENT       reduce using rule 578 (type_declarations -> type_declaration .)
    VOLATILE        reduce using rule 578 (type_declarations -> type_declaration .)
    STRICTFP        reduce using rule 578 (type_declarations -> type_declaration .)
    ATRATE          reduce using rule 578 (type_declarations -> type_declaration .)
    CLASS           reduce using rule 578 (type_declarations -> type_declaration .)
    INTERFACE       reduce using rule 578 (type_declarations -> type_declaration .)
    $end            reduce using rule 578 (type_declarations -> type_declaration .)


state 14

    (566) package_declaration_name -> modifiers . PACKAGE name
    (366) modifiers -> modifiers . modifier
    (363) modifiers_opt -> modifiers .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    PACKAGE         shift and go to state 193
    CLASS           reduce using rule 363 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 363 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    modifier                       shift and go to state 194
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 15

    (567) package_declaration_name -> PACKAGE . name
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 195
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 16

    (570) import_declaration -> single_type_import_declaration .

    SEMICOLON       reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    IMPORT          reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    PUBLIC          reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    PROTECTED       reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    PRIVATE         reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    STATIC          reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    ABSTRACT        reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    FINAL           reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    NATIVE          reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    SYNCHRONIZED    reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    TRANSIENT       reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    VOLATILE        reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    STRICTFP        reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    ATRATE          reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    CLASS           reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    INTERFACE       reduce using rule 570 (import_declaration -> single_type_import_declaration .)
    $end            reduce using rule 570 (import_declaration -> single_type_import_declaration .)


state 17

    (571) import_declaration -> type_import_on_demand_declaration .

    SEMICOLON       reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    IMPORT          reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    PUBLIC          reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    PROTECTED       reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    PRIVATE         reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    STATIC          reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    ABSTRACT        reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    FINAL           reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    NATIVE          reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    SYNCHRONIZED    reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    TRANSIENT       reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    VOLATILE        reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    STRICTFP        reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    ATRATE          reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    CLASS           reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    INTERFACE       reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)
    $end            reduce using rule 571 (import_declaration -> type_import_on_demand_declaration .)


state 18

    (572) import_declaration -> single_static_import_declaration .

    SEMICOLON       reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    IMPORT          reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    PUBLIC          reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    PROTECTED       reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    PRIVATE         reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    STATIC          reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    ABSTRACT        reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    FINAL           reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    NATIVE          reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    SYNCHRONIZED    reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    TRANSIENT       reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    VOLATILE        reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    STRICTFP        reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    ATRATE          reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    CLASS           reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    INTERFACE       reduce using rule 572 (import_declaration -> single_static_import_declaration .)
    $end            reduce using rule 572 (import_declaration -> single_static_import_declaration .)


state 19

    (573) import_declaration -> static_import_on_demand_declaration .

    SEMICOLON       reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    IMPORT          reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    PUBLIC          reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    PROTECTED       reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    PRIVATE         reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    STATIC          reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    ABSTRACT        reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    FINAL           reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    NATIVE          reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    SYNCHRONIZED    reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    TRANSIENT       reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    VOLATILE        reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    STRICTFP        reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    ATRATE          reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    CLASS           reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    INTERFACE       reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)
    $end            reduce using rule 573 (import_declaration -> static_import_on_demand_declaration .)


state 20

    (459) type_declaration -> class_declaration .

    SEMICOLON       reduce using rule 459 (type_declaration -> class_declaration .)
    PUBLIC          reduce using rule 459 (type_declaration -> class_declaration .)
    PROTECTED       reduce using rule 459 (type_declaration -> class_declaration .)
    PRIVATE         reduce using rule 459 (type_declaration -> class_declaration .)
    STATIC          reduce using rule 459 (type_declaration -> class_declaration .)
    ABSTRACT        reduce using rule 459 (type_declaration -> class_declaration .)
    FINAL           reduce using rule 459 (type_declaration -> class_declaration .)
    NATIVE          reduce using rule 459 (type_declaration -> class_declaration .)
    SYNCHRONIZED    reduce using rule 459 (type_declaration -> class_declaration .)
    TRANSIENT       reduce using rule 459 (type_declaration -> class_declaration .)
    VOLATILE        reduce using rule 459 (type_declaration -> class_declaration .)
    STRICTFP        reduce using rule 459 (type_declaration -> class_declaration .)
    ATRATE          reduce using rule 459 (type_declaration -> class_declaration .)
    CLASS           reduce using rule 459 (type_declaration -> class_declaration .)
    INTERFACE       reduce using rule 459 (type_declaration -> class_declaration .)
    $end            reduce using rule 459 (type_declaration -> class_declaration .)


state 21

    (460) type_declaration -> interface_declaration .

    SEMICOLON       reduce using rule 460 (type_declaration -> interface_declaration .)
    PUBLIC          reduce using rule 460 (type_declaration -> interface_declaration .)
    PROTECTED       reduce using rule 460 (type_declaration -> interface_declaration .)
    PRIVATE         reduce using rule 460 (type_declaration -> interface_declaration .)
    STATIC          reduce using rule 460 (type_declaration -> interface_declaration .)
    ABSTRACT        reduce using rule 460 (type_declaration -> interface_declaration .)
    FINAL           reduce using rule 460 (type_declaration -> interface_declaration .)
    NATIVE          reduce using rule 460 (type_declaration -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 460 (type_declaration -> interface_declaration .)
    TRANSIENT       reduce using rule 460 (type_declaration -> interface_declaration .)
    VOLATILE        reduce using rule 460 (type_declaration -> interface_declaration .)
    STRICTFP        reduce using rule 460 (type_declaration -> interface_declaration .)
    ATRATE          reduce using rule 460 (type_declaration -> interface_declaration .)
    CLASS           reduce using rule 460 (type_declaration -> interface_declaration .)
    INTERFACE       reduce using rule 460 (type_declaration -> interface_declaration .)
    $end            reduce using rule 460 (type_declaration -> interface_declaration .)


state 22

    (365) modifiers -> modifier .

    PACKAGE         reduce using rule 365 (modifiers -> modifier .)
    PUBLIC          reduce using rule 365 (modifiers -> modifier .)
    PROTECTED       reduce using rule 365 (modifiers -> modifier .)
    PRIVATE         reduce using rule 365 (modifiers -> modifier .)
    STATIC          reduce using rule 365 (modifiers -> modifier .)
    ABSTRACT        reduce using rule 365 (modifiers -> modifier .)
    FINAL           reduce using rule 365 (modifiers -> modifier .)
    NATIVE          reduce using rule 365 (modifiers -> modifier .)
    SYNCHRONIZED    reduce using rule 365 (modifiers -> modifier .)
    TRANSIENT       reduce using rule 365 (modifiers -> modifier .)
    VOLATILE        reduce using rule 365 (modifiers -> modifier .)
    STRICTFP        reduce using rule 365 (modifiers -> modifier .)
    ATRATE          reduce using rule 365 (modifiers -> modifier .)
    CLASS           reduce using rule 365 (modifiers -> modifier .)
    INTERFACE       reduce using rule 365 (modifiers -> modifier .)
    BOOLEAN         reduce using rule 365 (modifiers -> modifier .)
    VOID            reduce using rule 365 (modifiers -> modifier .)
    BYTE            reduce using rule 365 (modifiers -> modifier .)
    SHORT           reduce using rule 365 (modifiers -> modifier .)
    INT             reduce using rule 365 (modifiers -> modifier .)
    LONG            reduce using rule 365 (modifiers -> modifier .)
    CHAR            reduce using rule 365 (modifiers -> modifier .)
    FLOAT           reduce using rule 365 (modifiers -> modifier .)
    DOUBLE          reduce using rule 365 (modifiers -> modifier .)
    IDENT           reduce using rule 365 (modifiers -> modifier .)
    LSS             reduce using rule 365 (modifiers -> modifier .)


state 23

    (574) single_type_import_declaration -> IMPORT . name SEMICOLON
    (575) type_import_on_demand_declaration -> IMPORT . name PERIOD MUL SEMICOLON
    (576) single_static_import_declaration -> IMPORT . STATIC name SEMICOLON
    (577) static_import_on_demand_declaration -> IMPORT . STATIC name PERIOD MUL SEMICOLON
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    STATIC          shift and go to state 198
    IDENT           shift and go to state 196

    name                           shift and go to state 197
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 24

    (370) modifier -> STATIC .

    PACKAGE         reduce using rule 370 (modifier -> STATIC .)
    PUBLIC          reduce using rule 370 (modifier -> STATIC .)
    PROTECTED       reduce using rule 370 (modifier -> STATIC .)
    PRIVATE         reduce using rule 370 (modifier -> STATIC .)
    STATIC          reduce using rule 370 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 370 (modifier -> STATIC .)
    FINAL           reduce using rule 370 (modifier -> STATIC .)
    NATIVE          reduce using rule 370 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 370 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 370 (modifier -> STATIC .)
    VOLATILE        reduce using rule 370 (modifier -> STATIC .)
    STRICTFP        reduce using rule 370 (modifier -> STATIC .)
    ATRATE          reduce using rule 370 (modifier -> STATIC .)
    CLASS           reduce using rule 370 (modifier -> STATIC .)
    INTERFACE       reduce using rule 370 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 370 (modifier -> STATIC .)
    VOID            reduce using rule 370 (modifier -> STATIC .)
    BYTE            reduce using rule 370 (modifier -> STATIC .)
    SHORT           reduce using rule 370 (modifier -> STATIC .)
    INT             reduce using rule 370 (modifier -> STATIC .)
    LONG            reduce using rule 370 (modifier -> STATIC .)
    CHAR            reduce using rule 370 (modifier -> STATIC .)
    FLOAT           reduce using rule 370 (modifier -> STATIC .)
    DOUBLE          reduce using rule 370 (modifier -> STATIC .)
    IDENT           reduce using rule 370 (modifier -> STATIC .)
    LSS             reduce using rule 370 (modifier -> STATIC .)


state 25

    (462) class_declaration -> class_header . class_body
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE

    LBRACE          shift and go to state 200

    class_body                     shift and go to state 199

state 26

    (511) interface_declaration -> interface_header . interface_body
    (519) interface_body -> . LBRACE interface_member_declarations_opt RBRACE

    LBRACE          shift and go to state 202

    interface_body                 shift and go to state 201

state 27

    (367) modifier -> PUBLIC .

    PACKAGE         reduce using rule 367 (modifier -> PUBLIC .)
    PUBLIC          reduce using rule 367 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 367 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 367 (modifier -> PUBLIC .)
    STATIC          reduce using rule 367 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 367 (modifier -> PUBLIC .)
    FINAL           reduce using rule 367 (modifier -> PUBLIC .)
    NATIVE          reduce using rule 367 (modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 367 (modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 367 (modifier -> PUBLIC .)
    VOLATILE        reduce using rule 367 (modifier -> PUBLIC .)
    STRICTFP        reduce using rule 367 (modifier -> PUBLIC .)
    ATRATE          reduce using rule 367 (modifier -> PUBLIC .)
    CLASS           reduce using rule 367 (modifier -> PUBLIC .)
    INTERFACE       reduce using rule 367 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 367 (modifier -> PUBLIC .)
    VOID            reduce using rule 367 (modifier -> PUBLIC .)
    BYTE            reduce using rule 367 (modifier -> PUBLIC .)
    SHORT           reduce using rule 367 (modifier -> PUBLIC .)
    INT             reduce using rule 367 (modifier -> PUBLIC .)
    LONG            reduce using rule 367 (modifier -> PUBLIC .)
    CHAR            reduce using rule 367 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 367 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 367 (modifier -> PUBLIC .)
    IDENT           reduce using rule 367 (modifier -> PUBLIC .)
    LSS             reduce using rule 367 (modifier -> PUBLIC .)


state 28

    (368) modifier -> PROTECTED .

    PACKAGE         reduce using rule 368 (modifier -> PROTECTED .)
    PUBLIC          reduce using rule 368 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 368 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 368 (modifier -> PROTECTED .)
    STATIC          reduce using rule 368 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 368 (modifier -> PROTECTED .)
    FINAL           reduce using rule 368 (modifier -> PROTECTED .)
    NATIVE          reduce using rule 368 (modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 368 (modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 368 (modifier -> PROTECTED .)
    VOLATILE        reduce using rule 368 (modifier -> PROTECTED .)
    STRICTFP        reduce using rule 368 (modifier -> PROTECTED .)
    ATRATE          reduce using rule 368 (modifier -> PROTECTED .)
    CLASS           reduce using rule 368 (modifier -> PROTECTED .)
    INTERFACE       reduce using rule 368 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 368 (modifier -> PROTECTED .)
    VOID            reduce using rule 368 (modifier -> PROTECTED .)
    BYTE            reduce using rule 368 (modifier -> PROTECTED .)
    SHORT           reduce using rule 368 (modifier -> PROTECTED .)
    INT             reduce using rule 368 (modifier -> PROTECTED .)
    LONG            reduce using rule 368 (modifier -> PROTECTED .)
    CHAR            reduce using rule 368 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 368 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 368 (modifier -> PROTECTED .)
    IDENT           reduce using rule 368 (modifier -> PROTECTED .)
    LSS             reduce using rule 368 (modifier -> PROTECTED .)


state 29

    (369) modifier -> PRIVATE .

    PACKAGE         reduce using rule 369 (modifier -> PRIVATE .)
    PUBLIC          reduce using rule 369 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 369 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 369 (modifier -> PRIVATE .)
    STATIC          reduce using rule 369 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 369 (modifier -> PRIVATE .)
    FINAL           reduce using rule 369 (modifier -> PRIVATE .)
    NATIVE          reduce using rule 369 (modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 369 (modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 369 (modifier -> PRIVATE .)
    VOLATILE        reduce using rule 369 (modifier -> PRIVATE .)
    STRICTFP        reduce using rule 369 (modifier -> PRIVATE .)
    ATRATE          reduce using rule 369 (modifier -> PRIVATE .)
    CLASS           reduce using rule 369 (modifier -> PRIVATE .)
    INTERFACE       reduce using rule 369 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 369 (modifier -> PRIVATE .)
    VOID            reduce using rule 369 (modifier -> PRIVATE .)
    BYTE            reduce using rule 369 (modifier -> PRIVATE .)
    SHORT           reduce using rule 369 (modifier -> PRIVATE .)
    INT             reduce using rule 369 (modifier -> PRIVATE .)
    LONG            reduce using rule 369 (modifier -> PRIVATE .)
    CHAR            reduce using rule 369 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 369 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 369 (modifier -> PRIVATE .)
    IDENT           reduce using rule 369 (modifier -> PRIVATE .)
    LSS             reduce using rule 369 (modifier -> PRIVATE .)


state 30

    (371) modifier -> ABSTRACT .

    PACKAGE         reduce using rule 371 (modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 371 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 371 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 371 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 371 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 371 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 371 (modifier -> ABSTRACT .)
    NATIVE          reduce using rule 371 (modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 371 (modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 371 (modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 371 (modifier -> ABSTRACT .)
    STRICTFP        reduce using rule 371 (modifier -> ABSTRACT .)
    ATRATE          reduce using rule 371 (modifier -> ABSTRACT .)
    CLASS           reduce using rule 371 (modifier -> ABSTRACT .)
    INTERFACE       reduce using rule 371 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 371 (modifier -> ABSTRACT .)
    VOID            reduce using rule 371 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 371 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 371 (modifier -> ABSTRACT .)
    INT             reduce using rule 371 (modifier -> ABSTRACT .)
    LONG            reduce using rule 371 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 371 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 371 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 371 (modifier -> ABSTRACT .)
    IDENT           reduce using rule 371 (modifier -> ABSTRACT .)
    LSS             reduce using rule 371 (modifier -> ABSTRACT .)


state 31

    (372) modifier -> FINAL .

    PACKAGE         reduce using rule 372 (modifier -> FINAL .)
    PUBLIC          reduce using rule 372 (modifier -> FINAL .)
    PROTECTED       reduce using rule 372 (modifier -> FINAL .)
    PRIVATE         reduce using rule 372 (modifier -> FINAL .)
    STATIC          reduce using rule 372 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 372 (modifier -> FINAL .)
    FINAL           reduce using rule 372 (modifier -> FINAL .)
    NATIVE          reduce using rule 372 (modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 372 (modifier -> FINAL .)
    TRANSIENT       reduce using rule 372 (modifier -> FINAL .)
    VOLATILE        reduce using rule 372 (modifier -> FINAL .)
    STRICTFP        reduce using rule 372 (modifier -> FINAL .)
    ATRATE          reduce using rule 372 (modifier -> FINAL .)
    CLASS           reduce using rule 372 (modifier -> FINAL .)
    INTERFACE       reduce using rule 372 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 372 (modifier -> FINAL .)
    VOID            reduce using rule 372 (modifier -> FINAL .)
    BYTE            reduce using rule 372 (modifier -> FINAL .)
    SHORT           reduce using rule 372 (modifier -> FINAL .)
    INT             reduce using rule 372 (modifier -> FINAL .)
    LONG            reduce using rule 372 (modifier -> FINAL .)
    CHAR            reduce using rule 372 (modifier -> FINAL .)
    FLOAT           reduce using rule 372 (modifier -> FINAL .)
    DOUBLE          reduce using rule 372 (modifier -> FINAL .)
    IDENT           reduce using rule 372 (modifier -> FINAL .)
    LSS             reduce using rule 372 (modifier -> FINAL .)


state 32

    (373) modifier -> NATIVE .

    PACKAGE         reduce using rule 373 (modifier -> NATIVE .)
    PUBLIC          reduce using rule 373 (modifier -> NATIVE .)
    PROTECTED       reduce using rule 373 (modifier -> NATIVE .)
    PRIVATE         reduce using rule 373 (modifier -> NATIVE .)
    STATIC          reduce using rule 373 (modifier -> NATIVE .)
    ABSTRACT        reduce using rule 373 (modifier -> NATIVE .)
    FINAL           reduce using rule 373 (modifier -> NATIVE .)
    NATIVE          reduce using rule 373 (modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 373 (modifier -> NATIVE .)
    TRANSIENT       reduce using rule 373 (modifier -> NATIVE .)
    VOLATILE        reduce using rule 373 (modifier -> NATIVE .)
    STRICTFP        reduce using rule 373 (modifier -> NATIVE .)
    ATRATE          reduce using rule 373 (modifier -> NATIVE .)
    CLASS           reduce using rule 373 (modifier -> NATIVE .)
    INTERFACE       reduce using rule 373 (modifier -> NATIVE .)
    BOOLEAN         reduce using rule 373 (modifier -> NATIVE .)
    VOID            reduce using rule 373 (modifier -> NATIVE .)
    BYTE            reduce using rule 373 (modifier -> NATIVE .)
    SHORT           reduce using rule 373 (modifier -> NATIVE .)
    INT             reduce using rule 373 (modifier -> NATIVE .)
    LONG            reduce using rule 373 (modifier -> NATIVE .)
    CHAR            reduce using rule 373 (modifier -> NATIVE .)
    FLOAT           reduce using rule 373 (modifier -> NATIVE .)
    DOUBLE          reduce using rule 373 (modifier -> NATIVE .)
    IDENT           reduce using rule 373 (modifier -> NATIVE .)
    LSS             reduce using rule 373 (modifier -> NATIVE .)


state 33

    (374) modifier -> SYNCHRONIZED .

    PACKAGE         reduce using rule 374 (modifier -> SYNCHRONIZED .)
    PUBLIC          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 374 (modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 374 (modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 374 (modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 374 (modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 374 (modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 374 (modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 374 (modifier -> SYNCHRONIZED .)
    ATRATE          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 374 (modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 374 (modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    INT             reduce using rule 374 (modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    IDENT           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    LSS             reduce using rule 374 (modifier -> SYNCHRONIZED .)


state 34

    (375) modifier -> TRANSIENT .

    PACKAGE         reduce using rule 375 (modifier -> TRANSIENT .)
    PUBLIC          reduce using rule 375 (modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 375 (modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 375 (modifier -> TRANSIENT .)
    STATIC          reduce using rule 375 (modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 375 (modifier -> TRANSIENT .)
    FINAL           reduce using rule 375 (modifier -> TRANSIENT .)
    NATIVE          reduce using rule 375 (modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 375 (modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 375 (modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 375 (modifier -> TRANSIENT .)
    STRICTFP        reduce using rule 375 (modifier -> TRANSIENT .)
    ATRATE          reduce using rule 375 (modifier -> TRANSIENT .)
    CLASS           reduce using rule 375 (modifier -> TRANSIENT .)
    INTERFACE       reduce using rule 375 (modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 375 (modifier -> TRANSIENT .)
    VOID            reduce using rule 375 (modifier -> TRANSIENT .)
    BYTE            reduce using rule 375 (modifier -> TRANSIENT .)
    SHORT           reduce using rule 375 (modifier -> TRANSIENT .)
    INT             reduce using rule 375 (modifier -> TRANSIENT .)
    LONG            reduce using rule 375 (modifier -> TRANSIENT .)
    CHAR            reduce using rule 375 (modifier -> TRANSIENT .)
    FLOAT           reduce using rule 375 (modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 375 (modifier -> TRANSIENT .)
    IDENT           reduce using rule 375 (modifier -> TRANSIENT .)
    LSS             reduce using rule 375 (modifier -> TRANSIENT .)


state 35

    (376) modifier -> VOLATILE .

    PACKAGE         reduce using rule 376 (modifier -> VOLATILE .)
    PUBLIC          reduce using rule 376 (modifier -> VOLATILE .)
    PROTECTED       reduce using rule 376 (modifier -> VOLATILE .)
    PRIVATE         reduce using rule 376 (modifier -> VOLATILE .)
    STATIC          reduce using rule 376 (modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 376 (modifier -> VOLATILE .)
    FINAL           reduce using rule 376 (modifier -> VOLATILE .)
    NATIVE          reduce using rule 376 (modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 376 (modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 376 (modifier -> VOLATILE .)
    VOLATILE        reduce using rule 376 (modifier -> VOLATILE .)
    STRICTFP        reduce using rule 376 (modifier -> VOLATILE .)
    ATRATE          reduce using rule 376 (modifier -> VOLATILE .)
    CLASS           reduce using rule 376 (modifier -> VOLATILE .)
    INTERFACE       reduce using rule 376 (modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 376 (modifier -> VOLATILE .)
    VOID            reduce using rule 376 (modifier -> VOLATILE .)
    BYTE            reduce using rule 376 (modifier -> VOLATILE .)
    SHORT           reduce using rule 376 (modifier -> VOLATILE .)
    INT             reduce using rule 376 (modifier -> VOLATILE .)
    LONG            reduce using rule 376 (modifier -> VOLATILE .)
    CHAR            reduce using rule 376 (modifier -> VOLATILE .)
    FLOAT           reduce using rule 376 (modifier -> VOLATILE .)
    DOUBLE          reduce using rule 376 (modifier -> VOLATILE .)
    IDENT           reduce using rule 376 (modifier -> VOLATILE .)
    LSS             reduce using rule 376 (modifier -> VOLATILE .)


state 36

    (377) modifier -> STRICTFP .

    PACKAGE         reduce using rule 377 (modifier -> STRICTFP .)
    PUBLIC          reduce using rule 377 (modifier -> STRICTFP .)
    PROTECTED       reduce using rule 377 (modifier -> STRICTFP .)
    PRIVATE         reduce using rule 377 (modifier -> STRICTFP .)
    STATIC          reduce using rule 377 (modifier -> STRICTFP .)
    ABSTRACT        reduce using rule 377 (modifier -> STRICTFP .)
    FINAL           reduce using rule 377 (modifier -> STRICTFP .)
    NATIVE          reduce using rule 377 (modifier -> STRICTFP .)
    SYNCHRONIZED    reduce using rule 377 (modifier -> STRICTFP .)
    TRANSIENT       reduce using rule 377 (modifier -> STRICTFP .)
    VOLATILE        reduce using rule 377 (modifier -> STRICTFP .)
    STRICTFP        reduce using rule 377 (modifier -> STRICTFP .)
    ATRATE          reduce using rule 377 (modifier -> STRICTFP .)
    CLASS           reduce using rule 377 (modifier -> STRICTFP .)
    INTERFACE       reduce using rule 377 (modifier -> STRICTFP .)
    BOOLEAN         reduce using rule 377 (modifier -> STRICTFP .)
    VOID            reduce using rule 377 (modifier -> STRICTFP .)
    BYTE            reduce using rule 377 (modifier -> STRICTFP .)
    SHORT           reduce using rule 377 (modifier -> STRICTFP .)
    INT             reduce using rule 377 (modifier -> STRICTFP .)
    LONG            reduce using rule 377 (modifier -> STRICTFP .)
    CHAR            reduce using rule 377 (modifier -> STRICTFP .)
    FLOAT           reduce using rule 377 (modifier -> STRICTFP .)
    DOUBLE          reduce using rule 377 (modifier -> STRICTFP .)
    IDENT           reduce using rule 377 (modifier -> STRICTFP .)
    LSS             reduce using rule 377 (modifier -> STRICTFP .)


state 37

    (378) modifier -> annotation .

    PACKAGE         reduce using rule 378 (modifier -> annotation .)
    PUBLIC          reduce using rule 378 (modifier -> annotation .)
    PROTECTED       reduce using rule 378 (modifier -> annotation .)
    PRIVATE         reduce using rule 378 (modifier -> annotation .)
    STATIC          reduce using rule 378 (modifier -> annotation .)
    ABSTRACT        reduce using rule 378 (modifier -> annotation .)
    FINAL           reduce using rule 378 (modifier -> annotation .)
    NATIVE          reduce using rule 378 (modifier -> annotation .)
    SYNCHRONIZED    reduce using rule 378 (modifier -> annotation .)
    TRANSIENT       reduce using rule 378 (modifier -> annotation .)
    VOLATILE        reduce using rule 378 (modifier -> annotation .)
    STRICTFP        reduce using rule 378 (modifier -> annotation .)
    ATRATE          reduce using rule 378 (modifier -> annotation .)
    CLASS           reduce using rule 378 (modifier -> annotation .)
    INTERFACE       reduce using rule 378 (modifier -> annotation .)
    BOOLEAN         reduce using rule 378 (modifier -> annotation .)
    VOID            reduce using rule 378 (modifier -> annotation .)
    BYTE            reduce using rule 378 (modifier -> annotation .)
    SHORT           reduce using rule 378 (modifier -> annotation .)
    INT             reduce using rule 378 (modifier -> annotation .)
    LONG            reduce using rule 378 (modifier -> annotation .)
    CHAR            reduce using rule 378 (modifier -> annotation .)
    FLOAT           reduce using rule 378 (modifier -> annotation .)
    DOUBLE          reduce using rule 378 (modifier -> annotation .)
    IDENT           reduce using rule 378 (modifier -> annotation .)
    LSS             reduce using rule 378 (modifier -> annotation .)


state 38

    (463) class_header -> class_header_name . empty empty
    (583) empty -> .

    LBRACE          reduce using rule 583 (empty -> .)

    empty                          shift and go to state 203

state 39

    (512) interface_header -> interface_header_name . interface_header_extends_opt
    (516) interface_header_extends_opt -> . interface_header_extends
    (517) interface_header_extends_opt -> . empty
    (518) interface_header_extends -> . EXTENDS interface_type_list
    (583) empty -> .

    EXTENDS         shift and go to state 207
    LBRACE          reduce using rule 583 (empty -> .)

    interface_header_extends_opt   shift and go to state 204
    interface_header_extends       shift and go to state 205
    empty                          shift and go to state 206

state 40

    (544) annotation -> normal_annotation .

    PACKAGE         reduce using rule 544 (annotation -> normal_annotation .)
    PUBLIC          reduce using rule 544 (annotation -> normal_annotation .)
    PROTECTED       reduce using rule 544 (annotation -> normal_annotation .)
    PRIVATE         reduce using rule 544 (annotation -> normal_annotation .)
    STATIC          reduce using rule 544 (annotation -> normal_annotation .)
    ABSTRACT        reduce using rule 544 (annotation -> normal_annotation .)
    FINAL           reduce using rule 544 (annotation -> normal_annotation .)
    NATIVE          reduce using rule 544 (annotation -> normal_annotation .)
    SYNCHRONIZED    reduce using rule 544 (annotation -> normal_annotation .)
    TRANSIENT       reduce using rule 544 (annotation -> normal_annotation .)
    VOLATILE        reduce using rule 544 (annotation -> normal_annotation .)
    STRICTFP        reduce using rule 544 (annotation -> normal_annotation .)
    ATRATE          reduce using rule 544 (annotation -> normal_annotation .)
    CLASS           reduce using rule 544 (annotation -> normal_annotation .)
    INTERFACE       reduce using rule 544 (annotation -> normal_annotation .)
    BOOLEAN         reduce using rule 544 (annotation -> normal_annotation .)
    VOID            reduce using rule 544 (annotation -> normal_annotation .)
    BYTE            reduce using rule 544 (annotation -> normal_annotation .)
    SHORT           reduce using rule 544 (annotation -> normal_annotation .)
    INT             reduce using rule 544 (annotation -> normal_annotation .)
    LONG            reduce using rule 544 (annotation -> normal_annotation .)
    CHAR            reduce using rule 544 (annotation -> normal_annotation .)
    FLOAT           reduce using rule 544 (annotation -> normal_annotation .)
    DOUBLE          reduce using rule 544 (annotation -> normal_annotation .)
    IDENT           reduce using rule 544 (annotation -> normal_annotation .)
    LSS             reduce using rule 544 (annotation -> normal_annotation .)
    RPAREN          reduce using rule 544 (annotation -> normal_annotation .)
    COMMA           reduce using rule 544 (annotation -> normal_annotation .)
    RBRACE          reduce using rule 544 (annotation -> normal_annotation .)


state 41

    (545) annotation -> marker_annotation .

    PACKAGE         reduce using rule 545 (annotation -> marker_annotation .)
    PUBLIC          reduce using rule 545 (annotation -> marker_annotation .)
    PROTECTED       reduce using rule 545 (annotation -> marker_annotation .)
    PRIVATE         reduce using rule 545 (annotation -> marker_annotation .)
    STATIC          reduce using rule 545 (annotation -> marker_annotation .)
    ABSTRACT        reduce using rule 545 (annotation -> marker_annotation .)
    FINAL           reduce using rule 545 (annotation -> marker_annotation .)
    NATIVE          reduce using rule 545 (annotation -> marker_annotation .)
    SYNCHRONIZED    reduce using rule 545 (annotation -> marker_annotation .)
    TRANSIENT       reduce using rule 545 (annotation -> marker_annotation .)
    VOLATILE        reduce using rule 545 (annotation -> marker_annotation .)
    STRICTFP        reduce using rule 545 (annotation -> marker_annotation .)
    ATRATE          reduce using rule 545 (annotation -> marker_annotation .)
    CLASS           reduce using rule 545 (annotation -> marker_annotation .)
    INTERFACE       reduce using rule 545 (annotation -> marker_annotation .)
    BOOLEAN         reduce using rule 545 (annotation -> marker_annotation .)
    VOID            reduce using rule 545 (annotation -> marker_annotation .)
    BYTE            reduce using rule 545 (annotation -> marker_annotation .)
    SHORT           reduce using rule 545 (annotation -> marker_annotation .)
    INT             reduce using rule 545 (annotation -> marker_annotation .)
    LONG            reduce using rule 545 (annotation -> marker_annotation .)
    CHAR            reduce using rule 545 (annotation -> marker_annotation .)
    FLOAT           reduce using rule 545 (annotation -> marker_annotation .)
    DOUBLE          reduce using rule 545 (annotation -> marker_annotation .)
    IDENT           reduce using rule 545 (annotation -> marker_annotation .)
    LSS             reduce using rule 545 (annotation -> marker_annotation .)
    RPAREN          reduce using rule 545 (annotation -> marker_annotation .)
    COMMA           reduce using rule 545 (annotation -> marker_annotation .)
    RBRACE          reduce using rule 545 (annotation -> marker_annotation .)


state 42

    (546) annotation -> single_member_annotation .

    PACKAGE         reduce using rule 546 (annotation -> single_member_annotation .)
    PUBLIC          reduce using rule 546 (annotation -> single_member_annotation .)
    PROTECTED       reduce using rule 546 (annotation -> single_member_annotation .)
    PRIVATE         reduce using rule 546 (annotation -> single_member_annotation .)
    STATIC          reduce using rule 546 (annotation -> single_member_annotation .)
    ABSTRACT        reduce using rule 546 (annotation -> single_member_annotation .)
    FINAL           reduce using rule 546 (annotation -> single_member_annotation .)
    NATIVE          reduce using rule 546 (annotation -> single_member_annotation .)
    SYNCHRONIZED    reduce using rule 546 (annotation -> single_member_annotation .)
    TRANSIENT       reduce using rule 546 (annotation -> single_member_annotation .)
    VOLATILE        reduce using rule 546 (annotation -> single_member_annotation .)
    STRICTFP        reduce using rule 546 (annotation -> single_member_annotation .)
    ATRATE          reduce using rule 546 (annotation -> single_member_annotation .)
    CLASS           reduce using rule 546 (annotation -> single_member_annotation .)
    INTERFACE       reduce using rule 546 (annotation -> single_member_annotation .)
    BOOLEAN         reduce using rule 546 (annotation -> single_member_annotation .)
    VOID            reduce using rule 546 (annotation -> single_member_annotation .)
    BYTE            reduce using rule 546 (annotation -> single_member_annotation .)
    SHORT           reduce using rule 546 (annotation -> single_member_annotation .)
    INT             reduce using rule 546 (annotation -> single_member_annotation .)
    LONG            reduce using rule 546 (annotation -> single_member_annotation .)
    CHAR            reduce using rule 546 (annotation -> single_member_annotation .)
    FLOAT           reduce using rule 546 (annotation -> single_member_annotation .)
    DOUBLE          reduce using rule 546 (annotation -> single_member_annotation .)
    IDENT           reduce using rule 546 (annotation -> single_member_annotation .)
    LSS             reduce using rule 546 (annotation -> single_member_annotation .)
    RPAREN          reduce using rule 546 (annotation -> single_member_annotation .)
    COMMA           reduce using rule 546 (annotation -> single_member_annotation .)
    RBRACE          reduce using rule 546 (annotation -> single_member_annotation .)


state 43

    (464) class_header_name -> class_header_name1 . type_parameters
    (465) class_header_name -> class_header_name1 .
    (442) type_parameters -> . LSS type_parameter_list1

    LBRACE          reduce using rule 465 (class_header_name -> class_header_name1 .)
    LSS             shift and go to state 209

    type_parameters                shift and go to state 208

state 44

    (513) interface_header_name -> interface_header_name1 . type_parameters
    (514) interface_header_name -> interface_header_name1 .
    (442) type_parameters -> . LSS type_parameter_list1

    EXTENDS         reduce using rule 514 (interface_header_name -> interface_header_name1 .)
    LBRACE          reduce using rule 514 (interface_header_name -> interface_header_name1 .)
    LSS             shift and go to state 209

    type_parameters                shift and go to state 210

state 45

    (547) normal_annotation -> annotation_name . LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> annotation_name .
    (555) single_member_annotation -> annotation_name . LPAREN single_member_annotation_member_value RPAREN

    LPAREN          shift and go to state 211
    PACKAGE         reduce using rule 554 (marker_annotation -> annotation_name .)
    PUBLIC          reduce using rule 554 (marker_annotation -> annotation_name .)
    PROTECTED       reduce using rule 554 (marker_annotation -> annotation_name .)
    PRIVATE         reduce using rule 554 (marker_annotation -> annotation_name .)
    STATIC          reduce using rule 554 (marker_annotation -> annotation_name .)
    ABSTRACT        reduce using rule 554 (marker_annotation -> annotation_name .)
    FINAL           reduce using rule 554 (marker_annotation -> annotation_name .)
    NATIVE          reduce using rule 554 (marker_annotation -> annotation_name .)
    SYNCHRONIZED    reduce using rule 554 (marker_annotation -> annotation_name .)
    TRANSIENT       reduce using rule 554 (marker_annotation -> annotation_name .)
    VOLATILE        reduce using rule 554 (marker_annotation -> annotation_name .)
    STRICTFP        reduce using rule 554 (marker_annotation -> annotation_name .)
    ATRATE          reduce using rule 554 (marker_annotation -> annotation_name .)
    CLASS           reduce using rule 554 (marker_annotation -> annotation_name .)
    INTERFACE       reduce using rule 554 (marker_annotation -> annotation_name .)
    BOOLEAN         reduce using rule 554 (marker_annotation -> annotation_name .)
    VOID            reduce using rule 554 (marker_annotation -> annotation_name .)
    BYTE            reduce using rule 554 (marker_annotation -> annotation_name .)
    SHORT           reduce using rule 554 (marker_annotation -> annotation_name .)
    INT             reduce using rule 554 (marker_annotation -> annotation_name .)
    LONG            reduce using rule 554 (marker_annotation -> annotation_name .)
    CHAR            reduce using rule 554 (marker_annotation -> annotation_name .)
    FLOAT           reduce using rule 554 (marker_annotation -> annotation_name .)
    DOUBLE          reduce using rule 554 (marker_annotation -> annotation_name .)
    IDENT           reduce using rule 554 (marker_annotation -> annotation_name .)
    LSS             reduce using rule 554 (marker_annotation -> annotation_name .)
    RPAREN          reduce using rule 554 (marker_annotation -> annotation_name .)
    COMMA           reduce using rule 554 (marker_annotation -> annotation_name .)
    RBRACE          reduce using rule 554 (marker_annotation -> annotation_name .)


state 46

    (466) class_header_name1 -> modifiers_opt . CLASS IDENT
    (515) interface_header_name1 -> modifiers_opt . INTERFACE IDENT

    CLASS           shift and go to state 212
    INTERFACE       shift and go to state 213


state 47

    (548) annotation_name -> ATRATE . name
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 214
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 48

    (119) pre_decrement_expression -> DEC . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 215
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 49

    (581) start -> DEC expression .

    $end            reduce using rule 581 (start -> DEC expression .)


state 50

    (1) expression -> assignment_expression .

    $end            reduce using rule 1 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 1 (expression -> assignment_expression .)
    COLON           reduce using rule 1 (expression -> assignment_expression .)
    RBRACK          reduce using rule 1 (expression -> assignment_expression .)
    COMMA           reduce using rule 1 (expression -> assignment_expression .)
    RPAREN          reduce using rule 1 (expression -> assignment_expression .)
    RBRACE          reduce using rule 1 (expression -> assignment_expression .)


state 51

    (3) assignment_expression -> assignment .

    $end            reduce using rule 3 (assignment_expression -> assignment .)
    SEMICOLON       reduce using rule 3 (assignment_expression -> assignment .)
    COLON           reduce using rule 3 (assignment_expression -> assignment .)
    RPAREN          reduce using rule 3 (assignment_expression -> assignment .)
    RBRACK          reduce using rule 3 (assignment_expression -> assignment .)
    COMMA           reduce using rule 3 (assignment_expression -> assignment .)
    RBRACE          reduce using rule 3 (assignment_expression -> assignment .)


state 52

    (4) assignment_expression -> conditional_expression .

    $end            reduce using rule 4 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 4 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 4 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 4 (assignment_expression -> conditional_expression .)
    RBRACK          reduce using rule 4 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 4 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 4 (assignment_expression -> conditional_expression .)


state 53

    (7) assignment -> postfix_expression . assignment_operator assignment_expression
    (135) post_increment_expression -> postfix_expression . INC
    (136) post_decrement_expression -> postfix_expression . DEC
    (120) unary_expression_not_plus_minus -> postfix_expression .
    (8) assignment_operator -> . ASSIGN
    (9) assignment_operator -> . MUL_ASSIGN
    (10) assignment_operator -> . QUO_ASSIGN
    (11) assignment_operator -> . REM_ASSIGN
    (12) assignment_operator -> . ADD_ASSIGN
    (13) assignment_operator -> . SUB_ASSIGN
    (14) assignment_operator -> . SHL_ASSIGN
    (15) assignment_operator -> . SHR_ASSIGN
    (16) assignment_operator -> . SHR_UN_ASSIGN
    (17) assignment_operator -> . AND_ASSIGN
    (18) assignment_operator -> . OR_ASSIGN
    (19) assignment_operator -> . XOR_ASSIGN

    INC             shift and go to state 219
    DEC             shift and go to state 220
    MUL             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    QUO             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    REM             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    ADD             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SUB             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SHL             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SHR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SHR_UN          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    GTR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LSS             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    GEQ             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LEQ             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    INSTANCEOF      reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    EQL             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    NEQ             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    AND             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    XOR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    OR              reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LAND            reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    QUES            reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LOR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    $end            reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SEMICOLON       reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    COLON           reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    RPAREN          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    RBRACK          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    COMMA           reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    RBRACE          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    ASSIGN          shift and go to state 221
    MUL_ASSIGN      shift and go to state 222
    QUO_ASSIGN      shift and go to state 223
    REM_ASSIGN      shift and go to state 224
    ADD_ASSIGN      shift and go to state 225
    SUB_ASSIGN      shift and go to state 226
    SHL_ASSIGN      shift and go to state 227
    SHR_ASSIGN      shift and go to state 228
    SHR_UN_ASSIGN   shift and go to state 229
    AND_ASSIGN      shift and go to state 230
    OR_ASSIGN       shift and go to state 231
    XOR_ASSIGN      shift and go to state 232

    assignment_operator            shift and go to state 218

state 54

    (20) conditional_expression -> conditional_or_expression .
    (21) conditional_expression -> conditional_or_expression . QUES expression COLON conditional_expression
    (26) conditional_or_expression -> conditional_or_expression . LOR marker_next_quad conditional_and_expression

    $end            reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    SEMICOLON       reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    COLON           reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    RPAREN          reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    RBRACK          reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    COMMA           reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    RBRACE          reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    QUES            shift and go to state 233
    LOR             shift and go to state 234


state 55

    (128) postfix_expression -> primary .
    (329) class_instance_creation_expression -> primary . PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary . PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> primary . PERIOD IDENT
    (222) method_invocation -> primary . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary . PERIOD IDENT LPAREN argument_list_opt RPAREN

    INC             reduce using rule 128 (postfix_expression -> primary .)
    DEC             reduce using rule 128 (postfix_expression -> primary .)
    ASSIGN          reduce using rule 128 (postfix_expression -> primary .)
    MUL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    QUO_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    REM_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    ADD_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SUB_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_UN_ASSIGN   reduce using rule 128 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    MUL             reduce using rule 128 (postfix_expression -> primary .)
    QUO             reduce using rule 128 (postfix_expression -> primary .)
    REM             reduce using rule 128 (postfix_expression -> primary .)
    ADD             reduce using rule 128 (postfix_expression -> primary .)
    SUB             reduce using rule 128 (postfix_expression -> primary .)
    SHL             reduce using rule 128 (postfix_expression -> primary .)
    SHR             reduce using rule 128 (postfix_expression -> primary .)
    SHR_UN          reduce using rule 128 (postfix_expression -> primary .)
    GTR             reduce using rule 128 (postfix_expression -> primary .)
    LSS             reduce using rule 128 (postfix_expression -> primary .)
    GEQ             reduce using rule 128 (postfix_expression -> primary .)
    LEQ             reduce using rule 128 (postfix_expression -> primary .)
    INSTANCEOF      reduce using rule 128 (postfix_expression -> primary .)
    EQL             reduce using rule 128 (postfix_expression -> primary .)
    NEQ             reduce using rule 128 (postfix_expression -> primary .)
    AND             reduce using rule 128 (postfix_expression -> primary .)
    XOR             reduce using rule 128 (postfix_expression -> primary .)
    OR              reduce using rule 128 (postfix_expression -> primary .)
    LAND            reduce using rule 128 (postfix_expression -> primary .)
    QUES            reduce using rule 128 (postfix_expression -> primary .)
    LOR             reduce using rule 128 (postfix_expression -> primary .)
    $end            reduce using rule 128 (postfix_expression -> primary .)
    SEMICOLON       reduce using rule 128 (postfix_expression -> primary .)
    RPAREN          reduce using rule 128 (postfix_expression -> primary .)
    COLON           reduce using rule 128 (postfix_expression -> primary .)
    RBRACK          reduce using rule 128 (postfix_expression -> primary .)
    COMMA           reduce using rule 128 (postfix_expression -> primary .)
    RBRACE          reduce using rule 128 (postfix_expression -> primary .)
    PERIOD          shift and go to state 235


state 56

    (129) postfix_expression -> name .
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (352) qualified_name -> name . PERIOD simple_name
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> name . LBRACK expression RBRACK
    (333) class_instance_creation_expression_name -> name . PERIOD
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    MUL             reduce using rule 129 (postfix_expression -> name .)
    QUO             reduce using rule 129 (postfix_expression -> name .)
    REM             reduce using rule 129 (postfix_expression -> name .)
    ADD             reduce using rule 129 (postfix_expression -> name .)
    SUB             reduce using rule 129 (postfix_expression -> name .)
    SHL             reduce using rule 129 (postfix_expression -> name .)
    SHR             reduce using rule 129 (postfix_expression -> name .)
    SHR_UN          reduce using rule 129 (postfix_expression -> name .)
    GTR             reduce using rule 129 (postfix_expression -> name .)
    LSS             reduce using rule 129 (postfix_expression -> name .)
    GEQ             reduce using rule 129 (postfix_expression -> name .)
    LEQ             reduce using rule 129 (postfix_expression -> name .)
    INSTANCEOF      reduce using rule 129 (postfix_expression -> name .)
    EQL             reduce using rule 129 (postfix_expression -> name .)
    NEQ             reduce using rule 129 (postfix_expression -> name .)
    AND             reduce using rule 129 (postfix_expression -> name .)
    XOR             reduce using rule 129 (postfix_expression -> name .)
    OR              reduce using rule 129 (postfix_expression -> name .)
    LAND            reduce using rule 129 (postfix_expression -> name .)
    QUES            reduce using rule 129 (postfix_expression -> name .)
    LOR             reduce using rule 129 (postfix_expression -> name .)
    $end            reduce using rule 129 (postfix_expression -> name .)
    SEMICOLON       reduce using rule 129 (postfix_expression -> name .)
    RPAREN          reduce using rule 129 (postfix_expression -> name .)
    COLON           reduce using rule 129 (postfix_expression -> name .)
    RBRACK          reduce using rule 129 (postfix_expression -> name .)
    COMMA           reduce using rule 129 (postfix_expression -> name .)
    RBRACE          reduce using rule 129 (postfix_expression -> name .)
    PERIOD          shift and go to state 236
    LBRACK          shift and go to state 238

    dims                           shift and go to state 237
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 57

    (130) postfix_expression -> post_increment_expression .

    INC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    DEC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ASSIGN          reduce using rule 130 (postfix_expression -> post_increment_expression .)
    MUL_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    QUO_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    REM_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ADD_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SUB_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHL_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_UN_ASSIGN   reduce using rule 130 (postfix_expression -> post_increment_expression .)
    AND_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    OR_ASSIGN       reduce using rule 130 (postfix_expression -> post_increment_expression .)
    XOR_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    MUL             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    QUO             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    REM             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ADD             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SUB             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHL             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_UN          reduce using rule 130 (postfix_expression -> post_increment_expression .)
    GTR             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    LSS             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    GEQ             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    LEQ             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    INSTANCEOF      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    EQL             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    NEQ             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    AND             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    XOR             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    OR              reduce using rule 130 (postfix_expression -> post_increment_expression .)
    LAND            reduce using rule 130 (postfix_expression -> post_increment_expression .)
    QUES            reduce using rule 130 (postfix_expression -> post_increment_expression .)
    LOR             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    $end            reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SEMICOLON       reduce using rule 130 (postfix_expression -> post_increment_expression .)
    RPAREN          reduce using rule 130 (postfix_expression -> post_increment_expression .)
    COLON           reduce using rule 130 (postfix_expression -> post_increment_expression .)
    RBRACK          reduce using rule 130 (postfix_expression -> post_increment_expression .)
    COMMA           reduce using rule 130 (postfix_expression -> post_increment_expression .)
    RBRACE          reduce using rule 130 (postfix_expression -> post_increment_expression .)


state 58

    (131) postfix_expression -> post_decrement_expression .

    INC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    DEC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ASSIGN          reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    MUL_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    QUO_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    REM_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ADD_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SUB_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHL_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_UN_ASSIGN   reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    AND_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    OR_ASSIGN       reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    XOR_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    MUL             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    QUO             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    REM             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ADD             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SUB             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHL             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_UN          reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    GTR             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    LSS             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    GEQ             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    LEQ             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    INSTANCEOF      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    EQL             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    NEQ             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    AND             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    XOR             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    OR              reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    LAND            reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    QUES            reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    LOR             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    $end            reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SEMICOLON       reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    RPAREN          reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    COLON           reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    RBRACK          reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    COMMA           reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    RBRACE          reduce using rule 131 (postfix_expression -> post_decrement_expression .)


state 59

    (25) conditional_or_expression -> conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . LAND marker_next_quad inclusive_or_expression

    QUES            reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    LOR             reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    $end            reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    SEMICOLON       reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    COLON           reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RPAREN          reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RBRACK          reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    COMMA           reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    RBRACE          reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    LAND            shift and go to state 241


state 60

    (137) primary -> primary_no_new_array .
    (339) array_access -> primary_no_new_array . LBRACK expression RBRACK

    PERIOD          reduce using rule 137 (primary -> primary_no_new_array .)
    INC             reduce using rule 137 (primary -> primary_no_new_array .)
    DEC             reduce using rule 137 (primary -> primary_no_new_array .)
    ASSIGN          reduce using rule 137 (primary -> primary_no_new_array .)
    MUL_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    QUO_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    REM_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    ADD_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    SUB_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    SHL_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    SHR_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    SHR_UN_ASSIGN   reduce using rule 137 (primary -> primary_no_new_array .)
    AND_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    OR_ASSIGN       reduce using rule 137 (primary -> primary_no_new_array .)
    XOR_ASSIGN      reduce using rule 137 (primary -> primary_no_new_array .)
    MUL             reduce using rule 137 (primary -> primary_no_new_array .)
    QUO             reduce using rule 137 (primary -> primary_no_new_array .)
    REM             reduce using rule 137 (primary -> primary_no_new_array .)
    ADD             reduce using rule 137 (primary -> primary_no_new_array .)
    SUB             reduce using rule 137 (primary -> primary_no_new_array .)
    SHL             reduce using rule 137 (primary -> primary_no_new_array .)
    SHR             reduce using rule 137 (primary -> primary_no_new_array .)
    SHR_UN          reduce using rule 137 (primary -> primary_no_new_array .)
    GTR             reduce using rule 137 (primary -> primary_no_new_array .)
    LSS             reduce using rule 137 (primary -> primary_no_new_array .)
    GEQ             reduce using rule 137 (primary -> primary_no_new_array .)
    LEQ             reduce using rule 137 (primary -> primary_no_new_array .)
    INSTANCEOF      reduce using rule 137 (primary -> primary_no_new_array .)
    EQL             reduce using rule 137 (primary -> primary_no_new_array .)
    NEQ             reduce using rule 137 (primary -> primary_no_new_array .)
    AND             reduce using rule 137 (primary -> primary_no_new_array .)
    XOR             reduce using rule 137 (primary -> primary_no_new_array .)
    OR              reduce using rule 137 (primary -> primary_no_new_array .)
    LAND            reduce using rule 137 (primary -> primary_no_new_array .)
    QUES            reduce using rule 137 (primary -> primary_no_new_array .)
    LOR             reduce using rule 137 (primary -> primary_no_new_array .)
    $end            reduce using rule 137 (primary -> primary_no_new_array .)
    SEMICOLON       reduce using rule 137 (primary -> primary_no_new_array .)
    RPAREN          reduce using rule 137 (primary -> primary_no_new_array .)
    COLON           reduce using rule 137 (primary -> primary_no_new_array .)
    RBRACK          reduce using rule 137 (primary -> primary_no_new_array .)
    COMMA           reduce using rule 137 (primary -> primary_no_new_array .)
    RBRACE          reduce using rule 137 (primary -> primary_no_new_array .)
    LBRACK          shift and go to state 242


state 61

    (138) primary -> array_creation_with_array_initializer .
    (340) array_access -> array_creation_with_array_initializer . LBRACK expression RBRACK

    PERIOD          reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    INC             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    DEC             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    ASSIGN          reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    MUL_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    QUO_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    REM_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    ADD_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SUB_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SHL_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SHR_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SHR_UN_ASSIGN   reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    AND_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    OR_ASSIGN       reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    XOR_ASSIGN      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    MUL             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    QUO             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    REM             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    ADD             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SUB             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SHL             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SHR             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SHR_UN          reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    GTR             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    LSS             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    GEQ             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    LEQ             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    INSTANCEOF      reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    EQL             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    NEQ             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    AND             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    XOR             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    OR              reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    LAND            reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    QUES            reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    LOR             reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    $end            reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    SEMICOLON       reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    RPAREN          reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    COLON           reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    RBRACK          reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    COMMA           reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    RBRACE          reduce using rule 138 (primary -> array_creation_with_array_initializer .)
    LBRACK          shift and go to state 243


state 62

    (139) primary -> array_creation_without_array_initializer .

    PERIOD          reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    INC             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    DEC             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    ASSIGN          reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    MUL_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    QUO_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    REM_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    ADD_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SUB_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SHL_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SHR_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SHR_UN_ASSIGN   reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    AND_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    OR_ASSIGN       reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    XOR_ASSIGN      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    MUL             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    QUO             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    REM             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    ADD             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SUB             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SHL             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SHR             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SHR_UN          reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    GTR             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    LSS             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    GEQ             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    LEQ             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    INSTANCEOF      reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    EQL             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    NEQ             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    AND             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    XOR             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    OR              reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    LAND            reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    QUES            reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    LOR             reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    $end            reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    SEMICOLON       reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    RPAREN          reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    COLON           reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    RBRACK          reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    COMMA           reduce using rule 139 (primary -> array_creation_without_array_initializer .)
    RBRACE          reduce using rule 139 (primary -> array_creation_without_array_initializer .)


state 63

    (349) name -> simple_name .

    PERIOD          reduce using rule 349 (name -> simple_name .)
    LBRACK          reduce using rule 349 (name -> simple_name .)
    INC             reduce using rule 349 (name -> simple_name .)
    DEC             reduce using rule 349 (name -> simple_name .)
    ASSIGN          reduce using rule 349 (name -> simple_name .)
    MUL_ASSIGN      reduce using rule 349 (name -> simple_name .)
    QUO_ASSIGN      reduce using rule 349 (name -> simple_name .)
    REM_ASSIGN      reduce using rule 349 (name -> simple_name .)
    ADD_ASSIGN      reduce using rule 349 (name -> simple_name .)
    SUB_ASSIGN      reduce using rule 349 (name -> simple_name .)
    SHL_ASSIGN      reduce using rule 349 (name -> simple_name .)
    SHR_ASSIGN      reduce using rule 349 (name -> simple_name .)
    SHR_UN_ASSIGN   reduce using rule 349 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 349 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 349 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 349 (name -> simple_name .)
    MUL             reduce using rule 349 (name -> simple_name .)
    QUO             reduce using rule 349 (name -> simple_name .)
    REM             reduce using rule 349 (name -> simple_name .)
    ADD             reduce using rule 349 (name -> simple_name .)
    SUB             reduce using rule 349 (name -> simple_name .)
    SHL             reduce using rule 349 (name -> simple_name .)
    SHR             reduce using rule 349 (name -> simple_name .)
    SHR_UN          reduce using rule 349 (name -> simple_name .)
    GTR             reduce using rule 349 (name -> simple_name .)
    LSS             reduce using rule 349 (name -> simple_name .)
    GEQ             reduce using rule 349 (name -> simple_name .)
    LEQ             reduce using rule 349 (name -> simple_name .)
    INSTANCEOF      reduce using rule 349 (name -> simple_name .)
    EQL             reduce using rule 349 (name -> simple_name .)
    NEQ             reduce using rule 349 (name -> simple_name .)
    AND             reduce using rule 349 (name -> simple_name .)
    XOR             reduce using rule 349 (name -> simple_name .)
    OR              reduce using rule 349 (name -> simple_name .)
    LAND            reduce using rule 349 (name -> simple_name .)
    QUES            reduce using rule 349 (name -> simple_name .)
    LOR             reduce using rule 349 (name -> simple_name .)
    $end            reduce using rule 349 (name -> simple_name .)
    IDENT           reduce using rule 349 (name -> simple_name .)
    SEMICOLON       reduce using rule 349 (name -> simple_name .)
    LPAREN          reduce using rule 349 (name -> simple_name .)
    PACKAGE         reduce using rule 349 (name -> simple_name .)
    PUBLIC          reduce using rule 349 (name -> simple_name .)
    PROTECTED       reduce using rule 349 (name -> simple_name .)
    PRIVATE         reduce using rule 349 (name -> simple_name .)
    STATIC          reduce using rule 349 (name -> simple_name .)
    ABSTRACT        reduce using rule 349 (name -> simple_name .)
    FINAL           reduce using rule 349 (name -> simple_name .)
    NATIVE          reduce using rule 349 (name -> simple_name .)
    SYNCHRONIZED    reduce using rule 349 (name -> simple_name .)
    TRANSIENT       reduce using rule 349 (name -> simple_name .)
    VOLATILE        reduce using rule 349 (name -> simple_name .)
    STRICTFP        reduce using rule 349 (name -> simple_name .)
    ATRATE          reduce using rule 349 (name -> simple_name .)
    CLASS           reduce using rule 349 (name -> simple_name .)
    INTERFACE       reduce using rule 349 (name -> simple_name .)
    BOOLEAN         reduce using rule 349 (name -> simple_name .)
    VOID            reduce using rule 349 (name -> simple_name .)
    BYTE            reduce using rule 349 (name -> simple_name .)
    SHORT           reduce using rule 349 (name -> simple_name .)
    INT             reduce using rule 349 (name -> simple_name .)
    LONG            reduce using rule 349 (name -> simple_name .)
    CHAR            reduce using rule 349 (name -> simple_name .)
    FLOAT           reduce using rule 349 (name -> simple_name .)
    DOUBLE          reduce using rule 349 (name -> simple_name .)
    RPAREN          reduce using rule 349 (name -> simple_name .)
    COMMA           reduce using rule 349 (name -> simple_name .)
    RBRACE          reduce using rule 349 (name -> simple_name .)
    COLON           reduce using rule 349 (name -> simple_name .)
    RBRACK          reduce using rule 349 (name -> simple_name .)
    LBRACE          reduce using rule 349 (name -> simple_name .)
    ELLIPSIS        reduce using rule 349 (name -> simple_name .)


state 64

    (350) name -> qualified_name .

    PERIOD          reduce using rule 350 (name -> qualified_name .)
    LBRACK          reduce using rule 350 (name -> qualified_name .)
    INC             reduce using rule 350 (name -> qualified_name .)
    DEC             reduce using rule 350 (name -> qualified_name .)
    ASSIGN          reduce using rule 350 (name -> qualified_name .)
    MUL_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    QUO_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    REM_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    ADD_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    SUB_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    SHL_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    SHR_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    SHR_UN_ASSIGN   reduce using rule 350 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 350 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 350 (name -> qualified_name .)
    MUL             reduce using rule 350 (name -> qualified_name .)
    QUO             reduce using rule 350 (name -> qualified_name .)
    REM             reduce using rule 350 (name -> qualified_name .)
    ADD             reduce using rule 350 (name -> qualified_name .)
    SUB             reduce using rule 350 (name -> qualified_name .)
    SHL             reduce using rule 350 (name -> qualified_name .)
    SHR             reduce using rule 350 (name -> qualified_name .)
    SHR_UN          reduce using rule 350 (name -> qualified_name .)
    GTR             reduce using rule 350 (name -> qualified_name .)
    LSS             reduce using rule 350 (name -> qualified_name .)
    GEQ             reduce using rule 350 (name -> qualified_name .)
    LEQ             reduce using rule 350 (name -> qualified_name .)
    INSTANCEOF      reduce using rule 350 (name -> qualified_name .)
    EQL             reduce using rule 350 (name -> qualified_name .)
    NEQ             reduce using rule 350 (name -> qualified_name .)
    AND             reduce using rule 350 (name -> qualified_name .)
    XOR             reduce using rule 350 (name -> qualified_name .)
    OR              reduce using rule 350 (name -> qualified_name .)
    LAND            reduce using rule 350 (name -> qualified_name .)
    QUES            reduce using rule 350 (name -> qualified_name .)
    LOR             reduce using rule 350 (name -> qualified_name .)
    $end            reduce using rule 350 (name -> qualified_name .)
    IDENT           reduce using rule 350 (name -> qualified_name .)
    SEMICOLON       reduce using rule 350 (name -> qualified_name .)
    LPAREN          reduce using rule 350 (name -> qualified_name .)
    PACKAGE         reduce using rule 350 (name -> qualified_name .)
    PUBLIC          reduce using rule 350 (name -> qualified_name .)
    PROTECTED       reduce using rule 350 (name -> qualified_name .)
    PRIVATE         reduce using rule 350 (name -> qualified_name .)
    STATIC          reduce using rule 350 (name -> qualified_name .)
    ABSTRACT        reduce using rule 350 (name -> qualified_name .)
    FINAL           reduce using rule 350 (name -> qualified_name .)
    NATIVE          reduce using rule 350 (name -> qualified_name .)
    SYNCHRONIZED    reduce using rule 350 (name -> qualified_name .)
    TRANSIENT       reduce using rule 350 (name -> qualified_name .)
    VOLATILE        reduce using rule 350 (name -> qualified_name .)
    STRICTFP        reduce using rule 350 (name -> qualified_name .)
    ATRATE          reduce using rule 350 (name -> qualified_name .)
    CLASS           reduce using rule 350 (name -> qualified_name .)
    INTERFACE       reduce using rule 350 (name -> qualified_name .)
    BOOLEAN         reduce using rule 350 (name -> qualified_name .)
    VOID            reduce using rule 350 (name -> qualified_name .)
    BYTE            reduce using rule 350 (name -> qualified_name .)
    SHORT           reduce using rule 350 (name -> qualified_name .)
    INT             reduce using rule 350 (name -> qualified_name .)
    LONG            reduce using rule 350 (name -> qualified_name .)
    CHAR            reduce using rule 350 (name -> qualified_name .)
    FLOAT           reduce using rule 350 (name -> qualified_name .)
    DOUBLE          reduce using rule 350 (name -> qualified_name .)
    RPAREN          reduce using rule 350 (name -> qualified_name .)
    COMMA           reduce using rule 350 (name -> qualified_name .)
    RBRACE          reduce using rule 350 (name -> qualified_name .)
    COLON           reduce using rule 350 (name -> qualified_name .)
    RBRACK          reduce using rule 350 (name -> qualified_name .)
    LBRACE          reduce using rule 350 (name -> qualified_name .)
    ELLIPSIS        reduce using rule 350 (name -> qualified_name .)


state 65

    (118) pre_increment_expression -> INC . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 244
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 66

    (30) conditional_and_expression -> inclusive_or_expression .
    (37) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    QUES            reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    $end            reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    RBRACK          reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 245


state 67

    (140) primary_no_new_array -> literal .

    LBRACK          reduce using rule 140 (primary_no_new_array -> literal .)
    PERIOD          reduce using rule 140 (primary_no_new_array -> literal .)
    INC             reduce using rule 140 (primary_no_new_array -> literal .)
    DEC             reduce using rule 140 (primary_no_new_array -> literal .)
    ASSIGN          reduce using rule 140 (primary_no_new_array -> literal .)
    MUL_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    QUO_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    REM_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    ADD_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    SUB_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    SHL_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    SHR_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    SHR_UN_ASSIGN   reduce using rule 140 (primary_no_new_array -> literal .)
    AND_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    OR_ASSIGN       reduce using rule 140 (primary_no_new_array -> literal .)
    XOR_ASSIGN      reduce using rule 140 (primary_no_new_array -> literal .)
    MUL             reduce using rule 140 (primary_no_new_array -> literal .)
    QUO             reduce using rule 140 (primary_no_new_array -> literal .)
    REM             reduce using rule 140 (primary_no_new_array -> literal .)
    ADD             reduce using rule 140 (primary_no_new_array -> literal .)
    SUB             reduce using rule 140 (primary_no_new_array -> literal .)
    SHL             reduce using rule 140 (primary_no_new_array -> literal .)
    SHR             reduce using rule 140 (primary_no_new_array -> literal .)
    SHR_UN          reduce using rule 140 (primary_no_new_array -> literal .)
    GTR             reduce using rule 140 (primary_no_new_array -> literal .)
    LSS             reduce using rule 140 (primary_no_new_array -> literal .)
    GEQ             reduce using rule 140 (primary_no_new_array -> literal .)
    LEQ             reduce using rule 140 (primary_no_new_array -> literal .)
    INSTANCEOF      reduce using rule 140 (primary_no_new_array -> literal .)
    EQL             reduce using rule 140 (primary_no_new_array -> literal .)
    NEQ             reduce using rule 140 (primary_no_new_array -> literal .)
    AND             reduce using rule 140 (primary_no_new_array -> literal .)
    XOR             reduce using rule 140 (primary_no_new_array -> literal .)
    OR              reduce using rule 140 (primary_no_new_array -> literal .)
    LAND            reduce using rule 140 (primary_no_new_array -> literal .)
    QUES            reduce using rule 140 (primary_no_new_array -> literal .)
    LOR             reduce using rule 140 (primary_no_new_array -> literal .)
    $end            reduce using rule 140 (primary_no_new_array -> literal .)
    SEMICOLON       reduce using rule 140 (primary_no_new_array -> literal .)
    RPAREN          reduce using rule 140 (primary_no_new_array -> literal .)
    COLON           reduce using rule 140 (primary_no_new_array -> literal .)
    RBRACK          reduce using rule 140 (primary_no_new_array -> literal .)
    COMMA           reduce using rule 140 (primary_no_new_array -> literal .)
    RBRACE          reduce using rule 140 (primary_no_new_array -> literal .)


state 68

    (141) primary_no_new_array -> THIS .

    LBRACK          reduce using rule 141 (primary_no_new_array -> THIS .)
    PERIOD          reduce using rule 141 (primary_no_new_array -> THIS .)
    INC             reduce using rule 141 (primary_no_new_array -> THIS .)
    DEC             reduce using rule 141 (primary_no_new_array -> THIS .)
    ASSIGN          reduce using rule 141 (primary_no_new_array -> THIS .)
    MUL_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    QUO_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    REM_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    ADD_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SUB_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SHL_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SHR_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SHR_UN_ASSIGN   reduce using rule 141 (primary_no_new_array -> THIS .)
    AND_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    OR_ASSIGN       reduce using rule 141 (primary_no_new_array -> THIS .)
    XOR_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    MUL             reduce using rule 141 (primary_no_new_array -> THIS .)
    QUO             reduce using rule 141 (primary_no_new_array -> THIS .)
    REM             reduce using rule 141 (primary_no_new_array -> THIS .)
    ADD             reduce using rule 141 (primary_no_new_array -> THIS .)
    SUB             reduce using rule 141 (primary_no_new_array -> THIS .)
    SHL             reduce using rule 141 (primary_no_new_array -> THIS .)
    SHR             reduce using rule 141 (primary_no_new_array -> THIS .)
    SHR_UN          reduce using rule 141 (primary_no_new_array -> THIS .)
    GTR             reduce using rule 141 (primary_no_new_array -> THIS .)
    LSS             reduce using rule 141 (primary_no_new_array -> THIS .)
    GEQ             reduce using rule 141 (primary_no_new_array -> THIS .)
    LEQ             reduce using rule 141 (primary_no_new_array -> THIS .)
    INSTANCEOF      reduce using rule 141 (primary_no_new_array -> THIS .)
    EQL             reduce using rule 141 (primary_no_new_array -> THIS .)
    NEQ             reduce using rule 141 (primary_no_new_array -> THIS .)
    AND             reduce using rule 141 (primary_no_new_array -> THIS .)
    XOR             reduce using rule 141 (primary_no_new_array -> THIS .)
    OR              reduce using rule 141 (primary_no_new_array -> THIS .)
    LAND            reduce using rule 141 (primary_no_new_array -> THIS .)
    QUES            reduce using rule 141 (primary_no_new_array -> THIS .)
    LOR             reduce using rule 141 (primary_no_new_array -> THIS .)
    $end            reduce using rule 141 (primary_no_new_array -> THIS .)
    SEMICOLON       reduce using rule 141 (primary_no_new_array -> THIS .)
    RPAREN          reduce using rule 141 (primary_no_new_array -> THIS .)
    COLON           reduce using rule 141 (primary_no_new_array -> THIS .)
    RBRACK          reduce using rule 141 (primary_no_new_array -> THIS .)
    COMMA           reduce using rule 141 (primary_no_new_array -> THIS .)
    RBRACE          reduce using rule 141 (primary_no_new_array -> THIS .)


state 69

    (142) primary_no_new_array -> class_instance_creation_expression .

    LBRACK          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    PERIOD          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    INC             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    DEC             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    ASSIGN          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    MUL_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    QUO_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    REM_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    ADD_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SUB_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHL_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHR_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHR_UN_ASSIGN   reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    AND_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    OR_ASSIGN       reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    XOR_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    MUL             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    QUO             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    REM             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    ADD             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SUB             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHL             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHR             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHR_UN          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    GTR             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    LSS             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    GEQ             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    LEQ             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    INSTANCEOF      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    EQL             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    NEQ             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    AND             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    XOR             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    OR              reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    LAND            reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    QUES            reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    LOR             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    $end            reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SEMICOLON       reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    RPAREN          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    COLON           reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    RBRACK          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    COMMA           reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    RBRACE          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)


state 70

    (143) primary_no_new_array -> field_access .

    LBRACK          reduce using rule 143 (primary_no_new_array -> field_access .)
    PERIOD          reduce using rule 143 (primary_no_new_array -> field_access .)
    INC             reduce using rule 143 (primary_no_new_array -> field_access .)
    DEC             reduce using rule 143 (primary_no_new_array -> field_access .)
    ASSIGN          reduce using rule 143 (primary_no_new_array -> field_access .)
    MUL_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    QUO_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    REM_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    ADD_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    SUB_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    SHL_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    SHR_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    SHR_UN_ASSIGN   reduce using rule 143 (primary_no_new_array -> field_access .)
    AND_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    OR_ASSIGN       reduce using rule 143 (primary_no_new_array -> field_access .)
    XOR_ASSIGN      reduce using rule 143 (primary_no_new_array -> field_access .)
    MUL             reduce using rule 143 (primary_no_new_array -> field_access .)
    QUO             reduce using rule 143 (primary_no_new_array -> field_access .)
    REM             reduce using rule 143 (primary_no_new_array -> field_access .)
    ADD             reduce using rule 143 (primary_no_new_array -> field_access .)
    SUB             reduce using rule 143 (primary_no_new_array -> field_access .)
    SHL             reduce using rule 143 (primary_no_new_array -> field_access .)
    SHR             reduce using rule 143 (primary_no_new_array -> field_access .)
    SHR_UN          reduce using rule 143 (primary_no_new_array -> field_access .)
    GTR             reduce using rule 143 (primary_no_new_array -> field_access .)
    LSS             reduce using rule 143 (primary_no_new_array -> field_access .)
    GEQ             reduce using rule 143 (primary_no_new_array -> field_access .)
    LEQ             reduce using rule 143 (primary_no_new_array -> field_access .)
    INSTANCEOF      reduce using rule 143 (primary_no_new_array -> field_access .)
    EQL             reduce using rule 143 (primary_no_new_array -> field_access .)
    NEQ             reduce using rule 143 (primary_no_new_array -> field_access .)
    AND             reduce using rule 143 (primary_no_new_array -> field_access .)
    XOR             reduce using rule 143 (primary_no_new_array -> field_access .)
    OR              reduce using rule 143 (primary_no_new_array -> field_access .)
    LAND            reduce using rule 143 (primary_no_new_array -> field_access .)
    QUES            reduce using rule 143 (primary_no_new_array -> field_access .)
    LOR             reduce using rule 143 (primary_no_new_array -> field_access .)
    $end            reduce using rule 143 (primary_no_new_array -> field_access .)
    SEMICOLON       reduce using rule 143 (primary_no_new_array -> field_access .)
    RPAREN          reduce using rule 143 (primary_no_new_array -> field_access .)
    COLON           reduce using rule 143 (primary_no_new_array -> field_access .)
    RBRACK          reduce using rule 143 (primary_no_new_array -> field_access .)
    COMMA           reduce using rule 143 (primary_no_new_array -> field_access .)
    RBRACE          reduce using rule 143 (primary_no_new_array -> field_access .)


state 71

    (144) primary_no_new_array -> method_invocation .

    LBRACK          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    PERIOD          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    INC             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    DEC             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    ASSIGN          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    MUL_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    QUO_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    REM_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    ADD_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SUB_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHL_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHR_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHR_UN_ASSIGN   reduce using rule 144 (primary_no_new_array -> method_invocation .)
    AND_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    OR_ASSIGN       reduce using rule 144 (primary_no_new_array -> method_invocation .)
    XOR_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    MUL             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    QUO             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    REM             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    ADD             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SUB             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHL             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHR             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHR_UN          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    GTR             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    LSS             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    GEQ             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    LEQ             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    INSTANCEOF      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    EQL             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    NEQ             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    AND             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    XOR             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    OR              reduce using rule 144 (primary_no_new_array -> method_invocation .)
    LAND            reduce using rule 144 (primary_no_new_array -> method_invocation .)
    QUES            reduce using rule 144 (primary_no_new_array -> method_invocation .)
    LOR             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    $end            reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SEMICOLON       reduce using rule 144 (primary_no_new_array -> method_invocation .)
    RPAREN          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    COLON           reduce using rule 144 (primary_no_new_array -> method_invocation .)
    RBRACK          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    COMMA           reduce using rule 144 (primary_no_new_array -> method_invocation .)
    RBRACE          reduce using rule 144 (primary_no_new_array -> method_invocation .)


state 72

    (145) primary_no_new_array -> array_access .

    LBRACK          reduce using rule 145 (primary_no_new_array -> array_access .)
    PERIOD          reduce using rule 145 (primary_no_new_array -> array_access .)
    INC             reduce using rule 145 (primary_no_new_array -> array_access .)
    DEC             reduce using rule 145 (primary_no_new_array -> array_access .)
    ASSIGN          reduce using rule 145 (primary_no_new_array -> array_access .)
    MUL_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    QUO_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    REM_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    ADD_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    SUB_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    SHL_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    SHR_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    SHR_UN_ASSIGN   reduce using rule 145 (primary_no_new_array -> array_access .)
    AND_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    OR_ASSIGN       reduce using rule 145 (primary_no_new_array -> array_access .)
    XOR_ASSIGN      reduce using rule 145 (primary_no_new_array -> array_access .)
    MUL             reduce using rule 145 (primary_no_new_array -> array_access .)
    QUO             reduce using rule 145 (primary_no_new_array -> array_access .)
    REM             reduce using rule 145 (primary_no_new_array -> array_access .)
    ADD             reduce using rule 145 (primary_no_new_array -> array_access .)
    SUB             reduce using rule 145 (primary_no_new_array -> array_access .)
    SHL             reduce using rule 145 (primary_no_new_array -> array_access .)
    SHR             reduce using rule 145 (primary_no_new_array -> array_access .)
    SHR_UN          reduce using rule 145 (primary_no_new_array -> array_access .)
    GTR             reduce using rule 145 (primary_no_new_array -> array_access .)
    LSS             reduce using rule 145 (primary_no_new_array -> array_access .)
    GEQ             reduce using rule 145 (primary_no_new_array -> array_access .)
    LEQ             reduce using rule 145 (primary_no_new_array -> array_access .)
    INSTANCEOF      reduce using rule 145 (primary_no_new_array -> array_access .)
    EQL             reduce using rule 145 (primary_no_new_array -> array_access .)
    NEQ             reduce using rule 145 (primary_no_new_array -> array_access .)
    AND             reduce using rule 145 (primary_no_new_array -> array_access .)
    XOR             reduce using rule 145 (primary_no_new_array -> array_access .)
    OR              reduce using rule 145 (primary_no_new_array -> array_access .)
    LAND            reduce using rule 145 (primary_no_new_array -> array_access .)
    QUES            reduce using rule 145 (primary_no_new_array -> array_access .)
    LOR             reduce using rule 145 (primary_no_new_array -> array_access .)
    $end            reduce using rule 145 (primary_no_new_array -> array_access .)
    SEMICOLON       reduce using rule 145 (primary_no_new_array -> array_access .)
    RPAREN          reduce using rule 145 (primary_no_new_array -> array_access .)
    COLON           reduce using rule 145 (primary_no_new_array -> array_access .)
    RBRACK          reduce using rule 145 (primary_no_new_array -> array_access .)
    COMMA           reduce using rule 145 (primary_no_new_array -> array_access .)
    RBRACE          reduce using rule 145 (primary_no_new_array -> array_access .)


state 73

    (146) primary_no_new_array -> LPAREN . name RPAREN
    (147) primary_no_new_array -> LPAREN . expression_not_name RPAREN
    (160) cast_expression -> LPAREN . primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> LPAREN . name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> LPAREN . name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> LPAREN . name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> LPAREN . name dims RPAREN unary_expression_not_plus_minus
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (2) expression_not_name -> . assignment_expression_not_name
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (5) assignment_expression_not_name -> . assignment
    (6) assignment_expression_not_name -> . conditional_expression_not_name
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 77
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274

    name                           shift and go to state 246
    expression_not_name            shift and go to state 247
    primitive_type                 shift and go to state 248
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    assignment_expression_not_name shift and go to state 249
    assignment                     shift and go to state 250
    conditional_expression_not_name shift and go to state 251
    postfix_expression             shift and go to state 183
    conditional_or_expression_not_name shift and go to state 252
    primary                        shift and go to state 253
    post_increment_expression      shift and go to state 254
    post_decrement_expression      shift and go to state 255
    conditional_and_expression_not_name shift and go to state 256
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    inclusive_or_expression_not_name shift and go to state 257
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    exclusive_or_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 89
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275

state 74

    (337) field_access -> SUPER . PERIOD IDENT
    (223) method_invocation -> SUPER . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> SUPER . PERIOD IDENT LPAREN argument_list_opt RPAREN

    PERIOD          shift and go to state 276


state 75

    (152) primary_no_new_array -> primitive_type . dims PERIOD CLASS
    (153) primary_no_new_array -> primitive_type . PERIOD CLASS
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 278
    LBRACK          shift and go to state 279

    dims                           shift and go to state 277
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 76

    (341) array_creation_with_array_initializer -> NEW . primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> NEW . primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs
    (327) class_instance_creation_expression -> NEW . type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> NEW . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (403) type_arguments -> . LSS type_argument_list1
    (394) class_type -> . class_or_interface_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    LSS             shift and go to state 185
    IDENT           shift and go to state 196

    primitive_type                 shift and go to state 280
    class_or_interface_type        shift and go to state 281
    type_arguments                 shift and go to state 282
    class_type                     shift and go to state 283
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 77

    (351) simple_name -> IDENT .
    (220) method_invocation -> IDENT . LPAREN argument_list_opt RPAREN

    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    INC             reduce using rule 351 (simple_name -> IDENT .)
    DEC             reduce using rule 351 (simple_name -> IDENT .)
    ASSIGN          reduce using rule 351 (simple_name -> IDENT .)
    MUL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    QUO_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    REM_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    ADD_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SUB_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN_ASSIGN   reduce using rule 351 (simple_name -> IDENT .)
    AND_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    OR_ASSIGN       reduce using rule 351 (simple_name -> IDENT .)
    XOR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    MUL             reduce using rule 351 (simple_name -> IDENT .)
    QUO             reduce using rule 351 (simple_name -> IDENT .)
    REM             reduce using rule 351 (simple_name -> IDENT .)
    ADD             reduce using rule 351 (simple_name -> IDENT .)
    SUB             reduce using rule 351 (simple_name -> IDENT .)
    SHL             reduce using rule 351 (simple_name -> IDENT .)
    SHR             reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN          reduce using rule 351 (simple_name -> IDENT .)
    GTR             reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    GEQ             reduce using rule 351 (simple_name -> IDENT .)
    LEQ             reduce using rule 351 (simple_name -> IDENT .)
    INSTANCEOF      reduce using rule 351 (simple_name -> IDENT .)
    EQL             reduce using rule 351 (simple_name -> IDENT .)
    NEQ             reduce using rule 351 (simple_name -> IDENT .)
    AND             reduce using rule 351 (simple_name -> IDENT .)
    XOR             reduce using rule 351 (simple_name -> IDENT .)
    OR              reduce using rule 351 (simple_name -> IDENT .)
    LAND            reduce using rule 351 (simple_name -> IDENT .)
    QUES            reduce using rule 351 (simple_name -> IDENT .)
    LOR             reduce using rule 351 (simple_name -> IDENT .)
    $end            reduce using rule 351 (simple_name -> IDENT .)
    SEMICOLON       reduce using rule 351 (simple_name -> IDENT .)
    RPAREN          reduce using rule 351 (simple_name -> IDENT .)
    COLON           reduce using rule 351 (simple_name -> IDENT .)
    RBRACK          reduce using rule 351 (simple_name -> IDENT .)
    COMMA           reduce using rule 351 (simple_name -> IDENT .)
    RBRACE          reduce using rule 351 (simple_name -> IDENT .)
    LPAREN          shift and go to state 286


state 78

    (36) inclusive_or_expression -> exclusive_or_expression .
    (42) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    QUES            reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    $end            reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACK          reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 36 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 287


state 79

    (353) literal -> HEX_LIT .

    LBRACK          reduce using rule 353 (literal -> HEX_LIT .)
    PERIOD          reduce using rule 353 (literal -> HEX_LIT .)
    INC             reduce using rule 353 (literal -> HEX_LIT .)
    DEC             reduce using rule 353 (literal -> HEX_LIT .)
    ASSIGN          reduce using rule 353 (literal -> HEX_LIT .)
    MUL_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    QUO_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    REM_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    ADD_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    SUB_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    SHL_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    SHR_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    SHR_UN_ASSIGN   reduce using rule 353 (literal -> HEX_LIT .)
    AND_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    OR_ASSIGN       reduce using rule 353 (literal -> HEX_LIT .)
    XOR_ASSIGN      reduce using rule 353 (literal -> HEX_LIT .)
    MUL             reduce using rule 353 (literal -> HEX_LIT .)
    QUO             reduce using rule 353 (literal -> HEX_LIT .)
    REM             reduce using rule 353 (literal -> HEX_LIT .)
    ADD             reduce using rule 353 (literal -> HEX_LIT .)
    SUB             reduce using rule 353 (literal -> HEX_LIT .)
    SHL             reduce using rule 353 (literal -> HEX_LIT .)
    SHR             reduce using rule 353 (literal -> HEX_LIT .)
    SHR_UN          reduce using rule 353 (literal -> HEX_LIT .)
    GTR             reduce using rule 353 (literal -> HEX_LIT .)
    LSS             reduce using rule 353 (literal -> HEX_LIT .)
    GEQ             reduce using rule 353 (literal -> HEX_LIT .)
    LEQ             reduce using rule 353 (literal -> HEX_LIT .)
    INSTANCEOF      reduce using rule 353 (literal -> HEX_LIT .)
    EQL             reduce using rule 353 (literal -> HEX_LIT .)
    NEQ             reduce using rule 353 (literal -> HEX_LIT .)
    AND             reduce using rule 353 (literal -> HEX_LIT .)
    XOR             reduce using rule 353 (literal -> HEX_LIT .)
    OR              reduce using rule 353 (literal -> HEX_LIT .)
    LAND            reduce using rule 353 (literal -> HEX_LIT .)
    QUES            reduce using rule 353 (literal -> HEX_LIT .)
    LOR             reduce using rule 353 (literal -> HEX_LIT .)
    $end            reduce using rule 353 (literal -> HEX_LIT .)
    SEMICOLON       reduce using rule 353 (literal -> HEX_LIT .)
    RPAREN          reduce using rule 353 (literal -> HEX_LIT .)
    COLON           reduce using rule 353 (literal -> HEX_LIT .)
    RBRACK          reduce using rule 353 (literal -> HEX_LIT .)
    COMMA           reduce using rule 353 (literal -> HEX_LIT .)
    RBRACE          reduce using rule 353 (literal -> HEX_LIT .)


state 80

    (354) literal -> OCTAL_LIT .

    LBRACK          reduce using rule 354 (literal -> OCTAL_LIT .)
    PERIOD          reduce using rule 354 (literal -> OCTAL_LIT .)
    INC             reduce using rule 354 (literal -> OCTAL_LIT .)
    DEC             reduce using rule 354 (literal -> OCTAL_LIT .)
    ASSIGN          reduce using rule 354 (literal -> OCTAL_LIT .)
    MUL_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    QUO_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    REM_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    ADD_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    SUB_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    SHL_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    SHR_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    SHR_UN_ASSIGN   reduce using rule 354 (literal -> OCTAL_LIT .)
    AND_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    OR_ASSIGN       reduce using rule 354 (literal -> OCTAL_LIT .)
    XOR_ASSIGN      reduce using rule 354 (literal -> OCTAL_LIT .)
    MUL             reduce using rule 354 (literal -> OCTAL_LIT .)
    QUO             reduce using rule 354 (literal -> OCTAL_LIT .)
    REM             reduce using rule 354 (literal -> OCTAL_LIT .)
    ADD             reduce using rule 354 (literal -> OCTAL_LIT .)
    SUB             reduce using rule 354 (literal -> OCTAL_LIT .)
    SHL             reduce using rule 354 (literal -> OCTAL_LIT .)
    SHR             reduce using rule 354 (literal -> OCTAL_LIT .)
    SHR_UN          reduce using rule 354 (literal -> OCTAL_LIT .)
    GTR             reduce using rule 354 (literal -> OCTAL_LIT .)
    LSS             reduce using rule 354 (literal -> OCTAL_LIT .)
    GEQ             reduce using rule 354 (literal -> OCTAL_LIT .)
    LEQ             reduce using rule 354 (literal -> OCTAL_LIT .)
    INSTANCEOF      reduce using rule 354 (literal -> OCTAL_LIT .)
    EQL             reduce using rule 354 (literal -> OCTAL_LIT .)
    NEQ             reduce using rule 354 (literal -> OCTAL_LIT .)
    AND             reduce using rule 354 (literal -> OCTAL_LIT .)
    XOR             reduce using rule 354 (literal -> OCTAL_LIT .)
    OR              reduce using rule 354 (literal -> OCTAL_LIT .)
    LAND            reduce using rule 354 (literal -> OCTAL_LIT .)
    QUES            reduce using rule 354 (literal -> OCTAL_LIT .)
    LOR             reduce using rule 354 (literal -> OCTAL_LIT .)
    $end            reduce using rule 354 (literal -> OCTAL_LIT .)
    SEMICOLON       reduce using rule 354 (literal -> OCTAL_LIT .)
    RPAREN          reduce using rule 354 (literal -> OCTAL_LIT .)
    COLON           reduce using rule 354 (literal -> OCTAL_LIT .)
    RBRACK          reduce using rule 354 (literal -> OCTAL_LIT .)
    COMMA           reduce using rule 354 (literal -> OCTAL_LIT .)
    RBRACE          reduce using rule 354 (literal -> OCTAL_LIT .)


state 81

    (355) literal -> BINARY_LIT .

    LBRACK          reduce using rule 355 (literal -> BINARY_LIT .)
    PERIOD          reduce using rule 355 (literal -> BINARY_LIT .)
    INC             reduce using rule 355 (literal -> BINARY_LIT .)
    DEC             reduce using rule 355 (literal -> BINARY_LIT .)
    ASSIGN          reduce using rule 355 (literal -> BINARY_LIT .)
    MUL_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    QUO_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    REM_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    ADD_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    SUB_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    SHL_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    SHR_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    SHR_UN_ASSIGN   reduce using rule 355 (literal -> BINARY_LIT .)
    AND_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    OR_ASSIGN       reduce using rule 355 (literal -> BINARY_LIT .)
    XOR_ASSIGN      reduce using rule 355 (literal -> BINARY_LIT .)
    MUL             reduce using rule 355 (literal -> BINARY_LIT .)
    QUO             reduce using rule 355 (literal -> BINARY_LIT .)
    REM             reduce using rule 355 (literal -> BINARY_LIT .)
    ADD             reduce using rule 355 (literal -> BINARY_LIT .)
    SUB             reduce using rule 355 (literal -> BINARY_LIT .)
    SHL             reduce using rule 355 (literal -> BINARY_LIT .)
    SHR             reduce using rule 355 (literal -> BINARY_LIT .)
    SHR_UN          reduce using rule 355 (literal -> BINARY_LIT .)
    GTR             reduce using rule 355 (literal -> BINARY_LIT .)
    LSS             reduce using rule 355 (literal -> BINARY_LIT .)
    GEQ             reduce using rule 355 (literal -> BINARY_LIT .)
    LEQ             reduce using rule 355 (literal -> BINARY_LIT .)
    INSTANCEOF      reduce using rule 355 (literal -> BINARY_LIT .)
    EQL             reduce using rule 355 (literal -> BINARY_LIT .)
    NEQ             reduce using rule 355 (literal -> BINARY_LIT .)
    AND             reduce using rule 355 (literal -> BINARY_LIT .)
    XOR             reduce using rule 355 (literal -> BINARY_LIT .)
    OR              reduce using rule 355 (literal -> BINARY_LIT .)
    LAND            reduce using rule 355 (literal -> BINARY_LIT .)
    QUES            reduce using rule 355 (literal -> BINARY_LIT .)
    LOR             reduce using rule 355 (literal -> BINARY_LIT .)
    $end            reduce using rule 355 (literal -> BINARY_LIT .)
    SEMICOLON       reduce using rule 355 (literal -> BINARY_LIT .)
    RPAREN          reduce using rule 355 (literal -> BINARY_LIT .)
    COLON           reduce using rule 355 (literal -> BINARY_LIT .)
    RBRACK          reduce using rule 355 (literal -> BINARY_LIT .)
    COMMA           reduce using rule 355 (literal -> BINARY_LIT .)
    RBRACE          reduce using rule 355 (literal -> BINARY_LIT .)


state 82

    (356) literal -> DECIMAL_LIT .

    LBRACK          reduce using rule 356 (literal -> DECIMAL_LIT .)
    PERIOD          reduce using rule 356 (literal -> DECIMAL_LIT .)
    INC             reduce using rule 356 (literal -> DECIMAL_LIT .)
    DEC             reduce using rule 356 (literal -> DECIMAL_LIT .)
    ASSIGN          reduce using rule 356 (literal -> DECIMAL_LIT .)
    MUL_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    QUO_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    REM_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    ADD_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    SUB_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    SHL_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    SHR_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    SHR_UN_ASSIGN   reduce using rule 356 (literal -> DECIMAL_LIT .)
    AND_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    OR_ASSIGN       reduce using rule 356 (literal -> DECIMAL_LIT .)
    XOR_ASSIGN      reduce using rule 356 (literal -> DECIMAL_LIT .)
    MUL             reduce using rule 356 (literal -> DECIMAL_LIT .)
    QUO             reduce using rule 356 (literal -> DECIMAL_LIT .)
    REM             reduce using rule 356 (literal -> DECIMAL_LIT .)
    ADD             reduce using rule 356 (literal -> DECIMAL_LIT .)
    SUB             reduce using rule 356 (literal -> DECIMAL_LIT .)
    SHL             reduce using rule 356 (literal -> DECIMAL_LIT .)
    SHR             reduce using rule 356 (literal -> DECIMAL_LIT .)
    SHR_UN          reduce using rule 356 (literal -> DECIMAL_LIT .)
    GTR             reduce using rule 356 (literal -> DECIMAL_LIT .)
    LSS             reduce using rule 356 (literal -> DECIMAL_LIT .)
    GEQ             reduce using rule 356 (literal -> DECIMAL_LIT .)
    LEQ             reduce using rule 356 (literal -> DECIMAL_LIT .)
    INSTANCEOF      reduce using rule 356 (literal -> DECIMAL_LIT .)
    EQL             reduce using rule 356 (literal -> DECIMAL_LIT .)
    NEQ             reduce using rule 356 (literal -> DECIMAL_LIT .)
    AND             reduce using rule 356 (literal -> DECIMAL_LIT .)
    XOR             reduce using rule 356 (literal -> DECIMAL_LIT .)
    OR              reduce using rule 356 (literal -> DECIMAL_LIT .)
    LAND            reduce using rule 356 (literal -> DECIMAL_LIT .)
    QUES            reduce using rule 356 (literal -> DECIMAL_LIT .)
    LOR             reduce using rule 356 (literal -> DECIMAL_LIT .)
    $end            reduce using rule 356 (literal -> DECIMAL_LIT .)
    SEMICOLON       reduce using rule 356 (literal -> DECIMAL_LIT .)
    RPAREN          reduce using rule 356 (literal -> DECIMAL_LIT .)
    COLON           reduce using rule 356 (literal -> DECIMAL_LIT .)
    RBRACK          reduce using rule 356 (literal -> DECIMAL_LIT .)
    COMMA           reduce using rule 356 (literal -> DECIMAL_LIT .)
    RBRACE          reduce using rule 356 (literal -> DECIMAL_LIT .)


state 83

    (357) literal -> FLOAT_HEX_LIT .

    LBRACK          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    PERIOD          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    INC             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    DEC             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    ASSIGN          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    MUL_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    QUO_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    REM_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    ADD_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SUB_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SHL_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SHR_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SHR_UN_ASSIGN   reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    AND_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    OR_ASSIGN       reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    XOR_ASSIGN      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    MUL             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    QUO             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    REM             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    ADD             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SUB             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SHL             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SHR             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SHR_UN          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    GTR             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    LSS             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    GEQ             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    LEQ             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    INSTANCEOF      reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    EQL             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    NEQ             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    AND             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    XOR             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    OR              reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    LAND            reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    QUES            reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    LOR             reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    $end            reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    SEMICOLON       reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    RPAREN          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    COLON           reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    RBRACK          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    COMMA           reduce using rule 357 (literal -> FLOAT_HEX_LIT .)
    RBRACE          reduce using rule 357 (literal -> FLOAT_HEX_LIT .)


state 84

    (358) literal -> FLOAT_DEC_LIT .

    LBRACK          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    PERIOD          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    INC             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    DEC             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    ASSIGN          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    MUL_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    QUO_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    REM_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    ADD_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SUB_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SHL_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SHR_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SHR_UN_ASSIGN   reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    AND_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    OR_ASSIGN       reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    XOR_ASSIGN      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    MUL             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    QUO             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    REM             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    ADD             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SUB             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SHL             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SHR             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SHR_UN          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    GTR             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    LSS             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    GEQ             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    LEQ             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    INSTANCEOF      reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    EQL             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    NEQ             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    AND             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    XOR             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    OR              reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    LAND            reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    QUES            reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    LOR             reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    $end            reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    SEMICOLON       reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    RPAREN          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    COLON           reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    RBRACK          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    COMMA           reduce using rule 358 (literal -> FLOAT_DEC_LIT .)
    RBRACE          reduce using rule 358 (literal -> FLOAT_DEC_LIT .)


state 85

    (359) literal -> CHAR_LIT .

    LBRACK          reduce using rule 359 (literal -> CHAR_LIT .)
    PERIOD          reduce using rule 359 (literal -> CHAR_LIT .)
    INC             reduce using rule 359 (literal -> CHAR_LIT .)
    DEC             reduce using rule 359 (literal -> CHAR_LIT .)
    ASSIGN          reduce using rule 359 (literal -> CHAR_LIT .)
    MUL_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    QUO_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    REM_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    ADD_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    SUB_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    SHL_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    SHR_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    SHR_UN_ASSIGN   reduce using rule 359 (literal -> CHAR_LIT .)
    AND_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    OR_ASSIGN       reduce using rule 359 (literal -> CHAR_LIT .)
    XOR_ASSIGN      reduce using rule 359 (literal -> CHAR_LIT .)
    MUL             reduce using rule 359 (literal -> CHAR_LIT .)
    QUO             reduce using rule 359 (literal -> CHAR_LIT .)
    REM             reduce using rule 359 (literal -> CHAR_LIT .)
    ADD             reduce using rule 359 (literal -> CHAR_LIT .)
    SUB             reduce using rule 359 (literal -> CHAR_LIT .)
    SHL             reduce using rule 359 (literal -> CHAR_LIT .)
    SHR             reduce using rule 359 (literal -> CHAR_LIT .)
    SHR_UN          reduce using rule 359 (literal -> CHAR_LIT .)
    GTR             reduce using rule 359 (literal -> CHAR_LIT .)
    LSS             reduce using rule 359 (literal -> CHAR_LIT .)
    GEQ             reduce using rule 359 (literal -> CHAR_LIT .)
    LEQ             reduce using rule 359 (literal -> CHAR_LIT .)
    INSTANCEOF      reduce using rule 359 (literal -> CHAR_LIT .)
    EQL             reduce using rule 359 (literal -> CHAR_LIT .)
    NEQ             reduce using rule 359 (literal -> CHAR_LIT .)
    AND             reduce using rule 359 (literal -> CHAR_LIT .)
    XOR             reduce using rule 359 (literal -> CHAR_LIT .)
    OR              reduce using rule 359 (literal -> CHAR_LIT .)
    LAND            reduce using rule 359 (literal -> CHAR_LIT .)
    QUES            reduce using rule 359 (literal -> CHAR_LIT .)
    LOR             reduce using rule 359 (literal -> CHAR_LIT .)
    $end            reduce using rule 359 (literal -> CHAR_LIT .)
    SEMICOLON       reduce using rule 359 (literal -> CHAR_LIT .)
    RPAREN          reduce using rule 359 (literal -> CHAR_LIT .)
    COLON           reduce using rule 359 (literal -> CHAR_LIT .)
    RBRACK          reduce using rule 359 (literal -> CHAR_LIT .)
    COMMA           reduce using rule 359 (literal -> CHAR_LIT .)
    RBRACE          reduce using rule 359 (literal -> CHAR_LIT .)


state 86

    (360) literal -> STRING_LIT .

    LBRACK          reduce using rule 360 (literal -> STRING_LIT .)
    PERIOD          reduce using rule 360 (literal -> STRING_LIT .)
    INC             reduce using rule 360 (literal -> STRING_LIT .)
    DEC             reduce using rule 360 (literal -> STRING_LIT .)
    ASSIGN          reduce using rule 360 (literal -> STRING_LIT .)
    MUL_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    QUO_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    REM_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    ADD_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    SUB_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    SHL_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    SHR_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    SHR_UN_ASSIGN   reduce using rule 360 (literal -> STRING_LIT .)
    AND_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    OR_ASSIGN       reduce using rule 360 (literal -> STRING_LIT .)
    XOR_ASSIGN      reduce using rule 360 (literal -> STRING_LIT .)
    MUL             reduce using rule 360 (literal -> STRING_LIT .)
    QUO             reduce using rule 360 (literal -> STRING_LIT .)
    REM             reduce using rule 360 (literal -> STRING_LIT .)
    ADD             reduce using rule 360 (literal -> STRING_LIT .)
    SUB             reduce using rule 360 (literal -> STRING_LIT .)
    SHL             reduce using rule 360 (literal -> STRING_LIT .)
    SHR             reduce using rule 360 (literal -> STRING_LIT .)
    SHR_UN          reduce using rule 360 (literal -> STRING_LIT .)
    GTR             reduce using rule 360 (literal -> STRING_LIT .)
    LSS             reduce using rule 360 (literal -> STRING_LIT .)
    GEQ             reduce using rule 360 (literal -> STRING_LIT .)
    LEQ             reduce using rule 360 (literal -> STRING_LIT .)
    INSTANCEOF      reduce using rule 360 (literal -> STRING_LIT .)
    EQL             reduce using rule 360 (literal -> STRING_LIT .)
    NEQ             reduce using rule 360 (literal -> STRING_LIT .)
    AND             reduce using rule 360 (literal -> STRING_LIT .)
    XOR             reduce using rule 360 (literal -> STRING_LIT .)
    OR              reduce using rule 360 (literal -> STRING_LIT .)
    LAND            reduce using rule 360 (literal -> STRING_LIT .)
    QUES            reduce using rule 360 (literal -> STRING_LIT .)
    LOR             reduce using rule 360 (literal -> STRING_LIT .)
    $end            reduce using rule 360 (literal -> STRING_LIT .)
    SEMICOLON       reduce using rule 360 (literal -> STRING_LIT .)
    RPAREN          reduce using rule 360 (literal -> STRING_LIT .)
    COLON           reduce using rule 360 (literal -> STRING_LIT .)
    RBRACK          reduce using rule 360 (literal -> STRING_LIT .)
    COMMA           reduce using rule 360 (literal -> STRING_LIT .)
    RBRACE          reduce using rule 360 (literal -> STRING_LIT .)


state 87

    (361) literal -> BOOL_LIT .

    LBRACK          reduce using rule 361 (literal -> BOOL_LIT .)
    PERIOD          reduce using rule 361 (literal -> BOOL_LIT .)
    INC             reduce using rule 361 (literal -> BOOL_LIT .)
    DEC             reduce using rule 361 (literal -> BOOL_LIT .)
    ASSIGN          reduce using rule 361 (literal -> BOOL_LIT .)
    MUL_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    QUO_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    REM_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    ADD_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    SUB_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    SHL_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    SHR_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    SHR_UN_ASSIGN   reduce using rule 361 (literal -> BOOL_LIT .)
    AND_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    OR_ASSIGN       reduce using rule 361 (literal -> BOOL_LIT .)
    XOR_ASSIGN      reduce using rule 361 (literal -> BOOL_LIT .)
    MUL             reduce using rule 361 (literal -> BOOL_LIT .)
    QUO             reduce using rule 361 (literal -> BOOL_LIT .)
    REM             reduce using rule 361 (literal -> BOOL_LIT .)
    ADD             reduce using rule 361 (literal -> BOOL_LIT .)
    SUB             reduce using rule 361 (literal -> BOOL_LIT .)
    SHL             reduce using rule 361 (literal -> BOOL_LIT .)
    SHR             reduce using rule 361 (literal -> BOOL_LIT .)
    SHR_UN          reduce using rule 361 (literal -> BOOL_LIT .)
    GTR             reduce using rule 361 (literal -> BOOL_LIT .)
    LSS             reduce using rule 361 (literal -> BOOL_LIT .)
    GEQ             reduce using rule 361 (literal -> BOOL_LIT .)
    LEQ             reduce using rule 361 (literal -> BOOL_LIT .)
    INSTANCEOF      reduce using rule 361 (literal -> BOOL_LIT .)
    EQL             reduce using rule 361 (literal -> BOOL_LIT .)
    NEQ             reduce using rule 361 (literal -> BOOL_LIT .)
    AND             reduce using rule 361 (literal -> BOOL_LIT .)
    XOR             reduce using rule 361 (literal -> BOOL_LIT .)
    OR              reduce using rule 361 (literal -> BOOL_LIT .)
    LAND            reduce using rule 361 (literal -> BOOL_LIT .)
    QUES            reduce using rule 361 (literal -> BOOL_LIT .)
    LOR             reduce using rule 361 (literal -> BOOL_LIT .)
    $end            reduce using rule 361 (literal -> BOOL_LIT .)
    SEMICOLON       reduce using rule 361 (literal -> BOOL_LIT .)
    RPAREN          reduce using rule 361 (literal -> BOOL_LIT .)
    COLON           reduce using rule 361 (literal -> BOOL_LIT .)
    RBRACK          reduce using rule 361 (literal -> BOOL_LIT .)
    COMMA           reduce using rule 361 (literal -> BOOL_LIT .)
    RBRACE          reduce using rule 361 (literal -> BOOL_LIT .)


state 88

    (362) literal -> NULL_LIT .

    LBRACK          reduce using rule 362 (literal -> NULL_LIT .)
    PERIOD          reduce using rule 362 (literal -> NULL_LIT .)
    INC             reduce using rule 362 (literal -> NULL_LIT .)
    DEC             reduce using rule 362 (literal -> NULL_LIT .)
    ASSIGN          reduce using rule 362 (literal -> NULL_LIT .)
    MUL_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    QUO_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    REM_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    ADD_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    SUB_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    SHL_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    SHR_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    SHR_UN_ASSIGN   reduce using rule 362 (literal -> NULL_LIT .)
    AND_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    OR_ASSIGN       reduce using rule 362 (literal -> NULL_LIT .)
    XOR_ASSIGN      reduce using rule 362 (literal -> NULL_LIT .)
    MUL             reduce using rule 362 (literal -> NULL_LIT .)
    QUO             reduce using rule 362 (literal -> NULL_LIT .)
    REM             reduce using rule 362 (literal -> NULL_LIT .)
    ADD             reduce using rule 362 (literal -> NULL_LIT .)
    SUB             reduce using rule 362 (literal -> NULL_LIT .)
    SHL             reduce using rule 362 (literal -> NULL_LIT .)
    SHR             reduce using rule 362 (literal -> NULL_LIT .)
    SHR_UN          reduce using rule 362 (literal -> NULL_LIT .)
    GTR             reduce using rule 362 (literal -> NULL_LIT .)
    LSS             reduce using rule 362 (literal -> NULL_LIT .)
    GEQ             reduce using rule 362 (literal -> NULL_LIT .)
    LEQ             reduce using rule 362 (literal -> NULL_LIT .)
    INSTANCEOF      reduce using rule 362 (literal -> NULL_LIT .)
    EQL             reduce using rule 362 (literal -> NULL_LIT .)
    NEQ             reduce using rule 362 (literal -> NULL_LIT .)
    AND             reduce using rule 362 (literal -> NULL_LIT .)
    XOR             reduce using rule 362 (literal -> NULL_LIT .)
    OR              reduce using rule 362 (literal -> NULL_LIT .)
    LAND            reduce using rule 362 (literal -> NULL_LIT .)
    QUES            reduce using rule 362 (literal -> NULL_LIT .)
    LOR             reduce using rule 362 (literal -> NULL_LIT .)
    $end            reduce using rule 362 (literal -> NULL_LIT .)
    SEMICOLON       reduce using rule 362 (literal -> NULL_LIT .)
    RPAREN          reduce using rule 362 (literal -> NULL_LIT .)
    COLON           reduce using rule 362 (literal -> NULL_LIT .)
    RBRACK          reduce using rule 362 (literal -> NULL_LIT .)
    COMMA           reduce using rule 362 (literal -> NULL_LIT .)
    RBRACE          reduce using rule 362 (literal -> NULL_LIT .)


state 89

    (331) class_instance_creation_expression -> class_instance_creation_expression_name . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> class_instance_creation_expression_name . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt

    NEW             shift and go to state 288


state 90

    (381) primitive_type -> BOOLEAN .

    PERIOD          reduce using rule 381 (primitive_type -> BOOLEAN .)
    LBRACK          reduce using rule 381 (primitive_type -> BOOLEAN .)
    IDENT           reduce using rule 381 (primitive_type -> BOOLEAN .)
    RPAREN          reduce using rule 381 (primitive_type -> BOOLEAN .)
    ELLIPSIS        reduce using rule 381 (primitive_type -> BOOLEAN .)
    OR              reduce using rule 381 (primitive_type -> BOOLEAN .)


state 91

    (382) primitive_type -> VOID .

    PERIOD          reduce using rule 382 (primitive_type -> VOID .)
    LBRACK          reduce using rule 382 (primitive_type -> VOID .)
    IDENT           reduce using rule 382 (primitive_type -> VOID .)
    RPAREN          reduce using rule 382 (primitive_type -> VOID .)
    ELLIPSIS        reduce using rule 382 (primitive_type -> VOID .)
    OR              reduce using rule 382 (primitive_type -> VOID .)


state 92

    (383) primitive_type -> BYTE .

    PERIOD          reduce using rule 383 (primitive_type -> BYTE .)
    LBRACK          reduce using rule 383 (primitive_type -> BYTE .)
    IDENT           reduce using rule 383 (primitive_type -> BYTE .)
    RPAREN          reduce using rule 383 (primitive_type -> BYTE .)
    ELLIPSIS        reduce using rule 383 (primitive_type -> BYTE .)
    OR              reduce using rule 383 (primitive_type -> BYTE .)


state 93

    (384) primitive_type -> SHORT .

    PERIOD          reduce using rule 384 (primitive_type -> SHORT .)
    LBRACK          reduce using rule 384 (primitive_type -> SHORT .)
    IDENT           reduce using rule 384 (primitive_type -> SHORT .)
    RPAREN          reduce using rule 384 (primitive_type -> SHORT .)
    ELLIPSIS        reduce using rule 384 (primitive_type -> SHORT .)
    OR              reduce using rule 384 (primitive_type -> SHORT .)


state 94

    (385) primitive_type -> INT .

    PERIOD          reduce using rule 385 (primitive_type -> INT .)
    LBRACK          reduce using rule 385 (primitive_type -> INT .)
    IDENT           reduce using rule 385 (primitive_type -> INT .)
    RPAREN          reduce using rule 385 (primitive_type -> INT .)
    ELLIPSIS        reduce using rule 385 (primitive_type -> INT .)
    OR              reduce using rule 385 (primitive_type -> INT .)


state 95

    (386) primitive_type -> LONG .

    PERIOD          reduce using rule 386 (primitive_type -> LONG .)
    LBRACK          reduce using rule 386 (primitive_type -> LONG .)
    IDENT           reduce using rule 386 (primitive_type -> LONG .)
    RPAREN          reduce using rule 386 (primitive_type -> LONG .)
    ELLIPSIS        reduce using rule 386 (primitive_type -> LONG .)
    OR              reduce using rule 386 (primitive_type -> LONG .)


state 96

    (387) primitive_type -> CHAR .

    PERIOD          reduce using rule 387 (primitive_type -> CHAR .)
    LBRACK          reduce using rule 387 (primitive_type -> CHAR .)
    IDENT           reduce using rule 387 (primitive_type -> CHAR .)
    RPAREN          reduce using rule 387 (primitive_type -> CHAR .)
    ELLIPSIS        reduce using rule 387 (primitive_type -> CHAR .)
    OR              reduce using rule 387 (primitive_type -> CHAR .)


state 97

    (388) primitive_type -> FLOAT .

    PERIOD          reduce using rule 388 (primitive_type -> FLOAT .)
    LBRACK          reduce using rule 388 (primitive_type -> FLOAT .)
    IDENT           reduce using rule 388 (primitive_type -> FLOAT .)
    RPAREN          reduce using rule 388 (primitive_type -> FLOAT .)
    ELLIPSIS        reduce using rule 388 (primitive_type -> FLOAT .)
    OR              reduce using rule 388 (primitive_type -> FLOAT .)


state 98

    (389) primitive_type -> DOUBLE .

    PERIOD          reduce using rule 389 (primitive_type -> DOUBLE .)
    LBRACK          reduce using rule 389 (primitive_type -> DOUBLE .)
    IDENT           reduce using rule 389 (primitive_type -> DOUBLE .)
    RPAREN          reduce using rule 389 (primitive_type -> DOUBLE .)
    ELLIPSIS        reduce using rule 389 (primitive_type -> DOUBLE .)
    OR              reduce using rule 389 (primitive_type -> DOUBLE .)


state 99

    (41) exclusive_or_expression -> and_expression .
    (47) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 41 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 41 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 41 (exclusive_or_expression -> and_expression .)
    QUES            reduce using rule 41 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 41 (exclusive_or_expression -> and_expression .)
    $end            reduce using rule 41 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 41 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 41 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 41 (exclusive_or_expression -> and_expression .)
    RBRACK          reduce using rule 41 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 41 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 41 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 289


state 100

    (46) and_expression -> equality_expression .
    (52) equality_expression -> equality_expression . EQL instanceof_expression
    (53) equality_expression -> equality_expression . NEQ instanceof_expression

    AND             reduce using rule 46 (and_expression -> equality_expression .)
    XOR             reduce using rule 46 (and_expression -> equality_expression .)
    OR              reduce using rule 46 (and_expression -> equality_expression .)
    LAND            reduce using rule 46 (and_expression -> equality_expression .)
    QUES            reduce using rule 46 (and_expression -> equality_expression .)
    LOR             reduce using rule 46 (and_expression -> equality_expression .)
    $end            reduce using rule 46 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 46 (and_expression -> equality_expression .)
    COLON           reduce using rule 46 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 46 (and_expression -> equality_expression .)
    RBRACK          reduce using rule 46 (and_expression -> equality_expression .)
    COMMA           reduce using rule 46 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 46 (and_expression -> equality_expression .)
    EQL             shift and go to state 290
    NEQ             shift and go to state 291


state 101

    (51) equality_expression -> instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 51 (equality_expression -> instanceof_expression .)
    NEQ             reduce using rule 51 (equality_expression -> instanceof_expression .)
    AND             reduce using rule 51 (equality_expression -> instanceof_expression .)
    XOR             reduce using rule 51 (equality_expression -> instanceof_expression .)
    OR              reduce using rule 51 (equality_expression -> instanceof_expression .)
    LAND            reduce using rule 51 (equality_expression -> instanceof_expression .)
    QUES            reduce using rule 51 (equality_expression -> instanceof_expression .)
    LOR             reduce using rule 51 (equality_expression -> instanceof_expression .)
    $end            reduce using rule 51 (equality_expression -> instanceof_expression .)
    SEMICOLON       reduce using rule 51 (equality_expression -> instanceof_expression .)
    COLON           reduce using rule 51 (equality_expression -> instanceof_expression .)
    RPAREN          reduce using rule 51 (equality_expression -> instanceof_expression .)
    RBRACK          reduce using rule 51 (equality_expression -> instanceof_expression .)
    COMMA           reduce using rule 51 (equality_expression -> instanceof_expression .)
    RBRACE          reduce using rule 51 (equality_expression -> instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 102

    (59) instanceof_expression -> relational_expression .
    (65) relational_expression -> relational_expression . GTR shift_expression
    (66) relational_expression -> relational_expression . LSS shift_expression
    (67) relational_expression -> relational_expression . GEQ shift_expression
    (68) relational_expression -> relational_expression . LEQ shift_expression

    INSTANCEOF      reduce using rule 59 (instanceof_expression -> relational_expression .)
    EQL             reduce using rule 59 (instanceof_expression -> relational_expression .)
    NEQ             reduce using rule 59 (instanceof_expression -> relational_expression .)
    AND             reduce using rule 59 (instanceof_expression -> relational_expression .)
    XOR             reduce using rule 59 (instanceof_expression -> relational_expression .)
    OR              reduce using rule 59 (instanceof_expression -> relational_expression .)
    LAND            reduce using rule 59 (instanceof_expression -> relational_expression .)
    QUES            reduce using rule 59 (instanceof_expression -> relational_expression .)
    LOR             reduce using rule 59 (instanceof_expression -> relational_expression .)
    $end            reduce using rule 59 (instanceof_expression -> relational_expression .)
    SEMICOLON       reduce using rule 59 (instanceof_expression -> relational_expression .)
    COLON           reduce using rule 59 (instanceof_expression -> relational_expression .)
    RPAREN          reduce using rule 59 (instanceof_expression -> relational_expression .)
    RBRACK          reduce using rule 59 (instanceof_expression -> relational_expression .)
    COMMA           reduce using rule 59 (instanceof_expression -> relational_expression .)
    RBRACE          reduce using rule 59 (instanceof_expression -> relational_expression .)
    GTR             shift and go to state 293
    LSS             shift and go to state 294
    GEQ             shift and go to state 295
    LEQ             shift and go to state 296


state 103

    (64) relational_expression -> shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    GTR             reduce using rule 64 (relational_expression -> shift_expression .)
    LSS             reduce using rule 64 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 64 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 64 (relational_expression -> shift_expression .)
    INSTANCEOF      reduce using rule 64 (relational_expression -> shift_expression .)
    EQL             reduce using rule 64 (relational_expression -> shift_expression .)
    NEQ             reduce using rule 64 (relational_expression -> shift_expression .)
    AND             reduce using rule 64 (relational_expression -> shift_expression .)
    XOR             reduce using rule 64 (relational_expression -> shift_expression .)
    OR              reduce using rule 64 (relational_expression -> shift_expression .)
    LAND            reduce using rule 64 (relational_expression -> shift_expression .)
    QUES            reduce using rule 64 (relational_expression -> shift_expression .)
    LOR             reduce using rule 64 (relational_expression -> shift_expression .)
    $end            reduce using rule 64 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 64 (relational_expression -> shift_expression .)
    COLON           reduce using rule 64 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 64 (relational_expression -> shift_expression .)
    RBRACK          reduce using rule 64 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 64 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 64 (relational_expression -> shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 104

    (78) shift_expression -> additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    SHL             reduce using rule 78 (shift_expression -> additive_expression .)
    SHR             reduce using rule 78 (shift_expression -> additive_expression .)
    SHR_UN          reduce using rule 78 (shift_expression -> additive_expression .)
    GTR             reduce using rule 78 (shift_expression -> additive_expression .)
    LSS             reduce using rule 78 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 78 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 78 (shift_expression -> additive_expression .)
    INSTANCEOF      reduce using rule 78 (shift_expression -> additive_expression .)
    EQL             reduce using rule 78 (shift_expression -> additive_expression .)
    NEQ             reduce using rule 78 (shift_expression -> additive_expression .)
    AND             reduce using rule 78 (shift_expression -> additive_expression .)
    XOR             reduce using rule 78 (shift_expression -> additive_expression .)
    OR              reduce using rule 78 (shift_expression -> additive_expression .)
    LAND            reduce using rule 78 (shift_expression -> additive_expression .)
    QUES            reduce using rule 78 (shift_expression -> additive_expression .)
    LOR             reduce using rule 78 (shift_expression -> additive_expression .)
    $end            reduce using rule 78 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 78 (shift_expression -> additive_expression .)
    COLON           reduce using rule 78 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 78 (shift_expression -> additive_expression .)
    RBRACK          reduce using rule 78 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 78 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 78 (shift_expression -> additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 105

    (89) additive_expression -> multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    SUB             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    SHL             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    SHR             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    SHR_UN          reduce using rule 89 (additive_expression -> multiplicative_expression .)
    GTR             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    LSS             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    INSTANCEOF      reduce using rule 89 (additive_expression -> multiplicative_expression .)
    EQL             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    NEQ             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 89 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 89 (additive_expression -> multiplicative_expression .)
    QUES            reduce using rule 89 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 89 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 89 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 89 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 89 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 89 (additive_expression -> multiplicative_expression .)
    RBRACK          reduce using rule 89 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 89 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 89 (additive_expression -> multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 106

    (110) unary_expression -> ADD . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 305
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 107

    (111) unary_expression -> SUB . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 306
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 108

    (97) multiplicative_expression -> unary_expression .

    MUL             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    QUO             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    REM             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    ADD             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    SUB             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    SHL             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    SHR             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    SHR_UN          reduce using rule 97 (multiplicative_expression -> unary_expression .)
    GTR             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    LSS             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    INSTANCEOF      reduce using rule 97 (multiplicative_expression -> unary_expression .)
    EQL             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    NEQ             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 97 (multiplicative_expression -> unary_expression .)
    LAND            reduce using rule 97 (multiplicative_expression -> unary_expression .)
    QUES            reduce using rule 97 (multiplicative_expression -> unary_expression .)
    LOR             reduce using rule 97 (multiplicative_expression -> unary_expression .)
    $end            reduce using rule 97 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 97 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 97 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 97 (multiplicative_expression -> unary_expression .)
    RBRACK          reduce using rule 97 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 97 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 97 (multiplicative_expression -> unary_expression .)


state 109

    (108) unary_expression -> pre_increment_expression .

    MUL             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    QUO             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    REM             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    ADD             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    SUB             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    SHL             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    SHR             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    SHR_UN          reduce using rule 108 (unary_expression -> pre_increment_expression .)
    GTR             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    LSS             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    GEQ             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    LEQ             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    INSTANCEOF      reduce using rule 108 (unary_expression -> pre_increment_expression .)
    EQL             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    NEQ             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    AND             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    XOR             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    OR              reduce using rule 108 (unary_expression -> pre_increment_expression .)
    LAND            reduce using rule 108 (unary_expression -> pre_increment_expression .)
    QUES            reduce using rule 108 (unary_expression -> pre_increment_expression .)
    LOR             reduce using rule 108 (unary_expression -> pre_increment_expression .)
    $end            reduce using rule 108 (unary_expression -> pre_increment_expression .)
    SEMICOLON       reduce using rule 108 (unary_expression -> pre_increment_expression .)
    RPAREN          reduce using rule 108 (unary_expression -> pre_increment_expression .)
    COLON           reduce using rule 108 (unary_expression -> pre_increment_expression .)
    RBRACK          reduce using rule 108 (unary_expression -> pre_increment_expression .)
    COMMA           reduce using rule 108 (unary_expression -> pre_increment_expression .)
    RBRACE          reduce using rule 108 (unary_expression -> pre_increment_expression .)


state 110

    (109) unary_expression -> pre_decrement_expression .

    MUL             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    QUO             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    REM             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    ADD             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    SUB             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    SHL             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    SHR             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    SHR_UN          reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    GTR             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    LSS             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    GEQ             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    LEQ             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    INSTANCEOF      reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    EQL             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    NEQ             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    AND             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    XOR             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    OR              reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    LAND            reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    QUES            reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    LOR             reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    $end            reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    SEMICOLON       reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    RPAREN          reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    COLON           reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    RBRACK          reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    COMMA           reduce using rule 109 (unary_expression -> pre_decrement_expression .)
    RBRACE          reduce using rule 109 (unary_expression -> pre_decrement_expression .)


state 111

    (112) unary_expression -> unary_expression_not_plus_minus .

    MUL             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    QUO             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    REM             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    ADD             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    SUB             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    SHL             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    SHR             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    SHR_UN          reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    GTR             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    LSS             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    GEQ             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    LEQ             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    EQL             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    NEQ             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    XOR             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    LAND            reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    QUES            reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    LOR             reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    $end            reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    SEMICOLON       reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    COLON           reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    RBRACK          reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    COMMA           reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)
    RBRACE          reduce using rule 112 (unary_expression -> unary_expression_not_plus_minus .)


state 112

    (121) unary_expression_not_plus_minus -> LNOT . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 307
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 113

    (122) unary_expression_not_plus_minus -> NOT . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 308
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 114

    (123) unary_expression_not_plus_minus -> cast_expression .

    MUL             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    QUO             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    REM             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    ADD             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    SUB             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    SHL             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    SHR             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    SHR_UN          reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    GTR             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    LSS             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    GEQ             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    LEQ             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    INSTANCEOF      reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    EQL             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    NEQ             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    AND             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    XOR             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    OR              reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    LAND            reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    QUES            reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    LOR             reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    $end            reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    SEMICOLON       reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    RPAREN          reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    COLON           reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    RBRACK          reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    COMMA           reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)
    RBRACE          reduce using rule 123 (unary_expression_not_plus_minus -> cast_expression .)


state 115

    (582) start -> MUL block_statement .

    $end            reduce using rule 582 (start -> MUL block_statement .)


state 116

    (170) block_statement -> local_variable_declaration_statement .

    $end            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    IF              reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    WHILE           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    FOR             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    LBRACE          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    ASSERT          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    SEMICOLON       reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    SWITCH          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    DO              reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    BREAK           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    CONTINUE        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    RETURN          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    SYNCHRONIZED    reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    THROW           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    TRY             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    IDENT           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    BOOLEAN         reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    VOID            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    BYTE            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    SHORT           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    INT             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    LONG            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    CHAR            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    FLOAT           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    DOUBLE          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    PUBLIC          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    PROTECTED       reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    PRIVATE         reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    STATIC          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    ABSTRACT        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    FINAL           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    NATIVE          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    TRANSIENT       reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    VOLATILE        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    STRICTFP        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    THIS            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    SUPER           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    INC             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    DEC             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    NEW             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    LSS             reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    LPAREN          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    ATRATE          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    HEX_LIT         reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    OCTAL_LIT       reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    BINARY_LIT      reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    DECIMAL_LIT     reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    FLOAT_HEX_LIT   reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    FLOAT_DEC_LIT   reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    CHAR_LIT        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    STRING_LIT      reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    BOOL_LIT        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    NULL_LIT        reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    CLASS           reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    INTERFACE       reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    RBRACE          reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    CASE            reduce using rule 170 (block_statement -> local_variable_declaration_statement .)
    DEFAULT         reduce using rule 170 (block_statement -> local_variable_declaration_statement .)


state 117

    (171) block_statement -> statement .

    $end            reduce using rule 171 (block_statement -> statement .)
    IF              reduce using rule 171 (block_statement -> statement .)
    WHILE           reduce using rule 171 (block_statement -> statement .)
    FOR             reduce using rule 171 (block_statement -> statement .)
    LBRACE          reduce using rule 171 (block_statement -> statement .)
    ASSERT          reduce using rule 171 (block_statement -> statement .)
    SEMICOLON       reduce using rule 171 (block_statement -> statement .)
    SWITCH          reduce using rule 171 (block_statement -> statement .)
    DO              reduce using rule 171 (block_statement -> statement .)
    BREAK           reduce using rule 171 (block_statement -> statement .)
    CONTINUE        reduce using rule 171 (block_statement -> statement .)
    RETURN          reduce using rule 171 (block_statement -> statement .)
    SYNCHRONIZED    reduce using rule 171 (block_statement -> statement .)
    THROW           reduce using rule 171 (block_statement -> statement .)
    TRY             reduce using rule 171 (block_statement -> statement .)
    IDENT           reduce using rule 171 (block_statement -> statement .)
    BOOLEAN         reduce using rule 171 (block_statement -> statement .)
    VOID            reduce using rule 171 (block_statement -> statement .)
    BYTE            reduce using rule 171 (block_statement -> statement .)
    SHORT           reduce using rule 171 (block_statement -> statement .)
    INT             reduce using rule 171 (block_statement -> statement .)
    LONG            reduce using rule 171 (block_statement -> statement .)
    CHAR            reduce using rule 171 (block_statement -> statement .)
    FLOAT           reduce using rule 171 (block_statement -> statement .)
    DOUBLE          reduce using rule 171 (block_statement -> statement .)
    PUBLIC          reduce using rule 171 (block_statement -> statement .)
    PROTECTED       reduce using rule 171 (block_statement -> statement .)
    PRIVATE         reduce using rule 171 (block_statement -> statement .)
    STATIC          reduce using rule 171 (block_statement -> statement .)
    ABSTRACT        reduce using rule 171 (block_statement -> statement .)
    FINAL           reduce using rule 171 (block_statement -> statement .)
    NATIVE          reduce using rule 171 (block_statement -> statement .)
    TRANSIENT       reduce using rule 171 (block_statement -> statement .)
    VOLATILE        reduce using rule 171 (block_statement -> statement .)
    STRICTFP        reduce using rule 171 (block_statement -> statement .)
    THIS            reduce using rule 171 (block_statement -> statement .)
    SUPER           reduce using rule 171 (block_statement -> statement .)
    INC             reduce using rule 171 (block_statement -> statement .)
    DEC             reduce using rule 171 (block_statement -> statement .)
    NEW             reduce using rule 171 (block_statement -> statement .)
    LSS             reduce using rule 171 (block_statement -> statement .)
    LPAREN          reduce using rule 171 (block_statement -> statement .)
    ATRATE          reduce using rule 171 (block_statement -> statement .)
    HEX_LIT         reduce using rule 171 (block_statement -> statement .)
    OCTAL_LIT       reduce using rule 171 (block_statement -> statement .)
    BINARY_LIT      reduce using rule 171 (block_statement -> statement .)
    DECIMAL_LIT     reduce using rule 171 (block_statement -> statement .)
    FLOAT_HEX_LIT   reduce using rule 171 (block_statement -> statement .)
    FLOAT_DEC_LIT   reduce using rule 171 (block_statement -> statement .)
    CHAR_LIT        reduce using rule 171 (block_statement -> statement .)
    STRING_LIT      reduce using rule 171 (block_statement -> statement .)
    BOOL_LIT        reduce using rule 171 (block_statement -> statement .)
    NULL_LIT        reduce using rule 171 (block_statement -> statement .)
    CLASS           reduce using rule 171 (block_statement -> statement .)
    INTERFACE       reduce using rule 171 (block_statement -> statement .)
    RBRACE          reduce using rule 171 (block_statement -> statement .)
    CASE            reduce using rule 171 (block_statement -> statement .)
    DEFAULT         reduce using rule 171 (block_statement -> statement .)


state 118

    (172) block_statement -> class_declaration .

    $end            reduce using rule 172 (block_statement -> class_declaration .)
    IF              reduce using rule 172 (block_statement -> class_declaration .)
    WHILE           reduce using rule 172 (block_statement -> class_declaration .)
    FOR             reduce using rule 172 (block_statement -> class_declaration .)
    LBRACE          reduce using rule 172 (block_statement -> class_declaration .)
    ASSERT          reduce using rule 172 (block_statement -> class_declaration .)
    SEMICOLON       reduce using rule 172 (block_statement -> class_declaration .)
    SWITCH          reduce using rule 172 (block_statement -> class_declaration .)
    DO              reduce using rule 172 (block_statement -> class_declaration .)
    BREAK           reduce using rule 172 (block_statement -> class_declaration .)
    CONTINUE        reduce using rule 172 (block_statement -> class_declaration .)
    RETURN          reduce using rule 172 (block_statement -> class_declaration .)
    SYNCHRONIZED    reduce using rule 172 (block_statement -> class_declaration .)
    THROW           reduce using rule 172 (block_statement -> class_declaration .)
    TRY             reduce using rule 172 (block_statement -> class_declaration .)
    IDENT           reduce using rule 172 (block_statement -> class_declaration .)
    BOOLEAN         reduce using rule 172 (block_statement -> class_declaration .)
    VOID            reduce using rule 172 (block_statement -> class_declaration .)
    BYTE            reduce using rule 172 (block_statement -> class_declaration .)
    SHORT           reduce using rule 172 (block_statement -> class_declaration .)
    INT             reduce using rule 172 (block_statement -> class_declaration .)
    LONG            reduce using rule 172 (block_statement -> class_declaration .)
    CHAR            reduce using rule 172 (block_statement -> class_declaration .)
    FLOAT           reduce using rule 172 (block_statement -> class_declaration .)
    DOUBLE          reduce using rule 172 (block_statement -> class_declaration .)
    PUBLIC          reduce using rule 172 (block_statement -> class_declaration .)
    PROTECTED       reduce using rule 172 (block_statement -> class_declaration .)
    PRIVATE         reduce using rule 172 (block_statement -> class_declaration .)
    STATIC          reduce using rule 172 (block_statement -> class_declaration .)
    ABSTRACT        reduce using rule 172 (block_statement -> class_declaration .)
    FINAL           reduce using rule 172 (block_statement -> class_declaration .)
    NATIVE          reduce using rule 172 (block_statement -> class_declaration .)
    TRANSIENT       reduce using rule 172 (block_statement -> class_declaration .)
    VOLATILE        reduce using rule 172 (block_statement -> class_declaration .)
    STRICTFP        reduce using rule 172 (block_statement -> class_declaration .)
    THIS            reduce using rule 172 (block_statement -> class_declaration .)
    SUPER           reduce using rule 172 (block_statement -> class_declaration .)
    INC             reduce using rule 172 (block_statement -> class_declaration .)
    DEC             reduce using rule 172 (block_statement -> class_declaration .)
    NEW             reduce using rule 172 (block_statement -> class_declaration .)
    LSS             reduce using rule 172 (block_statement -> class_declaration .)
    LPAREN          reduce using rule 172 (block_statement -> class_declaration .)
    ATRATE          reduce using rule 172 (block_statement -> class_declaration .)
    HEX_LIT         reduce using rule 172 (block_statement -> class_declaration .)
    OCTAL_LIT       reduce using rule 172 (block_statement -> class_declaration .)
    BINARY_LIT      reduce using rule 172 (block_statement -> class_declaration .)
    DECIMAL_LIT     reduce using rule 172 (block_statement -> class_declaration .)
    FLOAT_HEX_LIT   reduce using rule 172 (block_statement -> class_declaration .)
    FLOAT_DEC_LIT   reduce using rule 172 (block_statement -> class_declaration .)
    CHAR_LIT        reduce using rule 172 (block_statement -> class_declaration .)
    STRING_LIT      reduce using rule 172 (block_statement -> class_declaration .)
    BOOL_LIT        reduce using rule 172 (block_statement -> class_declaration .)
    NULL_LIT        reduce using rule 172 (block_statement -> class_declaration .)
    CLASS           reduce using rule 172 (block_statement -> class_declaration .)
    INTERFACE       reduce using rule 172 (block_statement -> class_declaration .)
    RBRACE          reduce using rule 172 (block_statement -> class_declaration .)
    CASE            reduce using rule 172 (block_statement -> class_declaration .)
    DEFAULT         reduce using rule 172 (block_statement -> class_declaration .)


state 119

    (173) block_statement -> interface_declaration .

    $end            reduce using rule 173 (block_statement -> interface_declaration .)
    IF              reduce using rule 173 (block_statement -> interface_declaration .)
    WHILE           reduce using rule 173 (block_statement -> interface_declaration .)
    FOR             reduce using rule 173 (block_statement -> interface_declaration .)
    LBRACE          reduce using rule 173 (block_statement -> interface_declaration .)
    ASSERT          reduce using rule 173 (block_statement -> interface_declaration .)
    SEMICOLON       reduce using rule 173 (block_statement -> interface_declaration .)
    SWITCH          reduce using rule 173 (block_statement -> interface_declaration .)
    DO              reduce using rule 173 (block_statement -> interface_declaration .)
    BREAK           reduce using rule 173 (block_statement -> interface_declaration .)
    CONTINUE        reduce using rule 173 (block_statement -> interface_declaration .)
    RETURN          reduce using rule 173 (block_statement -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 173 (block_statement -> interface_declaration .)
    THROW           reduce using rule 173 (block_statement -> interface_declaration .)
    TRY             reduce using rule 173 (block_statement -> interface_declaration .)
    IDENT           reduce using rule 173 (block_statement -> interface_declaration .)
    BOOLEAN         reduce using rule 173 (block_statement -> interface_declaration .)
    VOID            reduce using rule 173 (block_statement -> interface_declaration .)
    BYTE            reduce using rule 173 (block_statement -> interface_declaration .)
    SHORT           reduce using rule 173 (block_statement -> interface_declaration .)
    INT             reduce using rule 173 (block_statement -> interface_declaration .)
    LONG            reduce using rule 173 (block_statement -> interface_declaration .)
    CHAR            reduce using rule 173 (block_statement -> interface_declaration .)
    FLOAT           reduce using rule 173 (block_statement -> interface_declaration .)
    DOUBLE          reduce using rule 173 (block_statement -> interface_declaration .)
    PUBLIC          reduce using rule 173 (block_statement -> interface_declaration .)
    PROTECTED       reduce using rule 173 (block_statement -> interface_declaration .)
    PRIVATE         reduce using rule 173 (block_statement -> interface_declaration .)
    STATIC          reduce using rule 173 (block_statement -> interface_declaration .)
    ABSTRACT        reduce using rule 173 (block_statement -> interface_declaration .)
    FINAL           reduce using rule 173 (block_statement -> interface_declaration .)
    NATIVE          reduce using rule 173 (block_statement -> interface_declaration .)
    TRANSIENT       reduce using rule 173 (block_statement -> interface_declaration .)
    VOLATILE        reduce using rule 173 (block_statement -> interface_declaration .)
    STRICTFP        reduce using rule 173 (block_statement -> interface_declaration .)
    THIS            reduce using rule 173 (block_statement -> interface_declaration .)
    SUPER           reduce using rule 173 (block_statement -> interface_declaration .)
    INC             reduce using rule 173 (block_statement -> interface_declaration .)
    DEC             reduce using rule 173 (block_statement -> interface_declaration .)
    NEW             reduce using rule 173 (block_statement -> interface_declaration .)
    LSS             reduce using rule 173 (block_statement -> interface_declaration .)
    LPAREN          reduce using rule 173 (block_statement -> interface_declaration .)
    ATRATE          reduce using rule 173 (block_statement -> interface_declaration .)
    HEX_LIT         reduce using rule 173 (block_statement -> interface_declaration .)
    OCTAL_LIT       reduce using rule 173 (block_statement -> interface_declaration .)
    BINARY_LIT      reduce using rule 173 (block_statement -> interface_declaration .)
    DECIMAL_LIT     reduce using rule 173 (block_statement -> interface_declaration .)
    FLOAT_HEX_LIT   reduce using rule 173 (block_statement -> interface_declaration .)
    FLOAT_DEC_LIT   reduce using rule 173 (block_statement -> interface_declaration .)
    CHAR_LIT        reduce using rule 173 (block_statement -> interface_declaration .)
    STRING_LIT      reduce using rule 173 (block_statement -> interface_declaration .)
    BOOL_LIT        reduce using rule 173 (block_statement -> interface_declaration .)
    NULL_LIT        reduce using rule 173 (block_statement -> interface_declaration .)
    CLASS           reduce using rule 173 (block_statement -> interface_declaration .)
    INTERFACE       reduce using rule 173 (block_statement -> interface_declaration .)
    RBRACE          reduce using rule 173 (block_statement -> interface_declaration .)
    CASE            reduce using rule 173 (block_statement -> interface_declaration .)
    DEFAULT         reduce using rule 173 (block_statement -> interface_declaration .)


state 120

    (174) local_variable_declaration_statement -> local_variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 309


state 121

    (270) empty_statement -> SEMICOLON .

    $end            reduce using rule 270 (empty_statement -> SEMICOLON .)
    WHILE           reduce using rule 270 (empty_statement -> SEMICOLON .)
    IF              reduce using rule 270 (empty_statement -> SEMICOLON .)
    FOR             reduce using rule 270 (empty_statement -> SEMICOLON .)
    LBRACE          reduce using rule 270 (empty_statement -> SEMICOLON .)
    ASSERT          reduce using rule 270 (empty_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 270 (empty_statement -> SEMICOLON .)
    SWITCH          reduce using rule 270 (empty_statement -> SEMICOLON .)
    DO              reduce using rule 270 (empty_statement -> SEMICOLON .)
    BREAK           reduce using rule 270 (empty_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 270 (empty_statement -> SEMICOLON .)
    RETURN          reduce using rule 270 (empty_statement -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 270 (empty_statement -> SEMICOLON .)
    THROW           reduce using rule 270 (empty_statement -> SEMICOLON .)
    TRY             reduce using rule 270 (empty_statement -> SEMICOLON .)
    IDENT           reduce using rule 270 (empty_statement -> SEMICOLON .)
    BOOLEAN         reduce using rule 270 (empty_statement -> SEMICOLON .)
    VOID            reduce using rule 270 (empty_statement -> SEMICOLON .)
    BYTE            reduce using rule 270 (empty_statement -> SEMICOLON .)
    SHORT           reduce using rule 270 (empty_statement -> SEMICOLON .)
    INT             reduce using rule 270 (empty_statement -> SEMICOLON .)
    LONG            reduce using rule 270 (empty_statement -> SEMICOLON .)
    CHAR            reduce using rule 270 (empty_statement -> SEMICOLON .)
    FLOAT           reduce using rule 270 (empty_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 270 (empty_statement -> SEMICOLON .)
    PUBLIC          reduce using rule 270 (empty_statement -> SEMICOLON .)
    PROTECTED       reduce using rule 270 (empty_statement -> SEMICOLON .)
    PRIVATE         reduce using rule 270 (empty_statement -> SEMICOLON .)
    STATIC          reduce using rule 270 (empty_statement -> SEMICOLON .)
    ABSTRACT        reduce using rule 270 (empty_statement -> SEMICOLON .)
    FINAL           reduce using rule 270 (empty_statement -> SEMICOLON .)
    NATIVE          reduce using rule 270 (empty_statement -> SEMICOLON .)
    TRANSIENT       reduce using rule 270 (empty_statement -> SEMICOLON .)
    VOLATILE        reduce using rule 270 (empty_statement -> SEMICOLON .)
    STRICTFP        reduce using rule 270 (empty_statement -> SEMICOLON .)
    THIS            reduce using rule 270 (empty_statement -> SEMICOLON .)
    SUPER           reduce using rule 270 (empty_statement -> SEMICOLON .)
    INC             reduce using rule 270 (empty_statement -> SEMICOLON .)
    DEC             reduce using rule 270 (empty_statement -> SEMICOLON .)
    NEW             reduce using rule 270 (empty_statement -> SEMICOLON .)
    LSS             reduce using rule 270 (empty_statement -> SEMICOLON .)
    LPAREN          reduce using rule 270 (empty_statement -> SEMICOLON .)
    ATRATE          reduce using rule 270 (empty_statement -> SEMICOLON .)
    HEX_LIT         reduce using rule 270 (empty_statement -> SEMICOLON .)
    OCTAL_LIT       reduce using rule 270 (empty_statement -> SEMICOLON .)
    BINARY_LIT      reduce using rule 270 (empty_statement -> SEMICOLON .)
    DECIMAL_LIT     reduce using rule 270 (empty_statement -> SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 270 (empty_statement -> SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 270 (empty_statement -> SEMICOLON .)
    CHAR_LIT        reduce using rule 270 (empty_statement -> SEMICOLON .)
    STRING_LIT      reduce using rule 270 (empty_statement -> SEMICOLON .)
    BOOL_LIT        reduce using rule 270 (empty_statement -> SEMICOLON .)
    NULL_LIT        reduce using rule 270 (empty_statement -> SEMICOLON .)
    CLASS           reduce using rule 270 (empty_statement -> SEMICOLON .)
    INTERFACE       reduce using rule 270 (empty_statement -> SEMICOLON .)
    RBRACE          reduce using rule 270 (empty_statement -> SEMICOLON .)
    CASE            reduce using rule 270 (empty_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 270 (empty_statement -> SEMICOLON .)
    ELSE            reduce using rule 270 (empty_statement -> SEMICOLON .)


state 122

    (184) statement -> statement_without_trailing_substatement .

    $end            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    WHILE           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    IF              reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FOR             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LBRACE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ASSERT          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SEMICOLON       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SWITCH          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DO              reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BREAK           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CONTINUE        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    RETURN          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SYNCHRONIZED    reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    THROW           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    TRY             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    IDENT           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BOOLEAN         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    VOID            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BYTE            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SHORT           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    INT             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LONG            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CHAR            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FLOAT           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DOUBLE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    PUBLIC          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    PROTECTED       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    PRIVATE         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    STATIC          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ABSTRACT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FINAL           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    NATIVE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    TRANSIENT       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    VOLATILE        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    STRICTFP        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    THIS            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SUPER           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    INC             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DEC             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    NEW             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LSS             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LPAREN          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ATRATE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    HEX_LIT         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    OCTAL_LIT       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BINARY_LIT      reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DECIMAL_LIT     reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FLOAT_HEX_LIT   reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FLOAT_DEC_LIT   reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CHAR_LIT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    STRING_LIT      reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BOOL_LIT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    NULL_LIT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CLASS           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    INTERFACE       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    RBRACE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CASE            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DEFAULT         reduce using rule 184 (statement -> statement_without_trailing_substatement .)


state 123

    (185) statement -> labeled_statement .

    $end            reduce using rule 185 (statement -> labeled_statement .)
    WHILE           reduce using rule 185 (statement -> labeled_statement .)
    IF              reduce using rule 185 (statement -> labeled_statement .)
    FOR             reduce using rule 185 (statement -> labeled_statement .)
    LBRACE          reduce using rule 185 (statement -> labeled_statement .)
    ASSERT          reduce using rule 185 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 185 (statement -> labeled_statement .)
    SWITCH          reduce using rule 185 (statement -> labeled_statement .)
    DO              reduce using rule 185 (statement -> labeled_statement .)
    BREAK           reduce using rule 185 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 185 (statement -> labeled_statement .)
    RETURN          reduce using rule 185 (statement -> labeled_statement .)
    SYNCHRONIZED    reduce using rule 185 (statement -> labeled_statement .)
    THROW           reduce using rule 185 (statement -> labeled_statement .)
    TRY             reduce using rule 185 (statement -> labeled_statement .)
    IDENT           reduce using rule 185 (statement -> labeled_statement .)
    BOOLEAN         reduce using rule 185 (statement -> labeled_statement .)
    VOID            reduce using rule 185 (statement -> labeled_statement .)
    BYTE            reduce using rule 185 (statement -> labeled_statement .)
    SHORT           reduce using rule 185 (statement -> labeled_statement .)
    INT             reduce using rule 185 (statement -> labeled_statement .)
    LONG            reduce using rule 185 (statement -> labeled_statement .)
    CHAR            reduce using rule 185 (statement -> labeled_statement .)
    FLOAT           reduce using rule 185 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 185 (statement -> labeled_statement .)
    PUBLIC          reduce using rule 185 (statement -> labeled_statement .)
    PROTECTED       reduce using rule 185 (statement -> labeled_statement .)
    PRIVATE         reduce using rule 185 (statement -> labeled_statement .)
    STATIC          reduce using rule 185 (statement -> labeled_statement .)
    ABSTRACT        reduce using rule 185 (statement -> labeled_statement .)
    FINAL           reduce using rule 185 (statement -> labeled_statement .)
    NATIVE          reduce using rule 185 (statement -> labeled_statement .)
    TRANSIENT       reduce using rule 185 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 185 (statement -> labeled_statement .)
    STRICTFP        reduce using rule 185 (statement -> labeled_statement .)
    THIS            reduce using rule 185 (statement -> labeled_statement .)
    SUPER           reduce using rule 185 (statement -> labeled_statement .)
    INC             reduce using rule 185 (statement -> labeled_statement .)
    DEC             reduce using rule 185 (statement -> labeled_statement .)
    NEW             reduce using rule 185 (statement -> labeled_statement .)
    LSS             reduce using rule 185 (statement -> labeled_statement .)
    LPAREN          reduce using rule 185 (statement -> labeled_statement .)
    ATRATE          reduce using rule 185 (statement -> labeled_statement .)
    HEX_LIT         reduce using rule 185 (statement -> labeled_statement .)
    OCTAL_LIT       reduce using rule 185 (statement -> labeled_statement .)
    BINARY_LIT      reduce using rule 185 (statement -> labeled_statement .)
    DECIMAL_LIT     reduce using rule 185 (statement -> labeled_statement .)
    FLOAT_HEX_LIT   reduce using rule 185 (statement -> labeled_statement .)
    FLOAT_DEC_LIT   reduce using rule 185 (statement -> labeled_statement .)
    CHAR_LIT        reduce using rule 185 (statement -> labeled_statement .)
    STRING_LIT      reduce using rule 185 (statement -> labeled_statement .)
    BOOL_LIT        reduce using rule 185 (statement -> labeled_statement .)
    NULL_LIT        reduce using rule 185 (statement -> labeled_statement .)
    CLASS           reduce using rule 185 (statement -> labeled_statement .)
    INTERFACE       reduce using rule 185 (statement -> labeled_statement .)
    RBRACE          reduce using rule 185 (statement -> labeled_statement .)
    CASE            reduce using rule 185 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 185 (statement -> labeled_statement .)


state 124

    (186) statement -> if_then_statement .

    $end            reduce using rule 186 (statement -> if_then_statement .)
    WHILE           reduce using rule 186 (statement -> if_then_statement .)
    IF              reduce using rule 186 (statement -> if_then_statement .)
    FOR             reduce using rule 186 (statement -> if_then_statement .)
    LBRACE          reduce using rule 186 (statement -> if_then_statement .)
    ASSERT          reduce using rule 186 (statement -> if_then_statement .)
    SEMICOLON       reduce using rule 186 (statement -> if_then_statement .)
    SWITCH          reduce using rule 186 (statement -> if_then_statement .)
    DO              reduce using rule 186 (statement -> if_then_statement .)
    BREAK           reduce using rule 186 (statement -> if_then_statement .)
    CONTINUE        reduce using rule 186 (statement -> if_then_statement .)
    RETURN          reduce using rule 186 (statement -> if_then_statement .)
    SYNCHRONIZED    reduce using rule 186 (statement -> if_then_statement .)
    THROW           reduce using rule 186 (statement -> if_then_statement .)
    TRY             reduce using rule 186 (statement -> if_then_statement .)
    IDENT           reduce using rule 186 (statement -> if_then_statement .)
    BOOLEAN         reduce using rule 186 (statement -> if_then_statement .)
    VOID            reduce using rule 186 (statement -> if_then_statement .)
    BYTE            reduce using rule 186 (statement -> if_then_statement .)
    SHORT           reduce using rule 186 (statement -> if_then_statement .)
    INT             reduce using rule 186 (statement -> if_then_statement .)
    LONG            reduce using rule 186 (statement -> if_then_statement .)
    CHAR            reduce using rule 186 (statement -> if_then_statement .)
    FLOAT           reduce using rule 186 (statement -> if_then_statement .)
    DOUBLE          reduce using rule 186 (statement -> if_then_statement .)
    PUBLIC          reduce using rule 186 (statement -> if_then_statement .)
    PROTECTED       reduce using rule 186 (statement -> if_then_statement .)
    PRIVATE         reduce using rule 186 (statement -> if_then_statement .)
    STATIC          reduce using rule 186 (statement -> if_then_statement .)
    ABSTRACT        reduce using rule 186 (statement -> if_then_statement .)
    FINAL           reduce using rule 186 (statement -> if_then_statement .)
    NATIVE          reduce using rule 186 (statement -> if_then_statement .)
    TRANSIENT       reduce using rule 186 (statement -> if_then_statement .)
    VOLATILE        reduce using rule 186 (statement -> if_then_statement .)
    STRICTFP        reduce using rule 186 (statement -> if_then_statement .)
    THIS            reduce using rule 186 (statement -> if_then_statement .)
    SUPER           reduce using rule 186 (statement -> if_then_statement .)
    INC             reduce using rule 186 (statement -> if_then_statement .)
    DEC             reduce using rule 186 (statement -> if_then_statement .)
    NEW             reduce using rule 186 (statement -> if_then_statement .)
    LSS             reduce using rule 186 (statement -> if_then_statement .)
    LPAREN          reduce using rule 186 (statement -> if_then_statement .)
    ATRATE          reduce using rule 186 (statement -> if_then_statement .)
    HEX_LIT         reduce using rule 186 (statement -> if_then_statement .)
    OCTAL_LIT       reduce using rule 186 (statement -> if_then_statement .)
    BINARY_LIT      reduce using rule 186 (statement -> if_then_statement .)
    DECIMAL_LIT     reduce using rule 186 (statement -> if_then_statement .)
    FLOAT_HEX_LIT   reduce using rule 186 (statement -> if_then_statement .)
    FLOAT_DEC_LIT   reduce using rule 186 (statement -> if_then_statement .)
    CHAR_LIT        reduce using rule 186 (statement -> if_then_statement .)
    STRING_LIT      reduce using rule 186 (statement -> if_then_statement .)
    BOOL_LIT        reduce using rule 186 (statement -> if_then_statement .)
    NULL_LIT        reduce using rule 186 (statement -> if_then_statement .)
    CLASS           reduce using rule 186 (statement -> if_then_statement .)
    INTERFACE       reduce using rule 186 (statement -> if_then_statement .)
    RBRACE          reduce using rule 186 (statement -> if_then_statement .)
    CASE            reduce using rule 186 (statement -> if_then_statement .)
    DEFAULT         reduce using rule 186 (statement -> if_then_statement .)


state 125

    (187) statement -> if_then_else_statement .

    $end            reduce using rule 187 (statement -> if_then_else_statement .)
    WHILE           reduce using rule 187 (statement -> if_then_else_statement .)
    IF              reduce using rule 187 (statement -> if_then_else_statement .)
    FOR             reduce using rule 187 (statement -> if_then_else_statement .)
    LBRACE          reduce using rule 187 (statement -> if_then_else_statement .)
    ASSERT          reduce using rule 187 (statement -> if_then_else_statement .)
    SEMICOLON       reduce using rule 187 (statement -> if_then_else_statement .)
    SWITCH          reduce using rule 187 (statement -> if_then_else_statement .)
    DO              reduce using rule 187 (statement -> if_then_else_statement .)
    BREAK           reduce using rule 187 (statement -> if_then_else_statement .)
    CONTINUE        reduce using rule 187 (statement -> if_then_else_statement .)
    RETURN          reduce using rule 187 (statement -> if_then_else_statement .)
    SYNCHRONIZED    reduce using rule 187 (statement -> if_then_else_statement .)
    THROW           reduce using rule 187 (statement -> if_then_else_statement .)
    TRY             reduce using rule 187 (statement -> if_then_else_statement .)
    IDENT           reduce using rule 187 (statement -> if_then_else_statement .)
    BOOLEAN         reduce using rule 187 (statement -> if_then_else_statement .)
    VOID            reduce using rule 187 (statement -> if_then_else_statement .)
    BYTE            reduce using rule 187 (statement -> if_then_else_statement .)
    SHORT           reduce using rule 187 (statement -> if_then_else_statement .)
    INT             reduce using rule 187 (statement -> if_then_else_statement .)
    LONG            reduce using rule 187 (statement -> if_then_else_statement .)
    CHAR            reduce using rule 187 (statement -> if_then_else_statement .)
    FLOAT           reduce using rule 187 (statement -> if_then_else_statement .)
    DOUBLE          reduce using rule 187 (statement -> if_then_else_statement .)
    PUBLIC          reduce using rule 187 (statement -> if_then_else_statement .)
    PROTECTED       reduce using rule 187 (statement -> if_then_else_statement .)
    PRIVATE         reduce using rule 187 (statement -> if_then_else_statement .)
    STATIC          reduce using rule 187 (statement -> if_then_else_statement .)
    ABSTRACT        reduce using rule 187 (statement -> if_then_else_statement .)
    FINAL           reduce using rule 187 (statement -> if_then_else_statement .)
    NATIVE          reduce using rule 187 (statement -> if_then_else_statement .)
    TRANSIENT       reduce using rule 187 (statement -> if_then_else_statement .)
    VOLATILE        reduce using rule 187 (statement -> if_then_else_statement .)
    STRICTFP        reduce using rule 187 (statement -> if_then_else_statement .)
    THIS            reduce using rule 187 (statement -> if_then_else_statement .)
    SUPER           reduce using rule 187 (statement -> if_then_else_statement .)
    INC             reduce using rule 187 (statement -> if_then_else_statement .)
    DEC             reduce using rule 187 (statement -> if_then_else_statement .)
    NEW             reduce using rule 187 (statement -> if_then_else_statement .)
    LSS             reduce using rule 187 (statement -> if_then_else_statement .)
    LPAREN          reduce using rule 187 (statement -> if_then_else_statement .)
    ATRATE          reduce using rule 187 (statement -> if_then_else_statement .)
    HEX_LIT         reduce using rule 187 (statement -> if_then_else_statement .)
    OCTAL_LIT       reduce using rule 187 (statement -> if_then_else_statement .)
    BINARY_LIT      reduce using rule 187 (statement -> if_then_else_statement .)
    DECIMAL_LIT     reduce using rule 187 (statement -> if_then_else_statement .)
    FLOAT_HEX_LIT   reduce using rule 187 (statement -> if_then_else_statement .)
    FLOAT_DEC_LIT   reduce using rule 187 (statement -> if_then_else_statement .)
    CHAR_LIT        reduce using rule 187 (statement -> if_then_else_statement .)
    STRING_LIT      reduce using rule 187 (statement -> if_then_else_statement .)
    BOOL_LIT        reduce using rule 187 (statement -> if_then_else_statement .)
    NULL_LIT        reduce using rule 187 (statement -> if_then_else_statement .)
    CLASS           reduce using rule 187 (statement -> if_then_else_statement .)
    INTERFACE       reduce using rule 187 (statement -> if_then_else_statement .)
    RBRACE          reduce using rule 187 (statement -> if_then_else_statement .)
    CASE            reduce using rule 187 (statement -> if_then_else_statement .)
    DEFAULT         reduce using rule 187 (statement -> if_then_else_statement .)


state 126

    (188) statement -> while_statement .

    $end            reduce using rule 188 (statement -> while_statement .)
    WHILE           reduce using rule 188 (statement -> while_statement .)
    IF              reduce using rule 188 (statement -> while_statement .)
    FOR             reduce using rule 188 (statement -> while_statement .)
    LBRACE          reduce using rule 188 (statement -> while_statement .)
    ASSERT          reduce using rule 188 (statement -> while_statement .)
    SEMICOLON       reduce using rule 188 (statement -> while_statement .)
    SWITCH          reduce using rule 188 (statement -> while_statement .)
    DO              reduce using rule 188 (statement -> while_statement .)
    BREAK           reduce using rule 188 (statement -> while_statement .)
    CONTINUE        reduce using rule 188 (statement -> while_statement .)
    RETURN          reduce using rule 188 (statement -> while_statement .)
    SYNCHRONIZED    reduce using rule 188 (statement -> while_statement .)
    THROW           reduce using rule 188 (statement -> while_statement .)
    TRY             reduce using rule 188 (statement -> while_statement .)
    IDENT           reduce using rule 188 (statement -> while_statement .)
    BOOLEAN         reduce using rule 188 (statement -> while_statement .)
    VOID            reduce using rule 188 (statement -> while_statement .)
    BYTE            reduce using rule 188 (statement -> while_statement .)
    SHORT           reduce using rule 188 (statement -> while_statement .)
    INT             reduce using rule 188 (statement -> while_statement .)
    LONG            reduce using rule 188 (statement -> while_statement .)
    CHAR            reduce using rule 188 (statement -> while_statement .)
    FLOAT           reduce using rule 188 (statement -> while_statement .)
    DOUBLE          reduce using rule 188 (statement -> while_statement .)
    PUBLIC          reduce using rule 188 (statement -> while_statement .)
    PROTECTED       reduce using rule 188 (statement -> while_statement .)
    PRIVATE         reduce using rule 188 (statement -> while_statement .)
    STATIC          reduce using rule 188 (statement -> while_statement .)
    ABSTRACT        reduce using rule 188 (statement -> while_statement .)
    FINAL           reduce using rule 188 (statement -> while_statement .)
    NATIVE          reduce using rule 188 (statement -> while_statement .)
    TRANSIENT       reduce using rule 188 (statement -> while_statement .)
    VOLATILE        reduce using rule 188 (statement -> while_statement .)
    STRICTFP        reduce using rule 188 (statement -> while_statement .)
    THIS            reduce using rule 188 (statement -> while_statement .)
    SUPER           reduce using rule 188 (statement -> while_statement .)
    INC             reduce using rule 188 (statement -> while_statement .)
    DEC             reduce using rule 188 (statement -> while_statement .)
    NEW             reduce using rule 188 (statement -> while_statement .)
    LSS             reduce using rule 188 (statement -> while_statement .)
    LPAREN          reduce using rule 188 (statement -> while_statement .)
    ATRATE          reduce using rule 188 (statement -> while_statement .)
    HEX_LIT         reduce using rule 188 (statement -> while_statement .)
    OCTAL_LIT       reduce using rule 188 (statement -> while_statement .)
    BINARY_LIT      reduce using rule 188 (statement -> while_statement .)
    DECIMAL_LIT     reduce using rule 188 (statement -> while_statement .)
    FLOAT_HEX_LIT   reduce using rule 188 (statement -> while_statement .)
    FLOAT_DEC_LIT   reduce using rule 188 (statement -> while_statement .)
    CHAR_LIT        reduce using rule 188 (statement -> while_statement .)
    STRING_LIT      reduce using rule 188 (statement -> while_statement .)
    BOOL_LIT        reduce using rule 188 (statement -> while_statement .)
    NULL_LIT        reduce using rule 188 (statement -> while_statement .)
    CLASS           reduce using rule 188 (statement -> while_statement .)
    INTERFACE       reduce using rule 188 (statement -> while_statement .)
    RBRACE          reduce using rule 188 (statement -> while_statement .)
    CASE            reduce using rule 188 (statement -> while_statement .)
    DEFAULT         reduce using rule 188 (statement -> while_statement .)


state 127

    (189) statement -> for_statement .

    $end            reduce using rule 189 (statement -> for_statement .)
    WHILE           reduce using rule 189 (statement -> for_statement .)
    IF              reduce using rule 189 (statement -> for_statement .)
    FOR             reduce using rule 189 (statement -> for_statement .)
    LBRACE          reduce using rule 189 (statement -> for_statement .)
    ASSERT          reduce using rule 189 (statement -> for_statement .)
    SEMICOLON       reduce using rule 189 (statement -> for_statement .)
    SWITCH          reduce using rule 189 (statement -> for_statement .)
    DO              reduce using rule 189 (statement -> for_statement .)
    BREAK           reduce using rule 189 (statement -> for_statement .)
    CONTINUE        reduce using rule 189 (statement -> for_statement .)
    RETURN          reduce using rule 189 (statement -> for_statement .)
    SYNCHRONIZED    reduce using rule 189 (statement -> for_statement .)
    THROW           reduce using rule 189 (statement -> for_statement .)
    TRY             reduce using rule 189 (statement -> for_statement .)
    IDENT           reduce using rule 189 (statement -> for_statement .)
    BOOLEAN         reduce using rule 189 (statement -> for_statement .)
    VOID            reduce using rule 189 (statement -> for_statement .)
    BYTE            reduce using rule 189 (statement -> for_statement .)
    SHORT           reduce using rule 189 (statement -> for_statement .)
    INT             reduce using rule 189 (statement -> for_statement .)
    LONG            reduce using rule 189 (statement -> for_statement .)
    CHAR            reduce using rule 189 (statement -> for_statement .)
    FLOAT           reduce using rule 189 (statement -> for_statement .)
    DOUBLE          reduce using rule 189 (statement -> for_statement .)
    PUBLIC          reduce using rule 189 (statement -> for_statement .)
    PROTECTED       reduce using rule 189 (statement -> for_statement .)
    PRIVATE         reduce using rule 189 (statement -> for_statement .)
    STATIC          reduce using rule 189 (statement -> for_statement .)
    ABSTRACT        reduce using rule 189 (statement -> for_statement .)
    FINAL           reduce using rule 189 (statement -> for_statement .)
    NATIVE          reduce using rule 189 (statement -> for_statement .)
    TRANSIENT       reduce using rule 189 (statement -> for_statement .)
    VOLATILE        reduce using rule 189 (statement -> for_statement .)
    STRICTFP        reduce using rule 189 (statement -> for_statement .)
    THIS            reduce using rule 189 (statement -> for_statement .)
    SUPER           reduce using rule 189 (statement -> for_statement .)
    INC             reduce using rule 189 (statement -> for_statement .)
    DEC             reduce using rule 189 (statement -> for_statement .)
    NEW             reduce using rule 189 (statement -> for_statement .)
    LSS             reduce using rule 189 (statement -> for_statement .)
    LPAREN          reduce using rule 189 (statement -> for_statement .)
    ATRATE          reduce using rule 189 (statement -> for_statement .)
    HEX_LIT         reduce using rule 189 (statement -> for_statement .)
    OCTAL_LIT       reduce using rule 189 (statement -> for_statement .)
    BINARY_LIT      reduce using rule 189 (statement -> for_statement .)
    DECIMAL_LIT     reduce using rule 189 (statement -> for_statement .)
    FLOAT_HEX_LIT   reduce using rule 189 (statement -> for_statement .)
    FLOAT_DEC_LIT   reduce using rule 189 (statement -> for_statement .)
    CHAR_LIT        reduce using rule 189 (statement -> for_statement .)
    STRING_LIT      reduce using rule 189 (statement -> for_statement .)
    BOOL_LIT        reduce using rule 189 (statement -> for_statement .)
    NULL_LIT        reduce using rule 189 (statement -> for_statement .)
    CLASS           reduce using rule 189 (statement -> for_statement .)
    INTERFACE       reduce using rule 189 (statement -> for_statement .)
    RBRACE          reduce using rule 189 (statement -> for_statement .)
    CASE            reduce using rule 189 (statement -> for_statement .)
    DEFAULT         reduce using rule 189 (statement -> for_statement .)


state 128

    (190) statement -> enhanced_for_statement .

    $end            reduce using rule 190 (statement -> enhanced_for_statement .)
    WHILE           reduce using rule 190 (statement -> enhanced_for_statement .)
    IF              reduce using rule 190 (statement -> enhanced_for_statement .)
    FOR             reduce using rule 190 (statement -> enhanced_for_statement .)
    LBRACE          reduce using rule 190 (statement -> enhanced_for_statement .)
    ASSERT          reduce using rule 190 (statement -> enhanced_for_statement .)
    SEMICOLON       reduce using rule 190 (statement -> enhanced_for_statement .)
    SWITCH          reduce using rule 190 (statement -> enhanced_for_statement .)
    DO              reduce using rule 190 (statement -> enhanced_for_statement .)
    BREAK           reduce using rule 190 (statement -> enhanced_for_statement .)
    CONTINUE        reduce using rule 190 (statement -> enhanced_for_statement .)
    RETURN          reduce using rule 190 (statement -> enhanced_for_statement .)
    SYNCHRONIZED    reduce using rule 190 (statement -> enhanced_for_statement .)
    THROW           reduce using rule 190 (statement -> enhanced_for_statement .)
    TRY             reduce using rule 190 (statement -> enhanced_for_statement .)
    IDENT           reduce using rule 190 (statement -> enhanced_for_statement .)
    BOOLEAN         reduce using rule 190 (statement -> enhanced_for_statement .)
    VOID            reduce using rule 190 (statement -> enhanced_for_statement .)
    BYTE            reduce using rule 190 (statement -> enhanced_for_statement .)
    SHORT           reduce using rule 190 (statement -> enhanced_for_statement .)
    INT             reduce using rule 190 (statement -> enhanced_for_statement .)
    LONG            reduce using rule 190 (statement -> enhanced_for_statement .)
    CHAR            reduce using rule 190 (statement -> enhanced_for_statement .)
    FLOAT           reduce using rule 190 (statement -> enhanced_for_statement .)
    DOUBLE          reduce using rule 190 (statement -> enhanced_for_statement .)
    PUBLIC          reduce using rule 190 (statement -> enhanced_for_statement .)
    PROTECTED       reduce using rule 190 (statement -> enhanced_for_statement .)
    PRIVATE         reduce using rule 190 (statement -> enhanced_for_statement .)
    STATIC          reduce using rule 190 (statement -> enhanced_for_statement .)
    ABSTRACT        reduce using rule 190 (statement -> enhanced_for_statement .)
    FINAL           reduce using rule 190 (statement -> enhanced_for_statement .)
    NATIVE          reduce using rule 190 (statement -> enhanced_for_statement .)
    TRANSIENT       reduce using rule 190 (statement -> enhanced_for_statement .)
    VOLATILE        reduce using rule 190 (statement -> enhanced_for_statement .)
    STRICTFP        reduce using rule 190 (statement -> enhanced_for_statement .)
    THIS            reduce using rule 190 (statement -> enhanced_for_statement .)
    SUPER           reduce using rule 190 (statement -> enhanced_for_statement .)
    INC             reduce using rule 190 (statement -> enhanced_for_statement .)
    DEC             reduce using rule 190 (statement -> enhanced_for_statement .)
    NEW             reduce using rule 190 (statement -> enhanced_for_statement .)
    LSS             reduce using rule 190 (statement -> enhanced_for_statement .)
    LPAREN          reduce using rule 190 (statement -> enhanced_for_statement .)
    ATRATE          reduce using rule 190 (statement -> enhanced_for_statement .)
    HEX_LIT         reduce using rule 190 (statement -> enhanced_for_statement .)
    OCTAL_LIT       reduce using rule 190 (statement -> enhanced_for_statement .)
    BINARY_LIT      reduce using rule 190 (statement -> enhanced_for_statement .)
    DECIMAL_LIT     reduce using rule 190 (statement -> enhanced_for_statement .)
    FLOAT_HEX_LIT   reduce using rule 190 (statement -> enhanced_for_statement .)
    FLOAT_DEC_LIT   reduce using rule 190 (statement -> enhanced_for_statement .)
    CHAR_LIT        reduce using rule 190 (statement -> enhanced_for_statement .)
    STRING_LIT      reduce using rule 190 (statement -> enhanced_for_statement .)
    BOOL_LIT        reduce using rule 190 (statement -> enhanced_for_statement .)
    NULL_LIT        reduce using rule 190 (statement -> enhanced_for_statement .)
    CLASS           reduce using rule 190 (statement -> enhanced_for_statement .)
    INTERFACE       reduce using rule 190 (statement -> enhanced_for_statement .)
    RBRACE          reduce using rule 190 (statement -> enhanced_for_statement .)
    CASE            reduce using rule 190 (statement -> enhanced_for_statement .)
    DEFAULT         reduce using rule 190 (statement -> enhanced_for_statement .)


state 129

    (175) local_variable_declaration -> type . variable_declarators
    (177) variable_declarators -> . variable_declarator
    (178) variable_declarators -> . variable_declarators COMMA variable_declarator
    (179) variable_declarator -> . variable_declarator_id
    (180) variable_declarator -> . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarators           shift and go to state 310
    variable_declarator            shift and go to state 311
    variable_declarator_id         shift and go to state 312

state 130

    (176) local_variable_declaration -> modifiers . type variable_declarators
    (366) modifiers -> modifiers . modifier
    (363) modifiers_opt -> modifiers .
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (548) annotation_name -> . ATRATE name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    CLASS           reduce using rule 363 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 363 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ATRATE          shift and go to state 47
    IDENT           shift and go to state 196

    type                           shift and go to state 314
    modifier                       shift and go to state 194
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    annotation                     shift and go to state 37
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    annotation_name                shift and go to state 45
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 131

    (191) statement_without_trailing_substatement -> block .

    $end            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    WHILE           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    IF              reduce using rule 191 (statement_without_trailing_substatement -> block .)
    FOR             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    LBRACE          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    ASSERT          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    SEMICOLON       reduce using rule 191 (statement_without_trailing_substatement -> block .)
    SWITCH          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    DO              reduce using rule 191 (statement_without_trailing_substatement -> block .)
    BREAK           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    CONTINUE        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    RETURN          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    SYNCHRONIZED    reduce using rule 191 (statement_without_trailing_substatement -> block .)
    THROW           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    TRY             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    IDENT           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    BOOLEAN         reduce using rule 191 (statement_without_trailing_substatement -> block .)
    VOID            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    BYTE            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    SHORT           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    INT             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    LONG            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    CHAR            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    FLOAT           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    DOUBLE          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    PUBLIC          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    PROTECTED       reduce using rule 191 (statement_without_trailing_substatement -> block .)
    PRIVATE         reduce using rule 191 (statement_without_trailing_substatement -> block .)
    STATIC          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    ABSTRACT        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    FINAL           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    NATIVE          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    TRANSIENT       reduce using rule 191 (statement_without_trailing_substatement -> block .)
    VOLATILE        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    STRICTFP        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    THIS            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    SUPER           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    INC             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    DEC             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    NEW             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    LSS             reduce using rule 191 (statement_without_trailing_substatement -> block .)
    LPAREN          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    ATRATE          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    HEX_LIT         reduce using rule 191 (statement_without_trailing_substatement -> block .)
    OCTAL_LIT       reduce using rule 191 (statement_without_trailing_substatement -> block .)
    BINARY_LIT      reduce using rule 191 (statement_without_trailing_substatement -> block .)
    DECIMAL_LIT     reduce using rule 191 (statement_without_trailing_substatement -> block .)
    FLOAT_HEX_LIT   reduce using rule 191 (statement_without_trailing_substatement -> block .)
    FLOAT_DEC_LIT   reduce using rule 191 (statement_without_trailing_substatement -> block .)
    CHAR_LIT        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    STRING_LIT      reduce using rule 191 (statement_without_trailing_substatement -> block .)
    BOOL_LIT        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    NULL_LIT        reduce using rule 191 (statement_without_trailing_substatement -> block .)
    CLASS           reduce using rule 191 (statement_without_trailing_substatement -> block .)
    INTERFACE       reduce using rule 191 (statement_without_trailing_substatement -> block .)
    RBRACE          reduce using rule 191 (statement_without_trailing_substatement -> block .)
    CASE            reduce using rule 191 (statement_without_trailing_substatement -> block .)
    DEFAULT         reduce using rule 191 (statement_without_trailing_substatement -> block .)
    ELSE            reduce using rule 191 (statement_without_trailing_substatement -> block .)


state 132

    (192) statement_without_trailing_substatement -> expression_statement .

    $end            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    WHILE           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    IF              reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    FOR             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    LBRACE          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    ASSERT          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    SEMICOLON       reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    SWITCH          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    DO              reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    BREAK           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    CONTINUE        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    RETURN          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    SYNCHRONIZED    reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    THROW           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    TRY             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    IDENT           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    BOOLEAN         reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    VOID            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    BYTE            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    SHORT           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    INT             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    LONG            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    CHAR            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    FLOAT           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    DOUBLE          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    PUBLIC          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    PROTECTED       reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    PRIVATE         reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    STATIC          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    ABSTRACT        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    FINAL           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    NATIVE          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    TRANSIENT       reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    VOLATILE        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    STRICTFP        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    THIS            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    SUPER           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    INC             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    DEC             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    NEW             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    LSS             reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    LPAREN          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    ATRATE          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    HEX_LIT         reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    OCTAL_LIT       reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    BINARY_LIT      reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    DECIMAL_LIT     reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    FLOAT_HEX_LIT   reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    FLOAT_DEC_LIT   reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    CHAR_LIT        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    STRING_LIT      reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    BOOL_LIT        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    NULL_LIT        reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    CLASS           reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    INTERFACE       reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    RBRACE          reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    CASE            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    DEFAULT         reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)
    ELSE            reduce using rule 192 (statement_without_trailing_substatement -> expression_statement .)


state 133

    (193) statement_without_trailing_substatement -> assert_statement .

    $end            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    WHILE           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    IF              reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    FOR             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    LBRACE          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    ASSERT          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    SEMICOLON       reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    SWITCH          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    DO              reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    BREAK           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    CONTINUE        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    RETURN          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    SYNCHRONIZED    reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    THROW           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    TRY             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    IDENT           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    BOOLEAN         reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    VOID            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    BYTE            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    SHORT           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    INT             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    LONG            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    CHAR            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    FLOAT           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    DOUBLE          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    PUBLIC          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    PROTECTED       reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    PRIVATE         reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    STATIC          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    ABSTRACT        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    FINAL           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    NATIVE          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    TRANSIENT       reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    VOLATILE        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    STRICTFP        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    THIS            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    SUPER           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    INC             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    DEC             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    NEW             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    LSS             reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    LPAREN          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    ATRATE          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    HEX_LIT         reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    OCTAL_LIT       reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    BINARY_LIT      reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    DECIMAL_LIT     reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    FLOAT_HEX_LIT   reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    FLOAT_DEC_LIT   reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    CHAR_LIT        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    STRING_LIT      reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    BOOL_LIT        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    NULL_LIT        reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    CLASS           reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    INTERFACE       reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    RBRACE          reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    CASE            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    DEFAULT         reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)
    ELSE            reduce using rule 193 (statement_without_trailing_substatement -> assert_statement .)


state 134

    (194) statement_without_trailing_substatement -> empty_statement .

    $end            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    WHILE           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    IF              reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    FOR             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    LBRACE          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    ASSERT          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    SEMICOLON       reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    SWITCH          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    DO              reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    BREAK           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    CONTINUE        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    RETURN          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    SYNCHRONIZED    reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    THROW           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    TRY             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    IDENT           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    BOOLEAN         reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    VOID            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    BYTE            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    SHORT           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    INT             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    LONG            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    CHAR            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    FLOAT           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    DOUBLE          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    PUBLIC          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    PROTECTED       reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    PRIVATE         reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    STATIC          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    ABSTRACT        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    FINAL           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    NATIVE          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    TRANSIENT       reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    VOLATILE        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    STRICTFP        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    THIS            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    SUPER           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    INC             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    DEC             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    NEW             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    LSS             reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    LPAREN          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    ATRATE          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    HEX_LIT         reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    OCTAL_LIT       reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    BINARY_LIT      reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    DECIMAL_LIT     reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    FLOAT_HEX_LIT   reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    FLOAT_DEC_LIT   reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    CHAR_LIT        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    STRING_LIT      reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    BOOL_LIT        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    NULL_LIT        reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    CLASS           reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    INTERFACE       reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    RBRACE          reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    CASE            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    DEFAULT         reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)
    ELSE            reduce using rule 194 (statement_without_trailing_substatement -> empty_statement .)


state 135

    (195) statement_without_trailing_substatement -> switch_statement .

    $end            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    WHILE           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    IF              reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    FOR             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    LBRACE          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    ASSERT          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    SEMICOLON       reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    SWITCH          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    DO              reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    BREAK           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    CONTINUE        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    RETURN          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    SYNCHRONIZED    reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    THROW           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    TRY             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    IDENT           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    BOOLEAN         reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    VOID            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    BYTE            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    SHORT           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    INT             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    LONG            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    CHAR            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    FLOAT           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    DOUBLE          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    PUBLIC          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    PROTECTED       reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    PRIVATE         reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    STATIC          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    ABSTRACT        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    FINAL           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    NATIVE          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    TRANSIENT       reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    VOLATILE        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    STRICTFP        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    THIS            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    SUPER           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    INC             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    DEC             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    NEW             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    LSS             reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    LPAREN          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    ATRATE          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    HEX_LIT         reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    OCTAL_LIT       reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    BINARY_LIT      reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    DECIMAL_LIT     reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    FLOAT_HEX_LIT   reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    FLOAT_DEC_LIT   reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    CHAR_LIT        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    STRING_LIT      reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    BOOL_LIT        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    NULL_LIT        reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    CLASS           reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    INTERFACE       reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    RBRACE          reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    CASE            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    DEFAULT         reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)
    ELSE            reduce using rule 195 (statement_without_trailing_substatement -> switch_statement .)


state 136

    (196) statement_without_trailing_substatement -> do_statement .

    $end            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    WHILE           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    IF              reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    FOR             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    LBRACE          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    ASSERT          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    SEMICOLON       reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    SWITCH          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    DO              reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    BREAK           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    CONTINUE        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    RETURN          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    SYNCHRONIZED    reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    THROW           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    TRY             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    IDENT           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    BOOLEAN         reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    VOID            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    BYTE            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    SHORT           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    INT             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    LONG            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    CHAR            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    FLOAT           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    DOUBLE          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    PUBLIC          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    PROTECTED       reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    PRIVATE         reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    STATIC          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    ABSTRACT        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    FINAL           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    NATIVE          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    TRANSIENT       reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    VOLATILE        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    STRICTFP        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    THIS            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    SUPER           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    INC             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    DEC             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    NEW             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    LSS             reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    LPAREN          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    ATRATE          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    HEX_LIT         reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    OCTAL_LIT       reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    BINARY_LIT      reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    DECIMAL_LIT     reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    FLOAT_HEX_LIT   reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    FLOAT_DEC_LIT   reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    CHAR_LIT        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    STRING_LIT      reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    BOOL_LIT        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    NULL_LIT        reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    CLASS           reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    INTERFACE       reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    RBRACE          reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    CASE            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    DEFAULT         reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)
    ELSE            reduce using rule 196 (statement_without_trailing_substatement -> do_statement .)


state 137

    (197) statement_without_trailing_substatement -> break_statement .

    $end            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    WHILE           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    IF              reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    FOR             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    LBRACE          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    ASSERT          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    SEMICOLON       reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    SWITCH          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    DO              reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    BREAK           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    CONTINUE        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    RETURN          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    SYNCHRONIZED    reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    THROW           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    TRY             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    IDENT           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    BOOLEAN         reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    VOID            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    BYTE            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    SHORT           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    INT             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    LONG            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    CHAR            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    FLOAT           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    DOUBLE          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    PUBLIC          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    PROTECTED       reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    PRIVATE         reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    STATIC          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    ABSTRACT        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    FINAL           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    NATIVE          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    TRANSIENT       reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    VOLATILE        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    STRICTFP        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    THIS            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    SUPER           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    INC             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    DEC             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    NEW             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    LSS             reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    LPAREN          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    ATRATE          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    HEX_LIT         reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    OCTAL_LIT       reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    BINARY_LIT      reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    DECIMAL_LIT     reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    FLOAT_HEX_LIT   reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    FLOAT_DEC_LIT   reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    CHAR_LIT        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    STRING_LIT      reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    BOOL_LIT        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    NULL_LIT        reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    CLASS           reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    INTERFACE       reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    RBRACE          reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    CASE            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    DEFAULT         reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)
    ELSE            reduce using rule 197 (statement_without_trailing_substatement -> break_statement .)


state 138

    (198) statement_without_trailing_substatement -> continue_statement .

    $end            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    WHILE           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    IF              reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    FOR             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    LBRACE          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    ASSERT          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    SEMICOLON       reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    SWITCH          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    DO              reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    BREAK           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    CONTINUE        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    RETURN          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    SYNCHRONIZED    reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    THROW           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    TRY             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    IDENT           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    BOOLEAN         reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    VOID            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    BYTE            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    SHORT           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    INT             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    LONG            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    CHAR            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    FLOAT           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    DOUBLE          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    PUBLIC          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    PROTECTED       reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    PRIVATE         reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    STATIC          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    ABSTRACT        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    FINAL           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    NATIVE          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    TRANSIENT       reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    VOLATILE        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    STRICTFP        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    THIS            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    SUPER           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    INC             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    DEC             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    NEW             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    LSS             reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    LPAREN          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    ATRATE          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    HEX_LIT         reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    OCTAL_LIT       reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    BINARY_LIT      reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    DECIMAL_LIT     reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    FLOAT_HEX_LIT   reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    FLOAT_DEC_LIT   reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    CHAR_LIT        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    STRING_LIT      reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    BOOL_LIT        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    NULL_LIT        reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    CLASS           reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    INTERFACE       reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    RBRACE          reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    CASE            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    DEFAULT         reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)
    ELSE            reduce using rule 198 (statement_without_trailing_substatement -> continue_statement .)


state 139

    (199) statement_without_trailing_substatement -> return_statement .

    $end            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    WHILE           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    IF              reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    FOR             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    LBRACE          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    ASSERT          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    SEMICOLON       reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    SWITCH          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    DO              reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    BREAK           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    CONTINUE        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    RETURN          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    SYNCHRONIZED    reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    THROW           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    TRY             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    IDENT           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    BOOLEAN         reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    VOID            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    BYTE            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    SHORT           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    INT             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    LONG            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    CHAR            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    FLOAT           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    DOUBLE          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    PUBLIC          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    PROTECTED       reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    PRIVATE         reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    STATIC          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    ABSTRACT        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    FINAL           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    NATIVE          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    TRANSIENT       reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    VOLATILE        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    STRICTFP        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    THIS            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    SUPER           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    INC             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    DEC             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    NEW             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    LSS             reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    LPAREN          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    ATRATE          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    HEX_LIT         reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    OCTAL_LIT       reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    BINARY_LIT      reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    DECIMAL_LIT     reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    FLOAT_HEX_LIT   reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    FLOAT_DEC_LIT   reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    CHAR_LIT        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    STRING_LIT      reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    BOOL_LIT        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    NULL_LIT        reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    CLASS           reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    INTERFACE       reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    RBRACE          reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    CASE            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    DEFAULT         reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)
    ELSE            reduce using rule 199 (statement_without_trailing_substatement -> return_statement .)


state 140

    (200) statement_without_trailing_substatement -> synchronized_statement .

    $end            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    WHILE           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    IF              reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    FOR             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    LBRACE          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    ASSERT          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    SEMICOLON       reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    SWITCH          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    DO              reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    BREAK           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    CONTINUE        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    RETURN          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    SYNCHRONIZED    reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    THROW           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    TRY             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    IDENT           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    BOOLEAN         reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    VOID            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    BYTE            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    SHORT           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    INT             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    LONG            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    CHAR            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    FLOAT           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    DOUBLE          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    PUBLIC          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    PROTECTED       reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    PRIVATE         reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    STATIC          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    ABSTRACT        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    FINAL           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    NATIVE          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    TRANSIENT       reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    VOLATILE        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    STRICTFP        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    THIS            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    SUPER           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    INC             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    DEC             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    NEW             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    LSS             reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    LPAREN          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    ATRATE          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    HEX_LIT         reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    OCTAL_LIT       reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    BINARY_LIT      reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    DECIMAL_LIT     reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    FLOAT_HEX_LIT   reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    FLOAT_DEC_LIT   reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    CHAR_LIT        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    STRING_LIT      reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    BOOL_LIT        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    NULL_LIT        reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    CLASS           reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    INTERFACE       reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    RBRACE          reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    CASE            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    DEFAULT         reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)
    ELSE            reduce using rule 200 (statement_without_trailing_substatement -> synchronized_statement .)


state 141

    (201) statement_without_trailing_substatement -> throw_statement .

    $end            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    WHILE           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    IF              reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    FOR             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    LBRACE          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    ASSERT          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    SEMICOLON       reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    SWITCH          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    DO              reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    BREAK           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    CONTINUE        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    RETURN          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    SYNCHRONIZED    reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    THROW           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    TRY             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    IDENT           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    BOOLEAN         reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    VOID            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    BYTE            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    SHORT           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    INT             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    LONG            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    CHAR            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    FLOAT           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    DOUBLE          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    PUBLIC          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    PROTECTED       reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    PRIVATE         reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    STATIC          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    ABSTRACT        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    FINAL           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    NATIVE          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    TRANSIENT       reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    VOLATILE        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    STRICTFP        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    THIS            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    SUPER           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    INC             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    DEC             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    NEW             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    LSS             reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    LPAREN          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    ATRATE          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    HEX_LIT         reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    OCTAL_LIT       reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    BINARY_LIT      reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    DECIMAL_LIT     reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    FLOAT_HEX_LIT   reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    FLOAT_DEC_LIT   reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    CHAR_LIT        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    STRING_LIT      reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    BOOL_LIT        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    NULL_LIT        reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    CLASS           reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    INTERFACE       reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    RBRACE          reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    CASE            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    DEFAULT         reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)
    ELSE            reduce using rule 201 (statement_without_trailing_substatement -> throw_statement .)


state 142

    (202) statement_without_trailing_substatement -> try_statement .

    $end            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    WHILE           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    IF              reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    FOR             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    LBRACE          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    ASSERT          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    SEMICOLON       reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    SWITCH          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    DO              reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    BREAK           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    CONTINUE        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    RETURN          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    SYNCHRONIZED    reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    THROW           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    TRY             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    IDENT           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    BOOLEAN         reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    VOID            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    BYTE            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    SHORT           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    INT             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    LONG            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    CHAR            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    FLOAT           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    DOUBLE          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    PUBLIC          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    PROTECTED       reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    PRIVATE         reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    STATIC          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    ABSTRACT        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    FINAL           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    NATIVE          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    TRANSIENT       reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    VOLATILE        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    STRICTFP        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    THIS            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    SUPER           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    INC             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    DEC             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    NEW             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    LSS             reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    LPAREN          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    ATRATE          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    HEX_LIT         reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    OCTAL_LIT       reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    BINARY_LIT      reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    DECIMAL_LIT     reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    FLOAT_HEX_LIT   reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    FLOAT_DEC_LIT   reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    CHAR_LIT        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    STRING_LIT      reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    BOOL_LIT        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    NULL_LIT        reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    CLASS           reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    INTERFACE       reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    RBRACE          reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    CASE            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    DEFAULT         reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)
    ELSE            reduce using rule 202 (statement_without_trailing_substatement -> try_statement .)


state 143

    (203) statement_without_trailing_substatement -> try_statement_with_resources .

    $end            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    WHILE           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    IF              reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FOR             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    LBRACE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ASSERT          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SEMICOLON       reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SWITCH          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DO              reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BREAK           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CONTINUE        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    RETURN          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SYNCHRONIZED    reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    THROW           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    TRY             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    IDENT           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BOOLEAN         reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    VOID            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BYTE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SHORT           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    INT             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    LONG            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CHAR            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FLOAT           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DOUBLE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PUBLIC          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PROTECTED       reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PRIVATE         reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    STATIC          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ABSTRACT        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FINAL           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NATIVE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    TRANSIENT       reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    VOLATILE        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    STRICTFP        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    THIS            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SUPER           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    INC             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DEC             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NEW             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    LSS             reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    LPAREN          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ATRATE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    HEX_LIT         reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    OCTAL_LIT       reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BINARY_LIT      reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DECIMAL_LIT     reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FLOAT_HEX_LIT   reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FLOAT_DEC_LIT   reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CHAR_LIT        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    STRING_LIT      reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BOOL_LIT        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NULL_LIT        reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CLASS           reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    INTERFACE       reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    RBRACE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CASE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DEFAULT         reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ELSE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement_with_resources .)


state 144

    (227) labeled_statement -> label . COLON statement

    COLON           shift and go to state 317


state 145

    (230) if_then_statement -> IF . LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF . LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2

    LPAREN          shift and go to state 318


state 146

    (146) primary_no_new_array -> LPAREN . name RPAREN
    (147) primary_no_new_array -> LPAREN . expression_not_name RPAREN
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (2) expression_not_name -> . assignment_expression_not_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (5) assignment_expression_not_name -> . assignment
    (6) assignment_expression_not_name -> . conditional_expression_not_name
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    IDENT           shift and go to state 77
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274

    name                           shift and go to state 319
    expression_not_name            shift and go to state 247
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    assignment_expression_not_name shift and go to state 249
    assignment                     shift and go to state 250
    conditional_expression_not_name shift and go to state 251
    postfix_expression             shift and go to state 183
    conditional_or_expression_not_name shift and go to state 252
    primary                        shift and go to state 253
    post_increment_expression      shift and go to state 254
    post_decrement_expression      shift and go to state 255
    conditional_and_expression_not_name shift and go to state 256
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    inclusive_or_expression_not_name shift and go to state 257
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 89
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275

state 147

    (236) while_statement -> WHILE . inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (238) inc_for_while_stack -> .

    LPAREN          reduce using rule 238 (inc_for_while_stack -> .)

    inc_for_while_stack            shift and go to state 320

state 148

    (241) for_statement -> FOR . inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (260) enhanced_for_statement_header_init -> FOR . inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR . inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (238) inc_for_while_stack -> .

    LPAREN          reduce using rule 238 (inc_for_while_stack -> .)

    inc_for_while_stack            shift and go to state 321

state 149

    (257) enhanced_for_statement -> enhanced_for_statement_header . statement
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    enhanced_for_statement_header  shift and go to state 149
    statement                      shift and go to state 322
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 150

    (364) modifiers_opt -> empty .

    CLASS           reduce using rule 364 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 364 (modifiers_opt -> empty .)
    LSS             reduce using rule 364 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 364 (modifiers_opt -> empty .)
    VOID            reduce using rule 364 (modifiers_opt -> empty .)
    BYTE            reduce using rule 364 (modifiers_opt -> empty .)
    SHORT           reduce using rule 364 (modifiers_opt -> empty .)
    INT             reduce using rule 364 (modifiers_opt -> empty .)
    LONG            reduce using rule 364 (modifiers_opt -> empty .)
    CHAR            reduce using rule 364 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 364 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 364 (modifiers_opt -> empty .)
    IDENT           reduce using rule 364 (modifiers_opt -> empty .)


state 151

    (379) type -> primitive_type .
    (399) array_type -> primitive_type . dims
    (152) primary_no_new_array -> primitive_type . dims PERIOD CLASS
    (153) primary_no_new_array -> primitive_type . PERIOD CLASS
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    IDENT           reduce using rule 379 (type -> primitive_type .)
    PERIOD          shift and go to state 278
    LBRACK          shift and go to state 279

    dims                           shift and go to state 325
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 152

    (380) type -> reference_type .

    IDENT           reduce using rule 380 (type -> reference_type .)
    ELLIPSIS        reduce using rule 380 (type -> reference_type .)
    OR              reduce using rule 380 (type -> reference_type .)


state 153

    (165) block -> LBRACE . inc_scope block_statements_opt dec_scope RBRACE
    (584) inc_scope -> .

    IF              reduce using rule 584 (inc_scope -> .)
    WHILE           reduce using rule 584 (inc_scope -> .)
    FOR             reduce using rule 584 (inc_scope -> .)
    LBRACE          reduce using rule 584 (inc_scope -> .)
    ASSERT          reduce using rule 584 (inc_scope -> .)
    SEMICOLON       reduce using rule 584 (inc_scope -> .)
    SWITCH          reduce using rule 584 (inc_scope -> .)
    DO              reduce using rule 584 (inc_scope -> .)
    BREAK           reduce using rule 584 (inc_scope -> .)
    CONTINUE        reduce using rule 584 (inc_scope -> .)
    RETURN          reduce using rule 584 (inc_scope -> .)
    SYNCHRONIZED    reduce using rule 584 (inc_scope -> .)
    THROW           reduce using rule 584 (inc_scope -> .)
    TRY             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    PUBLIC          reduce using rule 584 (inc_scope -> .)
    PROTECTED       reduce using rule 584 (inc_scope -> .)
    PRIVATE         reduce using rule 584 (inc_scope -> .)
    STATIC          reduce using rule 584 (inc_scope -> .)
    ABSTRACT        reduce using rule 584 (inc_scope -> .)
    FINAL           reduce using rule 584 (inc_scope -> .)
    NATIVE          reduce using rule 584 (inc_scope -> .)
    TRANSIENT       reduce using rule 584 (inc_scope -> .)
    VOLATILE        reduce using rule 584 (inc_scope -> .)
    STRICTFP        reduce using rule 584 (inc_scope -> .)
    THIS            reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    LSS             reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    ATRATE          reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    RBRACE          reduce using rule 584 (inc_scope -> .)
    CLASS           reduce using rule 584 (inc_scope -> .)
    INTERFACE       reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 326

state 154

    (204) expression_statement -> statement_expression . SEMICOLON

    SEMICOLON       shift and go to state 327


state 155

    (205) expression_statement -> explicit_constructor_invocation .

    $end            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    WHILE           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    IF              reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    FOR             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    LBRACE          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    ASSERT          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    SEMICOLON       reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    SWITCH          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    DO              reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    BREAK           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    CONTINUE        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    RETURN          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    SYNCHRONIZED    reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    THROW           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    TRY             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    IDENT           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    BOOLEAN         reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    VOID            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    BYTE            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    SHORT           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    INT             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    LONG            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    CHAR            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    FLOAT           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    DOUBLE          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    PUBLIC          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    PROTECTED       reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    PRIVATE         reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    STATIC          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    ABSTRACT        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    FINAL           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    NATIVE          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    TRANSIENT       reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    VOLATILE        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    STRICTFP        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    THIS            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    SUPER           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    INC             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    DEC             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    NEW             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    LSS             reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    LPAREN          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    ATRATE          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    HEX_LIT         reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    OCTAL_LIT       reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    BINARY_LIT      reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    DECIMAL_LIT     reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    FLOAT_HEX_LIT   reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    FLOAT_DEC_LIT   reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    CHAR_LIT        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    STRING_LIT      reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    BOOL_LIT        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    NULL_LIT        reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    CLASS           reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    INTERFACE       reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    RBRACE          reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    CASE            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    DEFAULT         reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)
    ELSE            reduce using rule 205 (expression_statement -> explicit_constructor_invocation .)


state 156

    (268) assert_statement -> ASSERT . expression SEMICOLON
    (269) assert_statement -> ASSERT . expression COLON expression SEMICOLON
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 328
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 157

    (271) switch_statement -> SWITCH . LPAREN inc_scope expression RPAREN switch_block

    LPAREN          shift and go to state 329


state 158

    (284) do_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 330
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 159

    (285) break_statement -> BREAK . SEMICOLON
    (286) break_statement -> BREAK . IDENT SEMICOLON

    SEMICOLON       shift and go to state 331
    IDENT           shift and go to state 332


state 160

    (229) label -> IDENT .
    (220) method_invocation -> IDENT . LPAREN argument_list_opt RPAREN
    (351) simple_name -> IDENT .

    COLON           reduce using rule 229 (label -> IDENT .)
    LPAREN          shift and go to state 286
    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    IDENT           reduce using rule 351 (simple_name -> IDENT .)
    INC             reduce using rule 351 (simple_name -> IDENT .)
    DEC             reduce using rule 351 (simple_name -> IDENT .)
    ASSIGN          reduce using rule 351 (simple_name -> IDENT .)
    MUL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    QUO_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    REM_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    ADD_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SUB_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN_ASSIGN   reduce using rule 351 (simple_name -> IDENT .)
    AND_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    OR_ASSIGN       reduce using rule 351 (simple_name -> IDENT .)
    XOR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)


state 161

    (287) continue_statement -> CONTINUE . SEMICOLON
    (288) continue_statement -> CONTINUE . IDENT SEMICOLON

    SEMICOLON       shift and go to state 333
    IDENT           shift and go to state 334


state 162

    (289) return_statement -> RETURN . expression_opt SEMICOLON
    (252) expression_opt -> . expression
    (253) expression_opt -> . empty
    (1) expression -> . assignment_expression
    (583) empty -> .
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    SEMICOLON       reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression_opt                 shift and go to state 335
    expression                     shift and go to state 336
    empty                          shift and go to state 337
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 163

    (290) synchronized_statement -> SYNCHRONIZED . LPAREN expression RPAREN block
    (374) modifier -> SYNCHRONIZED .

    LPAREN          shift and go to state 338
    PUBLIC          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 374 (modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 374 (modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 374 (modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 374 (modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 374 (modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 374 (modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 374 (modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 374 (modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    INT             reduce using rule 374 (modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 374 (modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    ATRATE          reduce using rule 374 (modifier -> SYNCHRONIZED .)
    IDENT           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 374 (modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 374 (modifier -> SYNCHRONIZED .)


state 164

    (291) throw_statement -> THROW . expression SEMICOLON
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 339
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 165

    (292) try_statement -> TRY . try_block catches
    (293) try_statement -> TRY . try_block catches_opt finally
    (304) try_statement_with_resources -> TRY . resource_specification try_block catches_opt
    (305) try_statement_with_resources -> TRY . resource_specification try_block catches_opt finally
    (294) try_block -> . block
    (306) resource_specification -> . LPAREN resources semi_opt RPAREN
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE

    LPAREN          shift and go to state 343
    LBRACE          shift and go to state 153

    try_block                      shift and go to state 340
    resource_specification         shift and go to state 341
    block                          shift and go to state 342

state 166

    (259) enhanced_for_statement_header -> enhanced_for_statement_header_init . COLON expression RPAREN

    COLON           shift and go to state 344


state 167

    (390) reference_type -> class_or_interface_type .

    IDENT           reduce using rule 390 (reference_type -> class_or_interface_type .)
    GTR             reduce using rule 390 (reference_type -> class_or_interface_type .)
    COMMA           reduce using rule 390 (reference_type -> class_or_interface_type .)
    INSTANCEOF      reduce using rule 390 (reference_type -> class_or_interface_type .)
    EQL             reduce using rule 390 (reference_type -> class_or_interface_type .)
    NEQ             reduce using rule 390 (reference_type -> class_or_interface_type .)
    AND             reduce using rule 390 (reference_type -> class_or_interface_type .)
    XOR             reduce using rule 390 (reference_type -> class_or_interface_type .)
    OR              reduce using rule 390 (reference_type -> class_or_interface_type .)
    LAND            reduce using rule 390 (reference_type -> class_or_interface_type .)
    QUES            reduce using rule 390 (reference_type -> class_or_interface_type .)
    LOR             reduce using rule 390 (reference_type -> class_or_interface_type .)
    $end            reduce using rule 390 (reference_type -> class_or_interface_type .)
    SEMICOLON       reduce using rule 390 (reference_type -> class_or_interface_type .)
    COLON           reduce using rule 390 (reference_type -> class_or_interface_type .)
    RPAREN          reduce using rule 390 (reference_type -> class_or_interface_type .)
    RBRACK          reduce using rule 390 (reference_type -> class_or_interface_type .)
    RBRACE          reduce using rule 390 (reference_type -> class_or_interface_type .)
    SHR             reduce using rule 390 (reference_type -> class_or_interface_type .)
    ELLIPSIS        reduce using rule 390 (reference_type -> class_or_interface_type .)
    SHR_UN          reduce using rule 390 (reference_type -> class_or_interface_type .)


state 168

    (391) reference_type -> array_type .

    IDENT           reduce using rule 391 (reference_type -> array_type .)
    GTR             reduce using rule 391 (reference_type -> array_type .)
    COMMA           reduce using rule 391 (reference_type -> array_type .)
    INSTANCEOF      reduce using rule 391 (reference_type -> array_type .)
    EQL             reduce using rule 391 (reference_type -> array_type .)
    NEQ             reduce using rule 391 (reference_type -> array_type .)
    AND             reduce using rule 391 (reference_type -> array_type .)
    XOR             reduce using rule 391 (reference_type -> array_type .)
    OR              reduce using rule 391 (reference_type -> array_type .)
    LAND            reduce using rule 391 (reference_type -> array_type .)
    QUES            reduce using rule 391 (reference_type -> array_type .)
    LOR             reduce using rule 391 (reference_type -> array_type .)
    $end            reduce using rule 391 (reference_type -> array_type .)
    SEMICOLON       reduce using rule 391 (reference_type -> array_type .)
    COLON           reduce using rule 391 (reference_type -> array_type .)
    RPAREN          reduce using rule 391 (reference_type -> array_type .)
    RBRACK          reduce using rule 391 (reference_type -> array_type .)
    RBRACE          reduce using rule 391 (reference_type -> array_type .)
    SHR             reduce using rule 391 (reference_type -> array_type .)
    ELLIPSIS        reduce using rule 391 (reference_type -> array_type .)
    SHR_UN          reduce using rule 391 (reference_type -> array_type .)


state 169

    (206) statement_expression -> assignment .

    SEMICOLON       reduce using rule 206 (statement_expression -> assignment .)
    COMMA           reduce using rule 206 (statement_expression -> assignment .)
    RPAREN          reduce using rule 206 (statement_expression -> assignment .)


state 170

    (207) statement_expression -> pre_increment_expression .

    SEMICOLON       reduce using rule 207 (statement_expression -> pre_increment_expression .)
    COMMA           reduce using rule 207 (statement_expression -> pre_increment_expression .)
    RPAREN          reduce using rule 207 (statement_expression -> pre_increment_expression .)


state 171

    (208) statement_expression -> pre_decrement_expression .

    SEMICOLON       reduce using rule 208 (statement_expression -> pre_decrement_expression .)
    COMMA           reduce using rule 208 (statement_expression -> pre_decrement_expression .)
    RPAREN          reduce using rule 208 (statement_expression -> pre_decrement_expression .)


state 172

    (209) statement_expression -> post_increment_expression .
    (130) postfix_expression -> post_increment_expression .

    SEMICOLON       reduce using rule 209 (statement_expression -> post_increment_expression .)
    COMMA           reduce using rule 209 (statement_expression -> post_increment_expression .)
    RPAREN          reduce using rule 209 (statement_expression -> post_increment_expression .)
    INC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    DEC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ASSIGN          reduce using rule 130 (postfix_expression -> post_increment_expression .)
    MUL_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    QUO_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    REM_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ADD_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SUB_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHL_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_UN_ASSIGN   reduce using rule 130 (postfix_expression -> post_increment_expression .)
    AND_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    OR_ASSIGN       reduce using rule 130 (postfix_expression -> post_increment_expression .)
    XOR_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)


state 173

    (210) statement_expression -> post_decrement_expression .
    (131) postfix_expression -> post_decrement_expression .

    SEMICOLON       reduce using rule 210 (statement_expression -> post_decrement_expression .)
    COMMA           reduce using rule 210 (statement_expression -> post_decrement_expression .)
    RPAREN          reduce using rule 210 (statement_expression -> post_decrement_expression .)
    INC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    DEC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ASSIGN          reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    MUL_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    QUO_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    REM_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ADD_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SUB_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHL_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_UN_ASSIGN   reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    AND_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    OR_ASSIGN       reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    XOR_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)


state 174

    (211) statement_expression -> method_invocation .
    (144) primary_no_new_array -> method_invocation .

    SEMICOLON       reduce using rule 211 (statement_expression -> method_invocation .)
    COMMA           reduce using rule 211 (statement_expression -> method_invocation .)
    RPAREN          reduce using rule 211 (statement_expression -> method_invocation .)
    LBRACK          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    PERIOD          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    INC             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    DEC             reduce using rule 144 (primary_no_new_array -> method_invocation .)
    ASSIGN          reduce using rule 144 (primary_no_new_array -> method_invocation .)
    MUL_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    QUO_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    REM_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    ADD_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SUB_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHL_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHR_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    SHR_UN_ASSIGN   reduce using rule 144 (primary_no_new_array -> method_invocation .)
    AND_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)
    OR_ASSIGN       reduce using rule 144 (primary_no_new_array -> method_invocation .)
    XOR_ASSIGN      reduce using rule 144 (primary_no_new_array -> method_invocation .)


state 175

    (212) statement_expression -> class_instance_creation_expression .
    (142) primary_no_new_array -> class_instance_creation_expression .

    SEMICOLON       reduce using rule 212 (statement_expression -> class_instance_creation_expression .)
    COMMA           reduce using rule 212 (statement_expression -> class_instance_creation_expression .)
    RPAREN          reduce using rule 212 (statement_expression -> class_instance_creation_expression .)
    LBRACK          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    PERIOD          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    INC             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    DEC             reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    ASSIGN          reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    MUL_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    QUO_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    REM_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    ADD_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SUB_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHL_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHR_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    SHR_UN_ASSIGN   reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    AND_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    OR_ASSIGN       reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)
    XOR_ASSIGN      reduce using rule 142 (primary_no_new_array -> class_instance_creation_expression .)


state 176

    (315) explicit_constructor_invocation -> THIS . LPAREN argument_list_opt RPAREN SEMICOLON
    (141) primary_no_new_array -> THIS .

    LPAREN          shift and go to state 345
    LBRACK          reduce using rule 141 (primary_no_new_array -> THIS .)
    PERIOD          reduce using rule 141 (primary_no_new_array -> THIS .)
    INC             reduce using rule 141 (primary_no_new_array -> THIS .)
    DEC             reduce using rule 141 (primary_no_new_array -> THIS .)
    ASSIGN          reduce using rule 141 (primary_no_new_array -> THIS .)
    MUL_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    QUO_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    REM_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    ADD_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SUB_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SHL_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SHR_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    SHR_UN_ASSIGN   reduce using rule 141 (primary_no_new_array -> THIS .)
    AND_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)
    OR_ASSIGN       reduce using rule 141 (primary_no_new_array -> THIS .)
    XOR_ASSIGN      reduce using rule 141 (primary_no_new_array -> THIS .)


state 177

    (316) explicit_constructor_invocation -> SUPER . LPAREN argument_list_opt RPAREN SEMICOLON
    (223) method_invocation -> SUPER . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> SUPER . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (337) field_access -> SUPER . PERIOD IDENT

    LPAREN          shift and go to state 346
    PERIOD          shift and go to state 347


state 178

    (317) explicit_constructor_invocation -> type_arguments . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> type_arguments . THIS LPAREN argument_list_opt RPAREN SEMICOLON

    SUPER           shift and go to state 348
    THIS            shift and go to state 349


state 179

    (319) explicit_constructor_invocation -> primary . PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> primary . PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> primary . PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> primary . PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (222) method_invocation -> primary . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (329) class_instance_creation_expression -> primary . PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary . PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (128) postfix_expression -> primary .
    (336) field_access -> primary . PERIOD IDENT

    PERIOD          shift and go to state 350
    INC             reduce using rule 128 (postfix_expression -> primary .)
    DEC             reduce using rule 128 (postfix_expression -> primary .)
    ASSIGN          reduce using rule 128 (postfix_expression -> primary .)
    MUL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    QUO_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    REM_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    ADD_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SUB_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_UN_ASSIGN   reduce using rule 128 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)


state 180

    (320) explicit_constructor_invocation -> name . PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> name . PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> name . PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> name . PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (400) array_type -> name . dims
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (395) class_or_interface -> name .
    (129) postfix_expression -> name .
    (333) class_instance_creation_expression_name -> name . PERIOD
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (352) qualified_name -> name . PERIOD simple_name
    (338) array_access -> name . LBRACK expression RBRACK
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 351
    LSS             reduce using rule 395 (class_or_interface -> name .)
    IDENT           reduce using rule 395 (class_or_interface -> name .)
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LBRACK          shift and go to state 238

    dims                           shift and go to state 352
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 181

    (392) class_or_interface_type -> class_or_interface .
    (397) generic_type -> class_or_interface . type_arguments
    (398) generic_type -> class_or_interface . LSS GTR
    (403) type_arguments -> . LSS type_argument_list1

    IDENT           reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    LBRACK          reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    LPAREN          reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    COMMA           reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    LBRACE          reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    INSTANCEOF      reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    EQL             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    NEQ             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    AND             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    XOR             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    OR              reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    LAND            reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    QUES            reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    LOR             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    $end            reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    SEMICOLON       reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    COLON           reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    RPAREN          reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    RBRACK          reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    RBRACE          reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    ELLIPSIS        reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    LSS             shift and go to state 354

    type_arguments                 shift and go to state 353

state 182

    (393) class_or_interface_type -> generic_type .
    (401) array_type -> generic_type . dims
    (402) array_type -> generic_type . PERIOD name dims
    (396) class_or_interface -> generic_type . PERIOD name
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    IDENT           reduce using rule 393 (class_or_interface_type -> generic_type .)
    INSTANCEOF      reduce using rule 393 (class_or_interface_type -> generic_type .)
    EQL             reduce using rule 393 (class_or_interface_type -> generic_type .)
    NEQ             reduce using rule 393 (class_or_interface_type -> generic_type .)
    AND             reduce using rule 393 (class_or_interface_type -> generic_type .)
    XOR             reduce using rule 393 (class_or_interface_type -> generic_type .)
    OR              reduce using rule 393 (class_or_interface_type -> generic_type .)
    LAND            reduce using rule 393 (class_or_interface_type -> generic_type .)
    QUES            reduce using rule 393 (class_or_interface_type -> generic_type .)
    LOR             reduce using rule 393 (class_or_interface_type -> generic_type .)
    $end            reduce using rule 393 (class_or_interface_type -> generic_type .)
    SEMICOLON       reduce using rule 393 (class_or_interface_type -> generic_type .)
    COLON           reduce using rule 393 (class_or_interface_type -> generic_type .)
    RPAREN          reduce using rule 393 (class_or_interface_type -> generic_type .)
    RBRACK          reduce using rule 393 (class_or_interface_type -> generic_type .)
    COMMA           reduce using rule 393 (class_or_interface_type -> generic_type .)
    RBRACE          reduce using rule 393 (class_or_interface_type -> generic_type .)
    ELLIPSIS        reduce using rule 393 (class_or_interface_type -> generic_type .)
    PERIOD          shift and go to state 356
    LBRACK          shift and go to state 279

    dims                           shift and go to state 355
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 183

    (7) assignment -> postfix_expression . assignment_operator assignment_expression
    (135) post_increment_expression -> postfix_expression . INC
    (136) post_decrement_expression -> postfix_expression . DEC
    (8) assignment_operator -> . ASSIGN
    (9) assignment_operator -> . MUL_ASSIGN
    (10) assignment_operator -> . QUO_ASSIGN
    (11) assignment_operator -> . REM_ASSIGN
    (12) assignment_operator -> . ADD_ASSIGN
    (13) assignment_operator -> . SUB_ASSIGN
    (14) assignment_operator -> . SHL_ASSIGN
    (15) assignment_operator -> . SHR_ASSIGN
    (16) assignment_operator -> . SHR_UN_ASSIGN
    (17) assignment_operator -> . AND_ASSIGN
    (18) assignment_operator -> . OR_ASSIGN
    (19) assignment_operator -> . XOR_ASSIGN

    INC             shift and go to state 219
    DEC             shift and go to state 220
    ASSIGN          shift and go to state 221
    MUL_ASSIGN      shift and go to state 222
    QUO_ASSIGN      shift and go to state 223
    REM_ASSIGN      shift and go to state 224
    ADD_ASSIGN      shift and go to state 225
    SUB_ASSIGN      shift and go to state 226
    SHL_ASSIGN      shift and go to state 227
    SHR_ASSIGN      shift and go to state 228
    SHR_UN_ASSIGN   shift and go to state 229
    AND_ASSIGN      shift and go to state 230
    OR_ASSIGN       shift and go to state 231
    XOR_ASSIGN      shift and go to state 232

    assignment_operator            shift and go to state 218

state 184

    (327) class_instance_creation_expression -> NEW . type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> NEW . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (341) array_creation_with_array_initializer -> NEW . primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> NEW . primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs
    (403) type_arguments -> . LSS type_argument_list1
    (394) class_type -> . class_or_interface_type
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    LSS             shift and go to state 185
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type_arguments                 shift and go to state 282
    class_type                     shift and go to state 283
    primitive_type                 shift and go to state 280
    class_or_interface_type        shift and go to state 281
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 185

    (403) type_arguments -> LSS . type_argument_list1
    (404) type_argument_list1 -> . type_argument1
    (405) type_argument_list1 -> . type_argument_list COMMA type_argument1
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (406) type_argument_list -> . type_argument
    (407) type_argument_list -> . type_argument_list COMMA type_argument
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    QUES            shift and go to state 365
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type_argument_list1            shift and go to state 357
    type_argument1                 shift and go to state 358
    type_argument_list             shift and go to state 359
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    type_argument                  shift and go to state 362
    reference_type                 shift and go to state 363
    class_or_interface             shift and go to state 364
    wildcard                       shift and go to state 366
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 186

    (558) compilation_unit -> package_declaration import_declarations .
    (559) compilation_unit -> package_declaration import_declarations . type_declarations
    (569) import_declarations -> import_declarations . import_declaration
    (578) type_declarations -> . type_declaration
    (579) type_declarations -> . type_declarations type_declaration
    (570) import_declaration -> . single_type_import_declaration
    (571) import_declaration -> . type_import_on_demand_declaration
    (572) import_declaration -> . single_static_import_declaration
    (573) import_declaration -> . static_import_on_demand_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (574) single_type_import_declaration -> . IMPORT name SEMICOLON
    (575) type_import_on_demand_declaration -> . IMPORT name PERIOD MUL SEMICOLON
    (576) single_static_import_declaration -> . IMPORT STATIC name SEMICOLON
    (577) static_import_on_demand_declaration -> . IMPORT STATIC name PERIOD MUL SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 558 (compilation_unit -> package_declaration import_declarations .)
    SEMICOLON       shift and go to state 11
    IMPORT          shift and go to state 23
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    type_declarations              shift and go to state 370
    import_declaration             shift and go to state 190
    type_declaration               shift and go to state 13
    single_type_import_declaration shift and go to state 16
    type_import_on_demand_declaration shift and go to state 17
    single_static_import_declaration shift and go to state 18
    static_import_on_demand_declaration shift and go to state 19
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 187

    (560) compilation_unit -> package_declaration type_declarations .
    (579) type_declarations -> type_declarations . type_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 560 (compilation_unit -> package_declaration type_declarations .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    type_declaration               shift and go to state 191
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 188

    (363) modifiers_opt -> modifiers .
    (366) modifiers -> modifiers . modifier
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    CLASS           reduce using rule 363 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 363 (modifiers_opt -> modifiers .)
    LSS             reduce using rule 363 (modifiers_opt -> modifiers .)
    BOOLEAN         reduce using rule 363 (modifiers_opt -> modifiers .)
    VOID            reduce using rule 363 (modifiers_opt -> modifiers .)
    BYTE            reduce using rule 363 (modifiers_opt -> modifiers .)
    SHORT           reduce using rule 363 (modifiers_opt -> modifiers .)
    INT             reduce using rule 363 (modifiers_opt -> modifiers .)
    LONG            reduce using rule 363 (modifiers_opt -> modifiers .)
    CHAR            reduce using rule 363 (modifiers_opt -> modifiers .)
    FLOAT           reduce using rule 363 (modifiers_opt -> modifiers .)
    DOUBLE          reduce using rule 363 (modifiers_opt -> modifiers .)
    IDENT           reduce using rule 363 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    modifier                       shift and go to state 194
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 189

    (563) compilation_unit -> import_declarations type_declarations .
    (579) type_declarations -> type_declarations . type_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 563 (compilation_unit -> import_declarations type_declarations .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    type_declaration               shift and go to state 191
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 190

    (569) import_declarations -> import_declarations import_declaration .

    SEMICOLON       reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    IMPORT          reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    PUBLIC          reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    PROTECTED       reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    PRIVATE         reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    STATIC          reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    ABSTRACT        reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    FINAL           reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    NATIVE          reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    SYNCHRONIZED    reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    TRANSIENT       reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    VOLATILE        reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    STRICTFP        reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    ATRATE          reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    CLASS           reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    INTERFACE       reduce using rule 569 (import_declarations -> import_declarations import_declaration .)
    $end            reduce using rule 569 (import_declarations -> import_declarations import_declaration .)


state 191

    (579) type_declarations -> type_declarations type_declaration .

    SEMICOLON       reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    PUBLIC          reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    PROTECTED       reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    PRIVATE         reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    STATIC          reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    ABSTRACT        reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    FINAL           reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    NATIVE          reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    SYNCHRONIZED    reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    TRANSIENT       reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    VOLATILE        reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    STRICTFP        reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    ATRATE          reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    CLASS           reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    INTERFACE       reduce using rule 579 (type_declarations -> type_declarations type_declaration .)
    $end            reduce using rule 579 (type_declarations -> type_declarations type_declaration .)


state 192

    (565) package_declaration -> package_declaration_name SEMICOLON .

    SEMICOLON       reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    IMPORT          reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    PUBLIC          reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    PROTECTED       reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    PRIVATE         reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    STATIC          reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    ABSTRACT        reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    FINAL           reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    NATIVE          reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    SYNCHRONIZED    reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    TRANSIENT       reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    VOLATILE        reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    STRICTFP        reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    ATRATE          reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    CLASS           reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    INTERFACE       reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)
    $end            reduce using rule 565 (package_declaration -> package_declaration_name SEMICOLON .)


state 193

    (566) package_declaration_name -> modifiers PACKAGE . name
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 371
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 194

    (366) modifiers -> modifiers modifier .

    PACKAGE         reduce using rule 366 (modifiers -> modifiers modifier .)
    PUBLIC          reduce using rule 366 (modifiers -> modifiers modifier .)
    PROTECTED       reduce using rule 366 (modifiers -> modifiers modifier .)
    PRIVATE         reduce using rule 366 (modifiers -> modifiers modifier .)
    STATIC          reduce using rule 366 (modifiers -> modifiers modifier .)
    ABSTRACT        reduce using rule 366 (modifiers -> modifiers modifier .)
    FINAL           reduce using rule 366 (modifiers -> modifiers modifier .)
    NATIVE          reduce using rule 366 (modifiers -> modifiers modifier .)
    SYNCHRONIZED    reduce using rule 366 (modifiers -> modifiers modifier .)
    TRANSIENT       reduce using rule 366 (modifiers -> modifiers modifier .)
    VOLATILE        reduce using rule 366 (modifiers -> modifiers modifier .)
    STRICTFP        reduce using rule 366 (modifiers -> modifiers modifier .)
    ATRATE          reduce using rule 366 (modifiers -> modifiers modifier .)
    CLASS           reduce using rule 366 (modifiers -> modifiers modifier .)
    INTERFACE       reduce using rule 366 (modifiers -> modifiers modifier .)
    BOOLEAN         reduce using rule 366 (modifiers -> modifiers modifier .)
    VOID            reduce using rule 366 (modifiers -> modifiers modifier .)
    BYTE            reduce using rule 366 (modifiers -> modifiers modifier .)
    SHORT           reduce using rule 366 (modifiers -> modifiers modifier .)
    INT             reduce using rule 366 (modifiers -> modifiers modifier .)
    LONG            reduce using rule 366 (modifiers -> modifiers modifier .)
    CHAR            reduce using rule 366 (modifiers -> modifiers modifier .)
    FLOAT           reduce using rule 366 (modifiers -> modifiers modifier .)
    DOUBLE          reduce using rule 366 (modifiers -> modifiers modifier .)
    IDENT           reduce using rule 366 (modifiers -> modifiers modifier .)
    LSS             reduce using rule 366 (modifiers -> modifiers modifier .)


state 195

    (567) package_declaration_name -> PACKAGE name .
    (352) qualified_name -> name . PERIOD simple_name

    SEMICOLON       reduce using rule 567 (package_declaration_name -> PACKAGE name .)
    PERIOD          shift and go to state 372


state 196

    (351) simple_name -> IDENT .

    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    SEMICOLON       reduce using rule 351 (simple_name -> IDENT .)
    LPAREN          reduce using rule 351 (simple_name -> IDENT .)
    PACKAGE         reduce using rule 351 (simple_name -> IDENT .)
    PUBLIC          reduce using rule 351 (simple_name -> IDENT .)
    PROTECTED       reduce using rule 351 (simple_name -> IDENT .)
    PRIVATE         reduce using rule 351 (simple_name -> IDENT .)
    STATIC          reduce using rule 351 (simple_name -> IDENT .)
    ABSTRACT        reduce using rule 351 (simple_name -> IDENT .)
    FINAL           reduce using rule 351 (simple_name -> IDENT .)
    NATIVE          reduce using rule 351 (simple_name -> IDENT .)
    SYNCHRONIZED    reduce using rule 351 (simple_name -> IDENT .)
    TRANSIENT       reduce using rule 351 (simple_name -> IDENT .)
    VOLATILE        reduce using rule 351 (simple_name -> IDENT .)
    STRICTFP        reduce using rule 351 (simple_name -> IDENT .)
    ATRATE          reduce using rule 351 (simple_name -> IDENT .)
    CLASS           reduce using rule 351 (simple_name -> IDENT .)
    INTERFACE       reduce using rule 351 (simple_name -> IDENT .)
    BOOLEAN         reduce using rule 351 (simple_name -> IDENT .)
    VOID            reduce using rule 351 (simple_name -> IDENT .)
    BYTE            reduce using rule 351 (simple_name -> IDENT .)
    SHORT           reduce using rule 351 (simple_name -> IDENT .)
    INT             reduce using rule 351 (simple_name -> IDENT .)
    LONG            reduce using rule 351 (simple_name -> IDENT .)
    CHAR            reduce using rule 351 (simple_name -> IDENT .)
    FLOAT           reduce using rule 351 (simple_name -> IDENT .)
    DOUBLE          reduce using rule 351 (simple_name -> IDENT .)
    IDENT           reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    RPAREN          reduce using rule 351 (simple_name -> IDENT .)
    COMMA           reduce using rule 351 (simple_name -> IDENT .)
    RBRACE          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    GTR             reduce using rule 351 (simple_name -> IDENT .)
    LBRACE          reduce using rule 351 (simple_name -> IDENT .)
    INSTANCEOF      reduce using rule 351 (simple_name -> IDENT .)
    EQL             reduce using rule 351 (simple_name -> IDENT .)
    NEQ             reduce using rule 351 (simple_name -> IDENT .)
    AND             reduce using rule 351 (simple_name -> IDENT .)
    XOR             reduce using rule 351 (simple_name -> IDENT .)
    OR              reduce using rule 351 (simple_name -> IDENT .)
    LAND            reduce using rule 351 (simple_name -> IDENT .)
    QUES            reduce using rule 351 (simple_name -> IDENT .)
    LOR             reduce using rule 351 (simple_name -> IDENT .)
    $end            reduce using rule 351 (simple_name -> IDENT .)
    COLON           reduce using rule 351 (simple_name -> IDENT .)
    RBRACK          reduce using rule 351 (simple_name -> IDENT .)
    ELLIPSIS        reduce using rule 351 (simple_name -> IDENT .)
    SHR             reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN          reduce using rule 351 (simple_name -> IDENT .)
    ASSIGN          reduce using rule 351 (simple_name -> IDENT .)


state 197

    (574) single_type_import_declaration -> IMPORT name . SEMICOLON
    (575) type_import_on_demand_declaration -> IMPORT name . PERIOD MUL SEMICOLON
    (352) qualified_name -> name . PERIOD simple_name

    SEMICOLON       shift and go to state 373
    PERIOD          shift and go to state 374


state 198

    (576) single_static_import_declaration -> IMPORT STATIC . name SEMICOLON
    (577) static_import_on_demand_declaration -> IMPORT STATIC . name PERIOD MUL SEMICOLON
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 375
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 199

    (462) class_declaration -> class_header class_body .

    SEMICOLON       reduce using rule 462 (class_declaration -> class_header class_body .)
    PUBLIC          reduce using rule 462 (class_declaration -> class_header class_body .)
    PROTECTED       reduce using rule 462 (class_declaration -> class_header class_body .)
    PRIVATE         reduce using rule 462 (class_declaration -> class_header class_body .)
    STATIC          reduce using rule 462 (class_declaration -> class_header class_body .)
    ABSTRACT        reduce using rule 462 (class_declaration -> class_header class_body .)
    FINAL           reduce using rule 462 (class_declaration -> class_header class_body .)
    NATIVE          reduce using rule 462 (class_declaration -> class_header class_body .)
    SYNCHRONIZED    reduce using rule 462 (class_declaration -> class_header class_body .)
    TRANSIENT       reduce using rule 462 (class_declaration -> class_header class_body .)
    VOLATILE        reduce using rule 462 (class_declaration -> class_header class_body .)
    STRICTFP        reduce using rule 462 (class_declaration -> class_header class_body .)
    ATRATE          reduce using rule 462 (class_declaration -> class_header class_body .)
    CLASS           reduce using rule 462 (class_declaration -> class_header class_body .)
    INTERFACE       reduce using rule 462 (class_declaration -> class_header class_body .)
    $end            reduce using rule 462 (class_declaration -> class_header class_body .)
    LSS             reduce using rule 462 (class_declaration -> class_header class_body .)
    BOOLEAN         reduce using rule 462 (class_declaration -> class_header class_body .)
    VOID            reduce using rule 462 (class_declaration -> class_header class_body .)
    BYTE            reduce using rule 462 (class_declaration -> class_header class_body .)
    SHORT           reduce using rule 462 (class_declaration -> class_header class_body .)
    INT             reduce using rule 462 (class_declaration -> class_header class_body .)
    LONG            reduce using rule 462 (class_declaration -> class_header class_body .)
    CHAR            reduce using rule 462 (class_declaration -> class_header class_body .)
    FLOAT           reduce using rule 462 (class_declaration -> class_header class_body .)
    DOUBLE          reduce using rule 462 (class_declaration -> class_header class_body .)
    IDENT           reduce using rule 462 (class_declaration -> class_header class_body .)
    RBRACE          reduce using rule 462 (class_declaration -> class_header class_body .)
    IF              reduce using rule 462 (class_declaration -> class_header class_body .)
    WHILE           reduce using rule 462 (class_declaration -> class_header class_body .)
    FOR             reduce using rule 462 (class_declaration -> class_header class_body .)
    LBRACE          reduce using rule 462 (class_declaration -> class_header class_body .)
    ASSERT          reduce using rule 462 (class_declaration -> class_header class_body .)
    SWITCH          reduce using rule 462 (class_declaration -> class_header class_body .)
    DO              reduce using rule 462 (class_declaration -> class_header class_body .)
    BREAK           reduce using rule 462 (class_declaration -> class_header class_body .)
    CONTINUE        reduce using rule 462 (class_declaration -> class_header class_body .)
    RETURN          reduce using rule 462 (class_declaration -> class_header class_body .)
    THROW           reduce using rule 462 (class_declaration -> class_header class_body .)
    TRY             reduce using rule 462 (class_declaration -> class_header class_body .)
    THIS            reduce using rule 462 (class_declaration -> class_header class_body .)
    SUPER           reduce using rule 462 (class_declaration -> class_header class_body .)
    INC             reduce using rule 462 (class_declaration -> class_header class_body .)
    DEC             reduce using rule 462 (class_declaration -> class_header class_body .)
    NEW             reduce using rule 462 (class_declaration -> class_header class_body .)
    LPAREN          reduce using rule 462 (class_declaration -> class_header class_body .)
    HEX_LIT         reduce using rule 462 (class_declaration -> class_header class_body .)
    OCTAL_LIT       reduce using rule 462 (class_declaration -> class_header class_body .)
    BINARY_LIT      reduce using rule 462 (class_declaration -> class_header class_body .)
    DECIMAL_LIT     reduce using rule 462 (class_declaration -> class_header class_body .)
    FLOAT_HEX_LIT   reduce using rule 462 (class_declaration -> class_header class_body .)
    FLOAT_DEC_LIT   reduce using rule 462 (class_declaration -> class_header class_body .)
    CHAR_LIT        reduce using rule 462 (class_declaration -> class_header class_body .)
    STRING_LIT      reduce using rule 462 (class_declaration -> class_header class_body .)
    BOOL_LIT        reduce using rule 462 (class_declaration -> class_header class_body .)
    NULL_LIT        reduce using rule 462 (class_declaration -> class_header class_body .)
    CASE            reduce using rule 462 (class_declaration -> class_header class_body .)
    DEFAULT         reduce using rule 462 (class_declaration -> class_header class_body .)


state 200

    (470) class_body -> LBRACE . inc_scope class_body_declarations_opt dec_scope RBRACE
    (584) inc_scope -> .

    SEMICOLON       reduce using rule 584 (inc_scope -> .)
    STATIC          reduce using rule 584 (inc_scope -> .)
    LBRACE          reduce using rule 584 (inc_scope -> .)
    PUBLIC          reduce using rule 584 (inc_scope -> .)
    PROTECTED       reduce using rule 584 (inc_scope -> .)
    PRIVATE         reduce using rule 584 (inc_scope -> .)
    ABSTRACT        reduce using rule 584 (inc_scope -> .)
    FINAL           reduce using rule 584 (inc_scope -> .)
    NATIVE          reduce using rule 584 (inc_scope -> .)
    SYNCHRONIZED    reduce using rule 584 (inc_scope -> .)
    TRANSIENT       reduce using rule 584 (inc_scope -> .)
    VOLATILE        reduce using rule 584 (inc_scope -> .)
    STRICTFP        reduce using rule 584 (inc_scope -> .)
    ATRATE          reduce using rule 584 (inc_scope -> .)
    RBRACE          reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    CLASS           reduce using rule 584 (inc_scope -> .)
    INTERFACE       reduce using rule 584 (inc_scope -> .)
    LSS             reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 376

state 201

    (511) interface_declaration -> interface_header interface_body .

    SEMICOLON       reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    PUBLIC          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    PROTECTED       reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    PRIVATE         reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    STATIC          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    ABSTRACT        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    FINAL           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    NATIVE          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    SYNCHRONIZED    reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    TRANSIENT       reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    VOLATILE        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    STRICTFP        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    ATRATE          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    CLASS           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    INTERFACE       reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    $end            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    LSS             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    BOOLEAN         reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    VOID            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    BYTE            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    SHORT           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    INT             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    LONG            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    CHAR            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    FLOAT           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    DOUBLE          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    IDENT           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    RBRACE          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    IF              reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    WHILE           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    FOR             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    LBRACE          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    ASSERT          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    SWITCH          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    DO              reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    BREAK           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    CONTINUE        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    RETURN          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    THROW           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    TRY             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    THIS            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    SUPER           reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    INC             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    DEC             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    NEW             reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    LPAREN          reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    HEX_LIT         reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    OCTAL_LIT       reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    BINARY_LIT      reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    DECIMAL_LIT     reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    FLOAT_HEX_LIT   reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    FLOAT_DEC_LIT   reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    CHAR_LIT        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    STRING_LIT      reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    BOOL_LIT        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    NULL_LIT        reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    CASE            reduce using rule 511 (interface_declaration -> interface_header interface_body .)
    DEFAULT         reduce using rule 511 (interface_declaration -> interface_header interface_body .)


state 202

    (519) interface_body -> LBRACE . interface_member_declarations_opt RBRACE
    (520) interface_member_declarations_opt -> . interface_member_declarations
    (521) interface_member_declarations_opt -> . empty
    (522) interface_member_declarations -> . interface_member_declaration
    (523) interface_member_declarations -> . interface_member_declarations interface_member_declaration
    (583) empty -> .
    (524) interface_member_declaration -> . constant_declaration
    (525) interface_member_declaration -> . abstract_method_declaration
    (526) interface_member_declaration -> . class_declaration
    (527) interface_member_declaration -> . interface_declaration
    (528) interface_member_declaration -> . SEMICOLON
    (529) constant_declaration -> . field_declaration
    (505) abstract_method_declaration -> . method_header101 SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (484) field_declaration -> . modifiers_opt type variable_declarators SEMICOLON
    (506) method_header101 -> . method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (508) method_header_name -> . modifiers_opt type_parameters type IDENT LPAREN
    (509) method_header_name -> . modifiers_opt type IDENT LPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RBRACE          reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    SEMICOLON       shift and go to state 385
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    interface_member_declarations_opt shift and go to state 377
    interface_member_declarations  shift and go to state 378
    empty                          shift and go to state 379
    interface_member_declaration   shift and go to state 380
    constant_declaration           shift and go to state 381
    abstract_method_declaration    shift and go to state 382
    class_declaration              shift and go to state 383
    interface_declaration          shift and go to state 384
    field_declaration              shift and go to state 386
    method_header101               shift and go to state 387
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    modifiers_opt                  shift and go to state 388
    method_header_name             shift and go to state 389
    class_header_name              shift and go to state 38
    interface_header_name          shift and go to state 39
    modifiers                      shift and go to state 188
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 203

    (463) class_header -> class_header_name empty . empty
    (583) empty -> .

    LBRACE          reduce using rule 583 (empty -> .)

    empty                          shift and go to state 390

state 204

    (512) interface_header -> interface_header_name interface_header_extends_opt .

    LBRACE          reduce using rule 512 (interface_header -> interface_header_name interface_header_extends_opt .)


state 205

    (516) interface_header_extends_opt -> interface_header_extends .

    LBRACE          reduce using rule 516 (interface_header_extends_opt -> interface_header_extends .)


state 206

    (517) interface_header_extends_opt -> empty .

    LBRACE          reduce using rule 517 (interface_header_extends_opt -> empty .)


state 207

    (518) interface_header_extends -> EXTENDS . interface_type_list
    (467) interface_type_list -> . interface_type
    (468) interface_type_list -> . interface_type_list COMMA interface_type
    (469) interface_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    interface_type_list            shift and go to state 391
    interface_type                 shift and go to state 392
    class_or_interface_type        shift and go to state 393
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 208

    (464) class_header_name -> class_header_name1 type_parameters .

    LBRACE          reduce using rule 464 (class_header_name -> class_header_name1 type_parameters .)


state 209

    (442) type_parameters -> LSS . type_parameter_list1
    (451) type_parameter_list1 -> . type_parameter1
    (452) type_parameter_list1 -> . type_parameter_list COMMA type_parameter1
    (453) type_parameter1 -> . type_parameter_header GTR
    (454) type_parameter1 -> . type_parameter_header EXTENDS reference_type1
    (455) type_parameter1 -> . type_parameter_header EXTENDS reference_type additional_bound_list1
    (443) type_parameter_list -> . type_parameter
    (444) type_parameter_list -> . type_parameter_list COMMA type_parameter
    (441) type_parameter_header -> . IDENT
    (445) type_parameter -> . type_parameter_header
    (446) type_parameter -> . type_parameter_header EXTENDS reference_type
    (447) type_parameter -> . type_parameter_header EXTENDS reference_type additional_bound_list

    IDENT           shift and go to state 399

    type_parameter_list1           shift and go to state 394
    type_parameter1                shift and go to state 395
    type_parameter_list            shift and go to state 396
    type_parameter_header          shift and go to state 397
    type_parameter                 shift and go to state 398

state 210

    (513) interface_header_name -> interface_header_name1 type_parameters .

    EXTENDS         reduce using rule 513 (interface_header_name -> interface_header_name1 type_parameters .)
    LBRACE          reduce using rule 513 (interface_header_name -> interface_header_name1 type_parameters .)


state 211

    (547) normal_annotation -> annotation_name LPAREN . member_value_pairs_opt RPAREN
    (555) single_member_annotation -> annotation_name LPAREN . single_member_annotation_member_value RPAREN
    (549) member_value_pairs_opt -> . member_value_pairs
    (550) member_value_pairs_opt -> . empty
    (556) single_member_annotation_member_value -> . member_value
    (551) member_value_pairs -> . member_value_pair
    (552) member_value_pairs -> . member_value_pairs COMMA member_value_pair
    (583) empty -> .
    (534) member_value -> . conditional_expression_not_name
    (535) member_value -> . name
    (536) member_value -> . annotation
    (537) member_value -> . member_value_array_initializer
    (553) member_value_pair -> . simple_name ASSIGN member_value
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (538) member_value_array_initializer -> . LBRACE member_values COMMA RBRACE
    (539) member_value_array_initializer -> . LBRACE member_values RBRACE
    (540) member_value_array_initializer -> . LBRACE COMMA RBRACE
    (541) member_value_array_initializer -> . LBRACE RBRACE
    (351) simple_name -> . IDENT
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (352) qualified_name -> . name PERIOD simple_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (548) annotation_name -> . ATRATE name
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    RPAREN          reduce using rule 583 (empty -> .)
    LBRACE          shift and go to state 411
    IDENT           shift and go to state 77
    ATRATE          shift and go to state 47
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    annotation_name                shift and go to state 45
    member_value_pairs_opt         shift and go to state 400
    single_member_annotation_member_value shift and go to state 401
    member_value_pairs             shift and go to state 402
    empty                          shift and go to state 403
    member_value                   shift and go to state 404
    member_value_pair              shift and go to state 405
    conditional_expression_not_name shift and go to state 406
    name                           shift and go to state 407
    annotation                     shift and go to state 408
    member_value_array_initializer shift and go to state 409
    simple_name                    shift and go to state 410
    conditional_or_expression_not_name shift and go to state 252
    qualified_name                 shift and go to state 64
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    conditional_and_expression_not_name shift and go to state 256
    inclusive_or_expression_not_name shift and go to state 257
    exclusive_or_expression_not_name shift and go to state 258
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275
    primary                        shift and go to state 412
    post_increment_expression      shift and go to state 413
    post_decrement_expression      shift and go to state 414
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    postfix_expression             shift and go to state 415
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 212

    (466) class_header_name1 -> modifiers_opt CLASS . IDENT

    IDENT           shift and go to state 416


state 213

    (515) interface_header_name1 -> modifiers_opt INTERFACE . IDENT

    IDENT           shift and go to state 417


state 214

    (548) annotation_name -> ATRATE name .
    (352) qualified_name -> name . PERIOD simple_name

    LPAREN          reduce using rule 548 (annotation_name -> ATRATE name .)
    PACKAGE         reduce using rule 548 (annotation_name -> ATRATE name .)
    PUBLIC          reduce using rule 548 (annotation_name -> ATRATE name .)
    PROTECTED       reduce using rule 548 (annotation_name -> ATRATE name .)
    PRIVATE         reduce using rule 548 (annotation_name -> ATRATE name .)
    STATIC          reduce using rule 548 (annotation_name -> ATRATE name .)
    ABSTRACT        reduce using rule 548 (annotation_name -> ATRATE name .)
    FINAL           reduce using rule 548 (annotation_name -> ATRATE name .)
    NATIVE          reduce using rule 548 (annotation_name -> ATRATE name .)
    SYNCHRONIZED    reduce using rule 548 (annotation_name -> ATRATE name .)
    TRANSIENT       reduce using rule 548 (annotation_name -> ATRATE name .)
    VOLATILE        reduce using rule 548 (annotation_name -> ATRATE name .)
    STRICTFP        reduce using rule 548 (annotation_name -> ATRATE name .)
    ATRATE          reduce using rule 548 (annotation_name -> ATRATE name .)
    CLASS           reduce using rule 548 (annotation_name -> ATRATE name .)
    INTERFACE       reduce using rule 548 (annotation_name -> ATRATE name .)
    BOOLEAN         reduce using rule 548 (annotation_name -> ATRATE name .)
    VOID            reduce using rule 548 (annotation_name -> ATRATE name .)
    BYTE            reduce using rule 548 (annotation_name -> ATRATE name .)
    SHORT           reduce using rule 548 (annotation_name -> ATRATE name .)
    INT             reduce using rule 548 (annotation_name -> ATRATE name .)
    LONG            reduce using rule 548 (annotation_name -> ATRATE name .)
    CHAR            reduce using rule 548 (annotation_name -> ATRATE name .)
    FLOAT           reduce using rule 548 (annotation_name -> ATRATE name .)
    DOUBLE          reduce using rule 548 (annotation_name -> ATRATE name .)
    IDENT           reduce using rule 548 (annotation_name -> ATRATE name .)
    LSS             reduce using rule 548 (annotation_name -> ATRATE name .)
    RPAREN          reduce using rule 548 (annotation_name -> ATRATE name .)
    COMMA           reduce using rule 548 (annotation_name -> ATRATE name .)
    RBRACE          reduce using rule 548 (annotation_name -> ATRATE name .)
    PERIOD          shift and go to state 372


state 215

    (119) pre_decrement_expression -> DEC unary_expression .

    MUL             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    QUO             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    REM             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    ADD             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    SUB             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    SHL             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    SHR             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    SHR_UN          reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    GTR             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    LSS             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    GEQ             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    LEQ             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    INSTANCEOF      reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    EQL             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    NEQ             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    AND             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    XOR             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    OR              reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    LAND            reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    QUES            reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    LOR             reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    $end            reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    SEMICOLON       reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    RPAREN          reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    COLON           reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    RBRACK          reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    COMMA           reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)
    RBRACE          reduce using rule 119 (pre_decrement_expression -> DEC unary_expression .)


state 216

    (120) unary_expression_not_plus_minus -> postfix_expression .
    (135) post_increment_expression -> postfix_expression . INC
    (136) post_decrement_expression -> postfix_expression . DEC

    MUL             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    QUO             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    REM             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    ADD             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SUB             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SHL             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SHR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SHR_UN          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    GTR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LSS             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    GEQ             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LEQ             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    INSTANCEOF      reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    EQL             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    NEQ             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    AND             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    XOR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    OR              reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LAND            reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    QUES            reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    LOR             reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    $end            reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    SEMICOLON       reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    RPAREN          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    COLON           reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    RBRACK          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    COMMA           reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    RBRACE          reduce using rule 120 (unary_expression_not_plus_minus -> postfix_expression .)
    INC             shift and go to state 219
    DEC             shift and go to state 220


state 217

    (160) cast_expression -> LPAREN . primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> LPAREN . name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> LPAREN . name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> LPAREN . name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> LPAREN . name dims RPAREN unary_expression_not_plus_minus
    (146) primary_no_new_array -> LPAREN . name RPAREN
    (147) primary_no_new_array -> LPAREN . expression_not_name RPAREN
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (2) expression_not_name -> . assignment_expression_not_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (5) assignment_expression_not_name -> . assignment
    (6) assignment_expression_not_name -> . conditional_expression_not_name
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 77
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274

    primitive_type                 shift and go to state 248
    name                           shift and go to state 418
    expression_not_name            shift and go to state 247
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    assignment_expression_not_name shift and go to state 249
    assignment                     shift and go to state 250
    conditional_expression_not_name shift and go to state 251
    postfix_expression             shift and go to state 183
    conditional_or_expression_not_name shift and go to state 252
    primary                        shift and go to state 253
    post_increment_expression      shift and go to state 254
    post_decrement_expression      shift and go to state 255
    conditional_and_expression_not_name shift and go to state 256
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    inclusive_or_expression_not_name shift and go to state 257
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    exclusive_or_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 89
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275

state 218

    (7) assignment -> postfix_expression assignment_operator . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    postfix_expression             shift and go to state 53
    assignment_expression          shift and go to state 419
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 219

    (135) post_increment_expression -> postfix_expression INC .

    INC             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    DEC             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    ASSIGN          reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    MUL_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    QUO_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    REM_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    ADD_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SUB_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SHL_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SHR_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SHR_UN_ASSIGN   reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    AND_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    OR_ASSIGN       reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    XOR_ASSIGN      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    MUL             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    QUO             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    REM             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    ADD             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SUB             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SHL             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SHR             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SHR_UN          reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    GTR             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    LSS             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    GEQ             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    LEQ             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    INSTANCEOF      reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    EQL             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    NEQ             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    AND             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    XOR             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    OR              reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    LAND            reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    QUES            reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    LOR             reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    $end            reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    SEMICOLON       reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    RPAREN          reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    COLON           reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    RBRACK          reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    COMMA           reduce using rule 135 (post_increment_expression -> postfix_expression INC .)
    RBRACE          reduce using rule 135 (post_increment_expression -> postfix_expression INC .)


state 220

    (136) post_decrement_expression -> postfix_expression DEC .

    INC             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    DEC             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    ASSIGN          reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    MUL_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    QUO_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    REM_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    ADD_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SUB_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SHL_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SHR_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SHR_UN_ASSIGN   reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    AND_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    OR_ASSIGN       reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    XOR_ASSIGN      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    MUL             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    QUO             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    REM             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    ADD             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SUB             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SHL             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SHR             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SHR_UN          reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    GTR             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    LSS             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    GEQ             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    LEQ             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    INSTANCEOF      reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    EQL             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    NEQ             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    AND             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    XOR             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    OR              reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    LAND            reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    QUES            reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    LOR             reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    $end            reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    SEMICOLON       reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    RPAREN          reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    COLON           reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    RBRACK          reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    COMMA           reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)
    RBRACE          reduce using rule 136 (post_decrement_expression -> postfix_expression DEC .)


state 221

    (8) assignment_operator -> ASSIGN .

    THIS            reduce using rule 8 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 8 (assignment_operator -> ASSIGN .)
    NEW             reduce using rule 8 (assignment_operator -> ASSIGN .)
    IDENT           reduce using rule 8 (assignment_operator -> ASSIGN .)
    HEX_LIT         reduce using rule 8 (assignment_operator -> ASSIGN .)
    OCTAL_LIT       reduce using rule 8 (assignment_operator -> ASSIGN .)
    BINARY_LIT      reduce using rule 8 (assignment_operator -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 8 (assignment_operator -> ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 8 (assignment_operator -> ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 8 (assignment_operator -> ASSIGN .)
    CHAR_LIT        reduce using rule 8 (assignment_operator -> ASSIGN .)
    STRING_LIT      reduce using rule 8 (assignment_operator -> ASSIGN .)
    BOOL_LIT        reduce using rule 8 (assignment_operator -> ASSIGN .)
    NULL_LIT        reduce using rule 8 (assignment_operator -> ASSIGN .)
    SUPER           reduce using rule 8 (assignment_operator -> ASSIGN .)
    BOOLEAN         reduce using rule 8 (assignment_operator -> ASSIGN .)
    VOID            reduce using rule 8 (assignment_operator -> ASSIGN .)
    BYTE            reduce using rule 8 (assignment_operator -> ASSIGN .)
    SHORT           reduce using rule 8 (assignment_operator -> ASSIGN .)
    INT             reduce using rule 8 (assignment_operator -> ASSIGN .)
    LONG            reduce using rule 8 (assignment_operator -> ASSIGN .)
    CHAR            reduce using rule 8 (assignment_operator -> ASSIGN .)
    FLOAT           reduce using rule 8 (assignment_operator -> ASSIGN .)
    DOUBLE          reduce using rule 8 (assignment_operator -> ASSIGN .)
    ADD             reduce using rule 8 (assignment_operator -> ASSIGN .)
    SUB             reduce using rule 8 (assignment_operator -> ASSIGN .)
    INC             reduce using rule 8 (assignment_operator -> ASSIGN .)
    DEC             reduce using rule 8 (assignment_operator -> ASSIGN .)
    LNOT            reduce using rule 8 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 8 (assignment_operator -> ASSIGN .)


state 222

    (9) assignment_operator -> MUL_ASSIGN .

    THIS            reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    NEW             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    IDENT           reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    HEX_LIT         reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    OCTAL_LIT       reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    BINARY_LIT      reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    DECIMAL_LIT     reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    CHAR_LIT        reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    STRING_LIT      reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    BOOL_LIT        reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    NULL_LIT        reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    SUPER           reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    BOOLEAN         reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    VOID            reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    BYTE            reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    SHORT           reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    INT             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    LONG            reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    CHAR            reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    FLOAT           reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    DOUBLE          reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    ADD             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    SUB             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    INC             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    DEC             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    LNOT            reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)
    NOT             reduce using rule 9 (assignment_operator -> MUL_ASSIGN .)


state 223

    (10) assignment_operator -> QUO_ASSIGN .

    THIS            reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    LPAREN          reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    NEW             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    IDENT           reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    HEX_LIT         reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    OCTAL_LIT       reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    BINARY_LIT      reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    DECIMAL_LIT     reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    CHAR_LIT        reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    STRING_LIT      reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    BOOL_LIT        reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    NULL_LIT        reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    SUPER           reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    BOOLEAN         reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    VOID            reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    BYTE            reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    SHORT           reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    INT             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    LONG            reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    CHAR            reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    FLOAT           reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    DOUBLE          reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    ADD             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    SUB             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    INC             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    DEC             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    LNOT            reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)
    NOT             reduce using rule 10 (assignment_operator -> QUO_ASSIGN .)


state 224

    (11) assignment_operator -> REM_ASSIGN .

    THIS            reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    LPAREN          reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    NEW             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    IDENT           reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    HEX_LIT         reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    OCTAL_LIT       reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    BINARY_LIT      reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    DECIMAL_LIT     reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    CHAR_LIT        reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    STRING_LIT      reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    BOOL_LIT        reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    NULL_LIT        reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    SUPER           reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    BOOLEAN         reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    VOID            reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    BYTE            reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    SHORT           reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    INT             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    LONG            reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    CHAR            reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    FLOAT           reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    DOUBLE          reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    ADD             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    SUB             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    INC             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    DEC             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    LNOT            reduce using rule 11 (assignment_operator -> REM_ASSIGN .)
    NOT             reduce using rule 11 (assignment_operator -> REM_ASSIGN .)


state 225

    (12) assignment_operator -> ADD_ASSIGN .

    THIS            reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    NEW             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    IDENT           reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    HEX_LIT         reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    OCTAL_LIT       reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    BINARY_LIT      reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    DECIMAL_LIT     reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    CHAR_LIT        reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    STRING_LIT      reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    BOOL_LIT        reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    NULL_LIT        reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    SUPER           reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    BOOLEAN         reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    VOID            reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    BYTE            reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    SHORT           reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    INT             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    LONG            reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    CHAR            reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    FLOAT           reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    DOUBLE          reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    ADD             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    SUB             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    INC             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    DEC             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    LNOT            reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)
    NOT             reduce using rule 12 (assignment_operator -> ADD_ASSIGN .)


state 226

    (13) assignment_operator -> SUB_ASSIGN .

    THIS            reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    NEW             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    IDENT           reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    HEX_LIT         reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    OCTAL_LIT       reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    BINARY_LIT      reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    DECIMAL_LIT     reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    CHAR_LIT        reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    STRING_LIT      reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    BOOL_LIT        reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    NULL_LIT        reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    SUPER           reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    BOOLEAN         reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    VOID            reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    BYTE            reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    SHORT           reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    INT             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    LONG            reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    CHAR            reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    FLOAT           reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    DOUBLE          reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    ADD             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    SUB             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    INC             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    DEC             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    LNOT            reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)
    NOT             reduce using rule 13 (assignment_operator -> SUB_ASSIGN .)


state 227

    (14) assignment_operator -> SHL_ASSIGN .

    THIS            reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    LPAREN          reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    NEW             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    IDENT           reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    HEX_LIT         reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    OCTAL_LIT       reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    BINARY_LIT      reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    DECIMAL_LIT     reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    CHAR_LIT        reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    STRING_LIT      reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    BOOL_LIT        reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    NULL_LIT        reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    SUPER           reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    BOOLEAN         reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    VOID            reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    BYTE            reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    SHORT           reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    INT             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    LONG            reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    CHAR            reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    FLOAT           reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    DOUBLE          reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    ADD             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    SUB             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    INC             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    DEC             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    LNOT            reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)
    NOT             reduce using rule 14 (assignment_operator -> SHL_ASSIGN .)


state 228

    (15) assignment_operator -> SHR_ASSIGN .

    THIS            reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    LPAREN          reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    NEW             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    IDENT           reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    HEX_LIT         reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    OCTAL_LIT       reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    BINARY_LIT      reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    DECIMAL_LIT     reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    CHAR_LIT        reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    STRING_LIT      reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    BOOL_LIT        reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    NULL_LIT        reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    SUPER           reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    BOOLEAN         reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    VOID            reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    BYTE            reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    SHORT           reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    INT             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    LONG            reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    CHAR            reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    FLOAT           reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    DOUBLE          reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    ADD             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    SUB             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    INC             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    DEC             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    LNOT            reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)
    NOT             reduce using rule 15 (assignment_operator -> SHR_ASSIGN .)


state 229

    (16) assignment_operator -> SHR_UN_ASSIGN .

    THIS            reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    LPAREN          reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    NEW             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    IDENT           reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    HEX_LIT         reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    OCTAL_LIT       reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    BINARY_LIT      reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    DECIMAL_LIT     reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    CHAR_LIT        reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    STRING_LIT      reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    BOOL_LIT        reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    NULL_LIT        reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    SUPER           reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    BOOLEAN         reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    VOID            reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    BYTE            reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    SHORT           reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    INT             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    LONG            reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    CHAR            reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    FLOAT           reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    DOUBLE          reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    ADD             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    SUB             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    INC             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    DEC             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    LNOT            reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)
    NOT             reduce using rule 16 (assignment_operator -> SHR_UN_ASSIGN .)


state 230

    (17) assignment_operator -> AND_ASSIGN .

    THIS            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NEW             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    IDENT           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    HEX_LIT         reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    OCTAL_LIT       reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    BINARY_LIT      reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    DECIMAL_LIT     reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    CHAR_LIT        reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    STRING_LIT      reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    BOOL_LIT        reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NULL_LIT        reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    SUPER           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    BOOLEAN         reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    VOID            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    BYTE            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    SHORT           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    INT             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    LONG            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    CHAR            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    FLOAT           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    DOUBLE          reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    ADD             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    SUB             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    INC             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    DEC             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    LNOT            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)


state 231

    (18) assignment_operator -> OR_ASSIGN .

    THIS            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NEW             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    IDENT           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    HEX_LIT         reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    OCTAL_LIT       reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    BINARY_LIT      reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    DECIMAL_LIT     reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    CHAR_LIT        reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    STRING_LIT      reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    BOOL_LIT        reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NULL_LIT        reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    SUPER           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    BOOLEAN         reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    VOID            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    BYTE            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    SHORT           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    INT             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    LONG            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    CHAR            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    FLOAT           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    DOUBLE          reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    ADD             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    SUB             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    INC             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    DEC             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    LNOT            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)


state 232

    (19) assignment_operator -> XOR_ASSIGN .

    THIS            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NEW             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    IDENT           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    HEX_LIT         reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    OCTAL_LIT       reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    BINARY_LIT      reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    DECIMAL_LIT     reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_HEX_LIT   reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_DEC_LIT   reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    CHAR_LIT        reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    STRING_LIT      reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    BOOL_LIT        reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NULL_LIT        reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    SUPER           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    BOOLEAN         reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    VOID            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    BYTE            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    SHORT           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    INT             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    LONG            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    CHAR            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    FLOAT           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    DOUBLE          reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    ADD             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    SUB             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    INC             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    DEC             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    LNOT            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)


state 233

    (21) conditional_expression -> conditional_or_expression QUES . expression COLON conditional_expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    conditional_or_expression      shift and go to state 54
    expression                     shift and go to state 420
    conditional_expression         shift and go to state 52
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    postfix_expression             shift and go to state 53
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 234

    (26) conditional_or_expression -> conditional_or_expression LOR . marker_next_quad conditional_and_expression
    (35) marker_next_quad -> .

    ADD             reduce using rule 35 (marker_next_quad -> .)
    SUB             reduce using rule 35 (marker_next_quad -> .)
    INC             reduce using rule 35 (marker_next_quad -> .)
    DEC             reduce using rule 35 (marker_next_quad -> .)
    LNOT            reduce using rule 35 (marker_next_quad -> .)
    NOT             reduce using rule 35 (marker_next_quad -> .)
    LPAREN          reduce using rule 35 (marker_next_quad -> .)
    THIS            reduce using rule 35 (marker_next_quad -> .)
    NEW             reduce using rule 35 (marker_next_quad -> .)
    IDENT           reduce using rule 35 (marker_next_quad -> .)
    HEX_LIT         reduce using rule 35 (marker_next_quad -> .)
    OCTAL_LIT       reduce using rule 35 (marker_next_quad -> .)
    BINARY_LIT      reduce using rule 35 (marker_next_quad -> .)
    DECIMAL_LIT     reduce using rule 35 (marker_next_quad -> .)
    FLOAT_HEX_LIT   reduce using rule 35 (marker_next_quad -> .)
    FLOAT_DEC_LIT   reduce using rule 35 (marker_next_quad -> .)
    CHAR_LIT        reduce using rule 35 (marker_next_quad -> .)
    STRING_LIT      reduce using rule 35 (marker_next_quad -> .)
    BOOL_LIT        reduce using rule 35 (marker_next_quad -> .)
    NULL_LIT        reduce using rule 35 (marker_next_quad -> .)
    SUPER           reduce using rule 35 (marker_next_quad -> .)
    BOOLEAN         reduce using rule 35 (marker_next_quad -> .)
    VOID            reduce using rule 35 (marker_next_quad -> .)
    BYTE            reduce using rule 35 (marker_next_quad -> .)
    SHORT           reduce using rule 35 (marker_next_quad -> .)
    INT             reduce using rule 35 (marker_next_quad -> .)
    LONG            reduce using rule 35 (marker_next_quad -> .)
    CHAR            reduce using rule 35 (marker_next_quad -> .)
    FLOAT           reduce using rule 35 (marker_next_quad -> .)
    DOUBLE          reduce using rule 35 (marker_next_quad -> .)

    marker_next_quad               shift and go to state 421

state 235

    (329) class_instance_creation_expression -> primary PERIOD . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary PERIOD . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> primary PERIOD . IDENT
    (222) method_invocation -> primary PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (403) type_arguments -> . LSS type_argument_list1

    NEW             shift and go to state 422
    IDENT           shift and go to state 424
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 423

state 236

    (148) primary_no_new_array -> name PERIOD . THIS
    (149) primary_no_new_array -> name PERIOD . SUPER
    (150) primary_no_new_array -> name PERIOD . CLASS
    (352) qualified_name -> name PERIOD . simple_name
    (221) method_invocation -> name PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (333) class_instance_creation_expression_name -> name PERIOD .
    (351) simple_name -> . IDENT
    (403) type_arguments -> . LSS type_argument_list1

    THIS            shift and go to state 425
    SUPER           shift and go to state 426
    CLASS           shift and go to state 427
    IDENT           shift and go to state 430
    NEW             reduce using rule 333 (class_instance_creation_expression_name -> name PERIOD .)
    LSS             shift and go to state 185

    simple_name                    shift and go to state 428
    type_arguments                 shift and go to state 429

state 237

    (151) primary_no_new_array -> name dims . PERIOD CLASS

    PERIOD          shift and go to state 431


state 238

    (338) array_access -> name LBRACK . expression RBRACK
    (159) one_dim_loop -> LBRACK . RBRACK
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RBRACK          shift and go to state 433
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    expression                     shift and go to state 432
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 239

    (156) dims -> dims_loop .
    (158) dims_loop -> dims_loop . one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          reduce using rule 156 (dims -> dims_loop .)
    IDENT           reduce using rule 156 (dims -> dims_loop .)
    INSTANCEOF      reduce using rule 156 (dims -> dims_loop .)
    EQL             reduce using rule 156 (dims -> dims_loop .)
    NEQ             reduce using rule 156 (dims -> dims_loop .)
    AND             reduce using rule 156 (dims -> dims_loop .)
    XOR             reduce using rule 156 (dims -> dims_loop .)
    OR              reduce using rule 156 (dims -> dims_loop .)
    LAND            reduce using rule 156 (dims -> dims_loop .)
    QUES            reduce using rule 156 (dims -> dims_loop .)
    LOR             reduce using rule 156 (dims -> dims_loop .)
    $end            reduce using rule 156 (dims -> dims_loop .)
    SEMICOLON       reduce using rule 156 (dims -> dims_loop .)
    COLON           reduce using rule 156 (dims -> dims_loop .)
    RPAREN          reduce using rule 156 (dims -> dims_loop .)
    RBRACK          reduce using rule 156 (dims -> dims_loop .)
    COMMA           reduce using rule 156 (dims -> dims_loop .)
    RBRACE          reduce using rule 156 (dims -> dims_loop .)
    ELLIPSIS        reduce using rule 156 (dims -> dims_loop .)
    ASSIGN          reduce using rule 156 (dims -> dims_loop .)
    GTR             reduce using rule 156 (dims -> dims_loop .)
    SHR             reduce using rule 156 (dims -> dims_loop .)
    SHR_UN          reduce using rule 156 (dims -> dims_loop .)
    THROWS          reduce using rule 156 (dims -> dims_loop .)
    LBRACE          reduce using rule 156 (dims -> dims_loop .)
    LBRACK          shift and go to state 279

    one_dim_loop                   shift and go to state 434

state 240

    (157) dims_loop -> one_dim_loop .

    LBRACK          reduce using rule 157 (dims_loop -> one_dim_loop .)
    PERIOD          reduce using rule 157 (dims_loop -> one_dim_loop .)
    IDENT           reduce using rule 157 (dims_loop -> one_dim_loop .)
    INSTANCEOF      reduce using rule 157 (dims_loop -> one_dim_loop .)
    EQL             reduce using rule 157 (dims_loop -> one_dim_loop .)
    NEQ             reduce using rule 157 (dims_loop -> one_dim_loop .)
    AND             reduce using rule 157 (dims_loop -> one_dim_loop .)
    XOR             reduce using rule 157 (dims_loop -> one_dim_loop .)
    OR              reduce using rule 157 (dims_loop -> one_dim_loop .)
    LAND            reduce using rule 157 (dims_loop -> one_dim_loop .)
    QUES            reduce using rule 157 (dims_loop -> one_dim_loop .)
    LOR             reduce using rule 157 (dims_loop -> one_dim_loop .)
    $end            reduce using rule 157 (dims_loop -> one_dim_loop .)
    SEMICOLON       reduce using rule 157 (dims_loop -> one_dim_loop .)
    COLON           reduce using rule 157 (dims_loop -> one_dim_loop .)
    RPAREN          reduce using rule 157 (dims_loop -> one_dim_loop .)
    RBRACK          reduce using rule 157 (dims_loop -> one_dim_loop .)
    COMMA           reduce using rule 157 (dims_loop -> one_dim_loop .)
    RBRACE          reduce using rule 157 (dims_loop -> one_dim_loop .)
    ELLIPSIS        reduce using rule 157 (dims_loop -> one_dim_loop .)
    ASSIGN          reduce using rule 157 (dims_loop -> one_dim_loop .)
    GTR             reduce using rule 157 (dims_loop -> one_dim_loop .)
    SHR             reduce using rule 157 (dims_loop -> one_dim_loop .)
    SHR_UN          reduce using rule 157 (dims_loop -> one_dim_loop .)
    THROWS          reduce using rule 157 (dims_loop -> one_dim_loop .)
    LBRACE          reduce using rule 157 (dims_loop -> one_dim_loop .)


state 241

    (31) conditional_and_expression -> conditional_and_expression LAND . marker_next_quad inclusive_or_expression
    (35) marker_next_quad -> .

    ADD             reduce using rule 35 (marker_next_quad -> .)
    SUB             reduce using rule 35 (marker_next_quad -> .)
    INC             reduce using rule 35 (marker_next_quad -> .)
    DEC             reduce using rule 35 (marker_next_quad -> .)
    LNOT            reduce using rule 35 (marker_next_quad -> .)
    NOT             reduce using rule 35 (marker_next_quad -> .)
    LPAREN          reduce using rule 35 (marker_next_quad -> .)
    THIS            reduce using rule 35 (marker_next_quad -> .)
    NEW             reduce using rule 35 (marker_next_quad -> .)
    IDENT           reduce using rule 35 (marker_next_quad -> .)
    HEX_LIT         reduce using rule 35 (marker_next_quad -> .)
    OCTAL_LIT       reduce using rule 35 (marker_next_quad -> .)
    BINARY_LIT      reduce using rule 35 (marker_next_quad -> .)
    DECIMAL_LIT     reduce using rule 35 (marker_next_quad -> .)
    FLOAT_HEX_LIT   reduce using rule 35 (marker_next_quad -> .)
    FLOAT_DEC_LIT   reduce using rule 35 (marker_next_quad -> .)
    CHAR_LIT        reduce using rule 35 (marker_next_quad -> .)
    STRING_LIT      reduce using rule 35 (marker_next_quad -> .)
    BOOL_LIT        reduce using rule 35 (marker_next_quad -> .)
    NULL_LIT        reduce using rule 35 (marker_next_quad -> .)
    SUPER           reduce using rule 35 (marker_next_quad -> .)
    BOOLEAN         reduce using rule 35 (marker_next_quad -> .)
    VOID            reduce using rule 35 (marker_next_quad -> .)
    BYTE            reduce using rule 35 (marker_next_quad -> .)
    SHORT           reduce using rule 35 (marker_next_quad -> .)
    INT             reduce using rule 35 (marker_next_quad -> .)
    LONG            reduce using rule 35 (marker_next_quad -> .)
    CHAR            reduce using rule 35 (marker_next_quad -> .)
    FLOAT           reduce using rule 35 (marker_next_quad -> .)
    DOUBLE          reduce using rule 35 (marker_next_quad -> .)

    marker_next_quad               shift and go to state 435

state 242

    (339) array_access -> primary_no_new_array LBRACK . expression RBRACK
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary_no_new_array           shift and go to state 60
    expression                     shift and go to state 436
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 243

    (340) array_access -> array_creation_with_array_initializer LBRACK . expression RBRACK
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    array_creation_with_array_initializer shift and go to state 61
    expression                     shift and go to state 437
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 244

    (118) pre_increment_expression -> INC unary_expression .

    MUL             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    QUO             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    REM             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    ADD             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    SUB             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    SHL             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    SHR             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    SHR_UN          reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    GTR             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    LSS             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    GEQ             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    LEQ             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    INSTANCEOF      reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    EQL             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    NEQ             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    AND             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    XOR             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    OR              reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    LAND            reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    QUES            reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    LOR             reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    $end            reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    SEMICOLON       reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    RPAREN          reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    COLON           reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    RBRACK          reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    COMMA           reduce using rule 118 (pre_increment_expression -> INC unary_expression .)
    RBRACE          reduce using rule 118 (pre_increment_expression -> INC unary_expression .)


state 245

    (37) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    exclusive_or_expression        shift and go to state 438
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 246

    (146) primary_no_new_array -> LPAREN name . RPAREN
    (161) cast_expression -> LPAREN name . type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> LPAREN name . type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> LPAREN name . RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> LPAREN name . dims RPAREN unary_expression_not_plus_minus
    (352) qualified_name -> name . PERIOD simple_name
    (24) conditional_expression_not_name -> name . QUES expression COLON conditional_expression
    (129) postfix_expression -> name .
    (29) conditional_or_expression_not_name -> name . LOR marker_next_quad conditional_and_expression
    (34) conditional_and_expression_not_name -> name . LAND marker_next_quad inclusive_or_expression
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (40) inclusive_or_expression_not_name -> name . OR exclusive_or_expression
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> name . LBRACK expression RBRACK
    (45) exclusive_or_expression_not_name -> name . XOR and_expression
    (333) class_instance_creation_expression_name -> name . PERIOD
    (50) and_expression_not_name -> name . AND equality_expression
    (56) equality_expression_not_name -> name . EQL instanceof_expression
    (58) equality_expression_not_name -> name . NEQ instanceof_expression
    (62) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (71) relational_expression_not_name -> name . LSS shift_expression
    (73) relational_expression_not_name -> name . GTR shift_expression
    (75) relational_expression_not_name -> name . GEQ shift_expression
    (77) relational_expression_not_name -> name . LEQ shift_expression
    (84) shift_expression_not_name -> name . SHL additive_expression
    (86) shift_expression_not_name -> name . SHR additive_expression
    (88) shift_expression_not_name -> name . SHR_UN additive_expression
    (94) additive_expression_not_name -> name . ADD multiplicative_expression
    (96) additive_expression_not_name -> name . SUB multiplicative_expression
    (103) multiplicative_expression_not_name -> name . MUL unary_expression
    (105) multiplicative_expression_not_name -> name . QUO unary_expression
    (107) multiplicative_expression_not_name -> name . REM unary_expression
    (403) type_arguments -> . LSS type_argument_list1
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    RPAREN          shift and go to state 439
    PERIOD          shift and go to state 441
    QUES            shift and go to state 443
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LOR             shift and go to state 444
    LAND            shift and go to state 445
    OR              shift and go to state 446
    LBRACK          shift and go to state 238
    XOR             shift and go to state 447
    AND             shift and go to state 448
    EQL             shift and go to state 449
    NEQ             shift and go to state 450
    INSTANCEOF      shift and go to state 451
    LSS             shift and go to state 452
    GTR             shift and go to state 453
    GEQ             shift and go to state 454
    LEQ             shift and go to state 455
    SHL             shift and go to state 456
    SHR             shift and go to state 457
    SHR_UN          shift and go to state 458
    ADD             shift and go to state 459
    SUB             shift and go to state 460
    MUL             shift and go to state 461
    QUO             shift and go to state 462
    REM             shift and go to state 463

    type_arguments                 shift and go to state 440
    dims                           shift and go to state 442
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 247

    (147) primary_no_new_array -> LPAREN expression_not_name . RPAREN

    RPAREN          shift and go to state 464


state 248

    (160) cast_expression -> LPAREN primitive_type . dims_opt RPAREN unary_expression
    (152) primary_no_new_array -> primitive_type . dims PERIOD CLASS
    (153) primary_no_new_array -> primitive_type . PERIOD CLASS
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 278
    RPAREN          reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 465
    dims                           shift and go to state 466
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 249

    (2) expression_not_name -> assignment_expression_not_name .

    RPAREN          reduce using rule 2 (expression_not_name -> assignment_expression_not_name .)


state 250

    (5) assignment_expression_not_name -> assignment .

    RPAREN          reduce using rule 5 (assignment_expression_not_name -> assignment .)


state 251

    (6) assignment_expression_not_name -> conditional_expression_not_name .

    RPAREN          reduce using rule 6 (assignment_expression_not_name -> conditional_expression_not_name .)


state 252

    (22) conditional_expression_not_name -> conditional_or_expression_not_name .
    (23) conditional_expression_not_name -> conditional_or_expression_not_name . QUES expression COLON conditional_expression
    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name . LOR marker_next_quad conditional_and_expression

    RPAREN          reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    COMMA           reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    RBRACE          reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    QUES            shift and go to state 468
    LOR             shift and go to state 469


state 253

    (128) postfix_expression -> primary .
    (329) class_instance_creation_expression -> primary . PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary . PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> primary . PERIOD IDENT
    (222) method_invocation -> primary . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (132) postfix_expression_not_name -> primary .

    INC             reduce using rule 128 (postfix_expression -> primary .)
    DEC             reduce using rule 128 (postfix_expression -> primary .)
    ASSIGN          reduce using rule 128 (postfix_expression -> primary .)
    MUL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    QUO_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    REM_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    ADD_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SUB_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_UN_ASSIGN   reduce using rule 128 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    PERIOD          shift and go to state 235
    MUL             reduce using rule 132 (postfix_expression_not_name -> primary .)
    QUO             reduce using rule 132 (postfix_expression_not_name -> primary .)
    REM             reduce using rule 132 (postfix_expression_not_name -> primary .)
    ADD             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SUB             reduce using rule 132 (postfix_expression_not_name -> primary .)
    LSS             reduce using rule 132 (postfix_expression_not_name -> primary .)
    GTR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    GEQ             reduce using rule 132 (postfix_expression_not_name -> primary .)
    LEQ             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SHL             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SHR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SHR_UN          reduce using rule 132 (postfix_expression_not_name -> primary .)
    INSTANCEOF      reduce using rule 132 (postfix_expression_not_name -> primary .)
    EQL             reduce using rule 132 (postfix_expression_not_name -> primary .)
    NEQ             reduce using rule 132 (postfix_expression_not_name -> primary .)
    AND             reduce using rule 132 (postfix_expression_not_name -> primary .)
    XOR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    OR              reduce using rule 132 (postfix_expression_not_name -> primary .)
    LAND            reduce using rule 132 (postfix_expression_not_name -> primary .)
    QUES            reduce using rule 132 (postfix_expression_not_name -> primary .)
    LOR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    RPAREN          reduce using rule 132 (postfix_expression_not_name -> primary .)


state 254

    (130) postfix_expression -> post_increment_expression .
    (133) postfix_expression_not_name -> post_increment_expression .

    INC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    DEC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ASSIGN          reduce using rule 130 (postfix_expression -> post_increment_expression .)
    MUL_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    QUO_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    REM_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    ADD_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SUB_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHL_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    SHR_UN_ASSIGN   reduce using rule 130 (postfix_expression -> post_increment_expression .)
    AND_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    OR_ASSIGN       reduce using rule 130 (postfix_expression -> post_increment_expression .)
    XOR_ASSIGN      reduce using rule 130 (postfix_expression -> post_increment_expression .)
    MUL             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    QUO             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    REM             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    ADD             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SUB             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LSS             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    GTR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    GEQ             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LEQ             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SHL             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SHR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SHR_UN          reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    INSTANCEOF      reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    EQL             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    NEQ             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    AND             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    XOR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    OR              reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LAND            reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    QUES            reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LOR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    RPAREN          reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)


state 255

    (131) postfix_expression -> post_decrement_expression .
    (134) postfix_expression_not_name -> post_decrement_expression .

    INC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    DEC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ASSIGN          reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    MUL_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    QUO_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    REM_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    ADD_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SUB_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHL_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    SHR_UN_ASSIGN   reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    AND_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    OR_ASSIGN       reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    XOR_ASSIGN      reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    MUL             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    QUO             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    REM             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    ADD             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SUB             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LSS             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    GTR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    GEQ             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LEQ             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SHL             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SHR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SHR_UN          reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    INSTANCEOF      reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    EQL             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    NEQ             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    AND             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    XOR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    OR              reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LAND            reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    QUES            reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LOR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    RPAREN          reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)


state 256

    (27) conditional_or_expression_not_name -> conditional_and_expression_not_name .
    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name . LAND marker_next_quad inclusive_or_expression

    QUES            reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    LOR             reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    RPAREN          reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    COMMA           reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    RBRACE          reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    LAND            shift and go to state 470


state 257

    (32) conditional_and_expression_not_name -> inclusive_or_expression_not_name .
    (39) inclusive_or_expression_not_name -> inclusive_or_expression_not_name . OR exclusive_or_expression

    LAND            reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    QUES            reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    LOR             reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    RPAREN          reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    COMMA           reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    RBRACE          reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    OR              shift and go to state 471


state 258

    (38) inclusive_or_expression_not_name -> exclusive_or_expression_not_name .
    (44) exclusive_or_expression_not_name -> exclusive_or_expression_not_name . XOR and_expression

    OR              reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    LAND            reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    QUES            reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    LOR             reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    RPAREN          reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    COMMA           reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    RBRACE          reduce using rule 38 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    XOR             shift and go to state 472


state 259

    (43) exclusive_or_expression_not_name -> and_expression_not_name .
    (49) and_expression_not_name -> and_expression_not_name . AND equality_expression

    XOR             reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    OR              reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    LAND            reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    QUES            reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    LOR             reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    RPAREN          reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    COMMA           reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    RBRACE          reduce using rule 43 (exclusive_or_expression_not_name -> and_expression_not_name .)
    AND             shift and go to state 473


state 260

    (48) and_expression_not_name -> equality_expression_not_name .
    (55) equality_expression_not_name -> equality_expression_not_name . EQL instanceof_expression
    (57) equality_expression_not_name -> equality_expression_not_name . NEQ instanceof_expression

    AND             reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    XOR             reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    OR              reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    LAND            reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    QUES            reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    LOR             reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    RPAREN          reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    COMMA           reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    RBRACE          reduce using rule 48 (and_expression_not_name -> equality_expression_not_name .)
    EQL             shift and go to state 474
    NEQ             shift and go to state 475


state 261

    (54) equality_expression_not_name -> instanceof_expression_not_name .
    (63) instanceof_expression_not_name -> instanceof_expression_not_name . INSTANCEOF reference_type

    EQL             reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    NEQ             reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    AND             reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    XOR             reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    OR              reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    LAND            reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    QUES            reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    LOR             reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    RPAREN          reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    COMMA           reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    RBRACE          reduce using rule 54 (equality_expression_not_name -> instanceof_expression_not_name .)
    INSTANCEOF      shift and go to state 476


state 262

    (61) instanceof_expression_not_name -> relational_expression_not_name .

    INSTANCEOF      reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    EQL             reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    NEQ             reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    AND             reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    XOR             reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    OR              reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    LAND            reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    QUES            reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    LOR             reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    RPAREN          reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    COMMA           reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)
    RBRACE          reduce using rule 61 (instanceof_expression_not_name -> relational_expression_not_name .)


state 263

    (69) relational_expression_not_name -> shift_expression_not_name .
    (70) relational_expression_not_name -> shift_expression_not_name . LSS shift_expression
    (72) relational_expression_not_name -> shift_expression_not_name . GTR shift_expression
    (74) relational_expression_not_name -> shift_expression_not_name . GEQ shift_expression
    (76) relational_expression_not_name -> shift_expression_not_name . LEQ shift_expression
    (83) shift_expression_not_name -> shift_expression_not_name . SHL additive_expression
    (85) shift_expression_not_name -> shift_expression_not_name . SHR additive_expression
    (87) shift_expression_not_name -> shift_expression_not_name . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    EQL             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    NEQ             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    AND             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    XOR             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    OR              reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    LAND            reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    QUES            reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    LOR             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    RPAREN          reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    COMMA           reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    RBRACE          reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name .)
    LSS             shift and go to state 477
    GTR             shift and go to state 478
    GEQ             shift and go to state 479
    LEQ             shift and go to state 480
    SHL             shift and go to state 481
    SHR             shift and go to state 482
    SHR_UN          shift and go to state 483


state 264

    (82) shift_expression_not_name -> additive_expression_not_name .
    (93) additive_expression_not_name -> additive_expression_not_name . ADD multiplicative_expression
    (95) additive_expression_not_name -> additive_expression_not_name . SUB multiplicative_expression

    LSS             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    GTR             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    GEQ             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    LEQ             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    SHL             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    SHR             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    SHR_UN          reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    INSTANCEOF      reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    EQL             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    NEQ             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    AND             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    XOR             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    OR              reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    LAND            reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    QUES            reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    LOR             reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    RPAREN          reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    COMMA           reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    RBRACE          reduce using rule 82 (shift_expression_not_name -> additive_expression_not_name .)
    ADD             shift and go to state 484
    SUB             shift and go to state 485


state 265

    (92) additive_expression_not_name -> multiplicative_expression_not_name .
    (102) multiplicative_expression_not_name -> multiplicative_expression_not_name . MUL unary_expression
    (104) multiplicative_expression_not_name -> multiplicative_expression_not_name . QUO unary_expression
    (106) multiplicative_expression_not_name -> multiplicative_expression_not_name . REM unary_expression

    ADD             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    SUB             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    LSS             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    GTR             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    GEQ             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    LEQ             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    SHL             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    SHR             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    SHR_UN          reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    INSTANCEOF      reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    EQL             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    NEQ             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    AND             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    XOR             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    OR              reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    LAND            reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    QUES            reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    LOR             reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    RPAREN          reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    COMMA           reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    RBRACE          reduce using rule 92 (additive_expression_not_name -> multiplicative_expression_not_name .)
    MUL             shift and go to state 486
    QUO             shift and go to state 487
    REM             shift and go to state 488


state 266

    (115) unary_expression_not_name -> ADD . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 489
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 267

    (116) unary_expression_not_name -> SUB . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 490
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 268

    (101) multiplicative_expression_not_name -> unary_expression_not_name .

    MUL             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    QUO             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    REM             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    ADD             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    SUB             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    LSS             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    GTR             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    GEQ             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    LEQ             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    SHL             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    SHR             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    SHR_UN          reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    INSTANCEOF      reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    EQL             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    NEQ             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    AND             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    XOR             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    OR              reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    LAND            reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    QUES            reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    LOR             reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    RPAREN          reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    COMMA           reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)
    RBRACE          reduce using rule 101 (multiplicative_expression_not_name -> unary_expression_not_name .)


state 269

    (113) unary_expression_not_name -> pre_increment_expression .

    MUL             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    QUO             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    REM             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    ADD             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    SUB             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    LSS             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    GTR             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    GEQ             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    LEQ             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    SHL             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    SHR             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    SHR_UN          reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    INSTANCEOF      reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    EQL             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    NEQ             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    AND             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    XOR             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    OR              reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    LAND            reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    QUES            reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    LOR             reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    RPAREN          reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    COMMA           reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)
    RBRACE          reduce using rule 113 (unary_expression_not_name -> pre_increment_expression .)


state 270

    (114) unary_expression_not_name -> pre_decrement_expression .

    MUL             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    QUO             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    REM             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    ADD             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    SUB             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    LSS             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    GTR             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    GEQ             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    LEQ             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    SHL             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    SHR             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    SHR_UN          reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    INSTANCEOF      reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    EQL             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    NEQ             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    AND             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    XOR             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    OR              reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    LAND            reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    QUES            reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    LOR             reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    RPAREN          reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    COMMA           reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)
    RBRACE          reduce using rule 114 (unary_expression_not_name -> pre_decrement_expression .)


state 271

    (117) unary_expression_not_name -> unary_expression_not_plus_minus_not_name .

    MUL             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    QUO             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    REM             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    ADD             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    SUB             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    LSS             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    GTR             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    GEQ             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    LEQ             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    SHL             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    SHR             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    SHR_UN          reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    INSTANCEOF      reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    EQL             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    NEQ             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    AND             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    XOR             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    OR              reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    LAND            reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    QUES            reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    LOR             reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    RPAREN          reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    COMMA           reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    RBRACE          reduce using rule 117 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)


state 272

    (124) unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .

    MUL             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    QUO             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    REM             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    ADD             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    SUB             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    LSS             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    GTR             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    GEQ             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    LEQ             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    SHL             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    SHR             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    SHR_UN          reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    INSTANCEOF      reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    EQL             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    NEQ             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    AND             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    XOR             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    OR              reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    LAND            reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    QUES            reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    LOR             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    RPAREN          reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    COMMA           reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    RBRACE          reduce using rule 124 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)


state 273

    (125) unary_expression_not_plus_minus_not_name -> LNOT . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 491
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 274

    (126) unary_expression_not_plus_minus_not_name -> NOT . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 492
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 275

    (127) unary_expression_not_plus_minus_not_name -> cast_expression .

    MUL             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    QUO             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    REM             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    ADD             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    SUB             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    LSS             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    GTR             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    GEQ             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    LEQ             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    SHL             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    SHR             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    SHR_UN          reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    INSTANCEOF      reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    EQL             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    NEQ             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    AND             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    XOR             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    OR              reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    LAND            reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    QUES            reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    LOR             reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    RPAREN          reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    COMMA           reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    RBRACE          reduce using rule 127 (unary_expression_not_plus_minus_not_name -> cast_expression .)


state 276

    (337) field_access -> SUPER PERIOD . IDENT
    (223) method_invocation -> SUPER PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> SUPER PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (403) type_arguments -> . LSS type_argument_list1

    IDENT           shift and go to state 493
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 494

state 277

    (152) primary_no_new_array -> primitive_type dims . PERIOD CLASS

    PERIOD          shift and go to state 495


state 278

    (153) primary_no_new_array -> primitive_type PERIOD . CLASS

    CLASS           shift and go to state 496


state 279

    (159) one_dim_loop -> LBRACK . RBRACK

    RBRACK          shift and go to state 433


state 280

    (341) array_creation_with_array_initializer -> NEW primitive_type . dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> NEW primitive_type . dim_with_or_without_exprs
    (343) dim_with_or_without_exprs -> . dim_with_or_without_expr
    (344) dim_with_or_without_exprs -> . dim_with_or_without_exprs dim_with_or_without_expr
    (345) dim_with_or_without_expr -> . LBRACK expression RBRACK
    (346) dim_with_or_without_expr -> . LBRACK RBRACK

    LBRACK          shift and go to state 499

    dim_with_or_without_exprs      shift and go to state 497
    dim_with_or_without_expr       shift and go to state 498

state 281

    (342) array_creation_with_array_initializer -> NEW class_or_interface_type . dim_with_or_without_exprs array_initializer
    (348) array_creation_without_array_initializer -> NEW class_or_interface_type . dim_with_or_without_exprs
    (394) class_type -> class_or_interface_type .
    (343) dim_with_or_without_exprs -> . dim_with_or_without_expr
    (344) dim_with_or_without_exprs -> . dim_with_or_without_exprs dim_with_or_without_expr
    (345) dim_with_or_without_expr -> . LBRACK expression RBRACK
    (346) dim_with_or_without_expr -> . LBRACK RBRACK

    LPAREN          reduce using rule 394 (class_type -> class_or_interface_type .)
    LBRACK          shift and go to state 499

    dim_with_or_without_exprs      shift and go to state 500
    dim_with_or_without_expr       shift and go to state 498

state 282

    (327) class_instance_creation_expression -> NEW type_arguments . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (394) class_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    class_type                     shift and go to state 501
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 283

    (328) class_instance_creation_expression -> NEW class_type . LPAREN argument_list_opt RPAREN class_body_opt

    LPAREN          shift and go to state 503


state 284

    (393) class_or_interface_type -> generic_type .
    (396) class_or_interface -> generic_type . PERIOD name

    LBRACK          reduce using rule 393 (class_or_interface_type -> generic_type .)
    LPAREN          reduce using rule 393 (class_or_interface_type -> generic_type .)
    COMMA           reduce using rule 393 (class_or_interface_type -> generic_type .)
    LBRACE          reduce using rule 393 (class_or_interface_type -> generic_type .)
    RPAREN          reduce using rule 393 (class_or_interface_type -> generic_type .)
    SEMICOLON       reduce using rule 393 (class_or_interface_type -> generic_type .)
    PERIOD          shift and go to state 504


state 285

    (395) class_or_interface -> name .
    (352) qualified_name -> name . PERIOD simple_name

    LSS             reduce using rule 395 (class_or_interface -> name .)
    LBRACK          reduce using rule 395 (class_or_interface -> name .)
    LPAREN          reduce using rule 395 (class_or_interface -> name .)
    COMMA           reduce using rule 395 (class_or_interface -> name .)
    LBRACE          reduce using rule 395 (class_or_interface -> name .)
    RPAREN          reduce using rule 395 (class_or_interface -> name .)
    SEMICOLON       reduce using rule 395 (class_or_interface -> name .)
    PERIOD          shift and go to state 372


state 286

    (220) method_invocation -> IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 505
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 287

    (42) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    and_expression                 shift and go to state 509
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 288

    (331) class_instance_creation_expression -> class_instance_creation_expression_name NEW . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW . type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (394) class_type -> . class_or_interface_type
    (403) type_arguments -> . LSS type_argument_list1
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    LSS             shift and go to state 185
    IDENT           shift and go to state 196

    class_type                     shift and go to state 510
    type_arguments                 shift and go to state 511
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 289

    (47) and_expression -> and_expression AND . equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    equality_expression            shift and go to state 512
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 290

    (52) equality_expression -> equality_expression EQL . instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    instanceof_expression          shift and go to state 513
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 291

    (53) equality_expression -> equality_expression NEQ . instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    instanceof_expression          shift and go to state 514
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 292

    (60) instanceof_expression -> instanceof_expression INSTANCEOF . reference_type
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type                 shift and go to state 515
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    primitive_type                 shift and go to state 369
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 293

    (65) relational_expression -> relational_expression GTR . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 516
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 294

    (66) relational_expression -> relational_expression LSS . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 517
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 295

    (67) relational_expression -> relational_expression GEQ . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 518
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 296

    (68) relational_expression -> relational_expression LEQ . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 519
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 297

    (79) shift_expression -> shift_expression SHL . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    additive_expression            shift and go to state 520
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 298

    (80) shift_expression -> shift_expression SHR . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    additive_expression            shift and go to state 521
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 299

    (81) shift_expression -> shift_expression SHR_UN . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    additive_expression            shift and go to state 522
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 300

    (90) additive_expression -> additive_expression ADD . multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    multiplicative_expression      shift and go to state 523
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 301

    (91) additive_expression -> additive_expression SUB . multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    multiplicative_expression      shift and go to state 524
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 302

    (98) multiplicative_expression -> multiplicative_expression MUL . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 525
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 303

    (99) multiplicative_expression -> multiplicative_expression QUO . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 526
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 304

    (100) multiplicative_expression -> multiplicative_expression REM . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 527
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 305

    (110) unary_expression -> ADD unary_expression .

    MUL             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    QUO             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    REM             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    ADD             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    SUB             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    SHL             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    SHR             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    SHR_UN          reduce using rule 110 (unary_expression -> ADD unary_expression .)
    GTR             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    LSS             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    GEQ             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    LEQ             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    INSTANCEOF      reduce using rule 110 (unary_expression -> ADD unary_expression .)
    EQL             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    NEQ             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    AND             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    XOR             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    OR              reduce using rule 110 (unary_expression -> ADD unary_expression .)
    LAND            reduce using rule 110 (unary_expression -> ADD unary_expression .)
    QUES            reduce using rule 110 (unary_expression -> ADD unary_expression .)
    LOR             reduce using rule 110 (unary_expression -> ADD unary_expression .)
    $end            reduce using rule 110 (unary_expression -> ADD unary_expression .)
    SEMICOLON       reduce using rule 110 (unary_expression -> ADD unary_expression .)
    RPAREN          reduce using rule 110 (unary_expression -> ADD unary_expression .)
    COLON           reduce using rule 110 (unary_expression -> ADD unary_expression .)
    RBRACK          reduce using rule 110 (unary_expression -> ADD unary_expression .)
    COMMA           reduce using rule 110 (unary_expression -> ADD unary_expression .)
    RBRACE          reduce using rule 110 (unary_expression -> ADD unary_expression .)


state 306

    (111) unary_expression -> SUB unary_expression .

    MUL             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    QUO             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    REM             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    ADD             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    SUB             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    SHL             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    SHR             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    SHR_UN          reduce using rule 111 (unary_expression -> SUB unary_expression .)
    GTR             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    LSS             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    GEQ             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    LEQ             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    INSTANCEOF      reduce using rule 111 (unary_expression -> SUB unary_expression .)
    EQL             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    NEQ             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    AND             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    XOR             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    OR              reduce using rule 111 (unary_expression -> SUB unary_expression .)
    LAND            reduce using rule 111 (unary_expression -> SUB unary_expression .)
    QUES            reduce using rule 111 (unary_expression -> SUB unary_expression .)
    LOR             reduce using rule 111 (unary_expression -> SUB unary_expression .)
    $end            reduce using rule 111 (unary_expression -> SUB unary_expression .)
    SEMICOLON       reduce using rule 111 (unary_expression -> SUB unary_expression .)
    RPAREN          reduce using rule 111 (unary_expression -> SUB unary_expression .)
    COLON           reduce using rule 111 (unary_expression -> SUB unary_expression .)
    RBRACK          reduce using rule 111 (unary_expression -> SUB unary_expression .)
    COMMA           reduce using rule 111 (unary_expression -> SUB unary_expression .)
    RBRACE          reduce using rule 111 (unary_expression -> SUB unary_expression .)


state 307

    (121) unary_expression_not_plus_minus -> LNOT unary_expression .

    MUL             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    QUO             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    REM             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    ADD             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    SUB             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    SHL             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    SHR             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    SHR_UN          reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    GTR             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    LSS             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    GEQ             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    LEQ             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    INSTANCEOF      reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    EQL             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    NEQ             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    AND             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    XOR             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    OR              reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    LAND            reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    QUES            reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    LOR             reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    $end            reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    SEMICOLON       reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    RPAREN          reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    COLON           reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    RBRACK          reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    COMMA           reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)
    RBRACE          reduce using rule 121 (unary_expression_not_plus_minus -> LNOT unary_expression .)


state 308

    (122) unary_expression_not_plus_minus -> NOT unary_expression .

    MUL             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    QUO             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    REM             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    ADD             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    SUB             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    SHL             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    SHR             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    SHR_UN          reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GTR             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LSS             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    GEQ             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LEQ             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    INSTANCEOF      reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    EQL             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    NEQ             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    AND             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    XOR             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    OR              reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LAND            reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    QUES            reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    LOR             reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    $end            reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    SEMICOLON       reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RPAREN          reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COLON           reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBRACK          reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    COMMA           reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)
    RBRACE          reduce using rule 122 (unary_expression_not_plus_minus -> NOT unary_expression .)


state 309

    (174) local_variable_declaration_statement -> local_variable_declaration SEMICOLON .

    $end            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    IF              reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    WHILE           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    FOR             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    LBRACE          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    ASSERT          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    SEMICOLON       reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    SWITCH          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    DO              reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    BREAK           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    CONTINUE        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    RETURN          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    SYNCHRONIZED    reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    THROW           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    TRY             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    IDENT           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    BOOLEAN         reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    VOID            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    BYTE            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    SHORT           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    INT             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    LONG            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    CHAR            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    FLOAT           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    DOUBLE          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    PUBLIC          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    PROTECTED       reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    PRIVATE         reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    STATIC          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    ABSTRACT        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    FINAL           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    NATIVE          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    TRANSIENT       reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    VOLATILE        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    STRICTFP        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    THIS            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    SUPER           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    INC             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    DEC             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    NEW             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    LSS             reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    LPAREN          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    ATRATE          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    HEX_LIT         reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    OCTAL_LIT       reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    BINARY_LIT      reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    DECIMAL_LIT     reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    CHAR_LIT        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    STRING_LIT      reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    BOOL_LIT        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    NULL_LIT        reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    CLASS           reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    INTERFACE       reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    RBRACE          reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    CASE            reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)
    DEFAULT         reduce using rule 174 (local_variable_declaration_statement -> local_variable_declaration SEMICOLON .)


state 310

    (175) local_variable_declaration -> type variable_declarators .
    (178) variable_declarators -> variable_declarators . COMMA variable_declarator

    SEMICOLON       reduce using rule 175 (local_variable_declaration -> type variable_declarators .)
    COMMA           shift and go to state 528


state 311

    (177) variable_declarators -> variable_declarator .

    COMMA           reduce using rule 177 (variable_declarators -> variable_declarator .)
    SEMICOLON       reduce using rule 177 (variable_declarators -> variable_declarator .)


state 312

    (179) variable_declarator -> variable_declarator_id .
    (180) variable_declarator -> variable_declarator_id . ASSIGN variable_initializer

    COMMA           reduce using rule 179 (variable_declarator -> variable_declarator_id .)
    SEMICOLON       reduce using rule 179 (variable_declarator -> variable_declarator_id .)
    ASSIGN          shift and go to state 529


state 313

    (181) variable_declarator_id -> IDENT . dims_opt
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    ASSIGN          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 530
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 314

    (176) local_variable_declaration -> modifiers type . variable_declarators
    (177) variable_declarators -> . variable_declarator
    (178) variable_declarators -> . variable_declarators COMMA variable_declarator
    (179) variable_declarator -> . variable_declarator_id
    (180) variable_declarator -> . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarators           shift and go to state 532
    variable_declarator            shift and go to state 311
    variable_declarator_id         shift and go to state 312

state 315

    (379) type -> primitive_type .
    (399) array_type -> primitive_type . dims
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    IDENT           reduce using rule 379 (type -> primitive_type .)
    ELLIPSIS        reduce using rule 379 (type -> primitive_type .)
    OR              reduce using rule 379 (type -> primitive_type .)
    LBRACK          shift and go to state 279

    dims                           shift and go to state 533
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 316

    (400) array_type -> name . dims
    (395) class_or_interface -> name .
    (352) qualified_name -> name . PERIOD simple_name
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LSS             reduce using rule 395 (class_or_interface -> name .)
    IDENT           reduce using rule 395 (class_or_interface -> name .)
    INSTANCEOF      reduce using rule 395 (class_or_interface -> name .)
    EQL             reduce using rule 395 (class_or_interface -> name .)
    NEQ             reduce using rule 395 (class_or_interface -> name .)
    AND             reduce using rule 395 (class_or_interface -> name .)
    XOR             reduce using rule 395 (class_or_interface -> name .)
    OR              reduce using rule 395 (class_or_interface -> name .)
    LAND            reduce using rule 395 (class_or_interface -> name .)
    QUES            reduce using rule 395 (class_or_interface -> name .)
    LOR             reduce using rule 395 (class_or_interface -> name .)
    $end            reduce using rule 395 (class_or_interface -> name .)
    SEMICOLON       reduce using rule 395 (class_or_interface -> name .)
    COLON           reduce using rule 395 (class_or_interface -> name .)
    RPAREN          reduce using rule 395 (class_or_interface -> name .)
    RBRACK          reduce using rule 395 (class_or_interface -> name .)
    COMMA           reduce using rule 395 (class_or_interface -> name .)
    RBRACE          reduce using rule 395 (class_or_interface -> name .)
    ELLIPSIS        reduce using rule 395 (class_or_interface -> name .)
    PERIOD          shift and go to state 372
    LBRACK          shift and go to state 279

    dims                           shift and go to state 534
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 317

    (227) labeled_statement -> label COLON . statement
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    label                          shift and go to state 144
    statement                      shift and go to state 535
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    enhanced_for_statement_header  shift and go to state 149
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 318

    (230) if_then_statement -> IF LPAREN . inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN . inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (584) inc_scope -> .

    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    ADD             reduce using rule 584 (inc_scope -> .)
    SUB             reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    LNOT            reduce using rule 584 (inc_scope -> .)
    NOT             reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 536

state 319

    (146) primary_no_new_array -> LPAREN name . RPAREN
    (352) qualified_name -> name . PERIOD simple_name
    (24) conditional_expression_not_name -> name . QUES expression COLON conditional_expression
    (129) postfix_expression -> name .
    (29) conditional_or_expression_not_name -> name . LOR marker_next_quad conditional_and_expression
    (34) conditional_and_expression_not_name -> name . LAND marker_next_quad inclusive_or_expression
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (40) inclusive_or_expression_not_name -> name . OR exclusive_or_expression
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> name . LBRACK expression RBRACK
    (45) exclusive_or_expression_not_name -> name . XOR and_expression
    (333) class_instance_creation_expression_name -> name . PERIOD
    (50) and_expression_not_name -> name . AND equality_expression
    (56) equality_expression_not_name -> name . EQL instanceof_expression
    (58) equality_expression_not_name -> name . NEQ instanceof_expression
    (62) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (71) relational_expression_not_name -> name . LSS shift_expression
    (73) relational_expression_not_name -> name . GTR shift_expression
    (75) relational_expression_not_name -> name . GEQ shift_expression
    (77) relational_expression_not_name -> name . LEQ shift_expression
    (84) shift_expression_not_name -> name . SHL additive_expression
    (86) shift_expression_not_name -> name . SHR additive_expression
    (88) shift_expression_not_name -> name . SHR_UN additive_expression
    (94) additive_expression_not_name -> name . ADD multiplicative_expression
    (96) additive_expression_not_name -> name . SUB multiplicative_expression
    (103) multiplicative_expression_not_name -> name . MUL unary_expression
    (105) multiplicative_expression_not_name -> name . QUO unary_expression
    (107) multiplicative_expression_not_name -> name . REM unary_expression
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    RPAREN          shift and go to state 537
    PERIOD          shift and go to state 441
    QUES            shift and go to state 443
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LOR             shift and go to state 444
    LAND            shift and go to state 445
    OR              shift and go to state 446
    LBRACK          shift and go to state 238
    XOR             shift and go to state 447
    AND             shift and go to state 448
    EQL             shift and go to state 449
    NEQ             shift and go to state 450
    INSTANCEOF      shift and go to state 451
    LSS             shift and go to state 538
    GTR             shift and go to state 453
    GEQ             shift and go to state 454
    LEQ             shift and go to state 455
    SHL             shift and go to state 456
    SHR             shift and go to state 457
    SHR_UN          shift and go to state 458
    ADD             shift and go to state 459
    SUB             shift and go to state 460
    MUL             shift and go to state 461
    QUO             shift and go to state 462
    REM             shift and go to state 463

    dims                           shift and go to state 237
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 320

    (236) while_statement -> WHILE inc_for_while_stack . LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2

    LPAREN          shift and go to state 539


state 321

    (241) for_statement -> FOR inc_for_while_stack . LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack . LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack . LPAREN inc_scope modifiers type IDENT dims_opt

    LPAREN          shift and go to state 540


state 322

    (257) enhanced_for_statement -> enhanced_for_statement_header statement .

    $end            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    WHILE           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    IF              reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FOR             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    LBRACE          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ASSERT          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SEMICOLON       reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SWITCH          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DO              reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BREAK           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CONTINUE        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    RETURN          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SYNCHRONIZED    reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    THROW           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    TRY             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    IDENT           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BOOLEAN         reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    VOID            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BYTE            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SHORT           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    INT             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    LONG            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CHAR            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FLOAT           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DOUBLE          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PUBLIC          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PROTECTED       reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PRIVATE         reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    STATIC          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ABSTRACT        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FINAL           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NATIVE          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    TRANSIENT       reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    VOLATILE        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    STRICTFP        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    THIS            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SUPER           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    INC             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DEC             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NEW             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    LSS             reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    LPAREN          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ATRATE          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    HEX_LIT         reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    OCTAL_LIT       reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BINARY_LIT      reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DECIMAL_LIT     reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FLOAT_HEX_LIT   reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FLOAT_DEC_LIT   reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CHAR_LIT        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    STRING_LIT      reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BOOL_LIT        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NULL_LIT        reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CLASS           reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    INTERFACE       reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    RBRACE          reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CASE            reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DEFAULT         reduce using rule 257 (enhanced_for_statement -> enhanced_for_statement_header statement .)


state 323

    (290) synchronized_statement -> SYNCHRONIZED . LPAREN expression RPAREN block

    LPAREN          shift and go to state 338


state 324

    (320) explicit_constructor_invocation -> name . PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> name . PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> name . PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> name . PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (129) postfix_expression -> name .
    (333) class_instance_creation_expression_name -> name . PERIOD
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (352) qualified_name -> name . PERIOD simple_name
    (338) array_access -> name . LBRACK expression RBRACK
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 351
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LBRACK          shift and go to state 238

    dims                           shift and go to state 237
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 325

    (399) array_type -> primitive_type dims .
    (152) primary_no_new_array -> primitive_type dims . PERIOD CLASS

    IDENT           reduce using rule 399 (array_type -> primitive_type dims .)
    GTR             reduce using rule 399 (array_type -> primitive_type dims .)
    COMMA           reduce using rule 399 (array_type -> primitive_type dims .)
    PERIOD          shift and go to state 495


state 326

    (165) block -> LBRACE inc_scope . block_statements_opt dec_scope RBRACE
    (166) block_statements_opt -> . block_statements
    (167) block_statements_opt -> . empty
    (168) block_statements -> . block_statement
    (169) block_statements -> . block_statements block_statement
    (583) empty -> .
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    RBRACE          reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    block_statements_opt           shift and go to state 541
    block_statements               shift and go to state 542
    empty                          shift and go to state 543
    block_statement                shift and go to state 544
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 327

    (204) expression_statement -> statement_expression SEMICOLON .

    $end            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    WHILE           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    IF              reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    FOR             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    LBRACE          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    ASSERT          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    SEMICOLON       reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    SWITCH          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    DO              reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    BREAK           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    CONTINUE        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    RETURN          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    THROW           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    TRY             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    IDENT           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    BOOLEAN         reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    VOID            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    BYTE            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    SHORT           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    INT             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    LONG            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    CHAR            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    FLOAT           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    DOUBLE          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    PUBLIC          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    PROTECTED       reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    PRIVATE         reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    STATIC          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    ABSTRACT        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    FINAL           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    NATIVE          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    TRANSIENT       reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    VOLATILE        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    STRICTFP        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    THIS            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    SUPER           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    INC             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    DEC             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    NEW             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    LSS             reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    LPAREN          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    ATRATE          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    HEX_LIT         reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    OCTAL_LIT       reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    BINARY_LIT      reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    DECIMAL_LIT     reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    CHAR_LIT        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    STRING_LIT      reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    BOOL_LIT        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    NULL_LIT        reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    CLASS           reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    INTERFACE       reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    RBRACE          reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    CASE            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    DEFAULT         reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)
    ELSE            reduce using rule 204 (expression_statement -> statement_expression SEMICOLON .)


state 328

    (268) assert_statement -> ASSERT expression . SEMICOLON
    (269) assert_statement -> ASSERT expression . COLON expression SEMICOLON

    SEMICOLON       shift and go to state 545
    COLON           shift and go to state 546


state 329

    (271) switch_statement -> SWITCH LPAREN . inc_scope expression RPAREN switch_block
    (584) inc_scope -> .

    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    ADD             reduce using rule 584 (inc_scope -> .)
    SUB             reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    LNOT            reduce using rule 584 (inc_scope -> .)
    NOT             reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 547

state 330

    (284) do_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 548


state 331

    (285) break_statement -> BREAK SEMICOLON .

    $end            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    ASSERT          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    SYNCHRONIZED    reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    IDENT           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    BYTE            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    PUBLIC          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    PROTECTED       reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    PRIVATE         reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    ABSTRACT        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    NATIVE          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    TRANSIENT       reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    STRICTFP        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    SUPER           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    INC             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    DEC             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    LSS             reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    ATRATE          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    HEX_LIT         reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    OCTAL_LIT       reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    BINARY_LIT      reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    DECIMAL_LIT     reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    CHAR_LIT        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    STRING_LIT      reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    BOOL_LIT        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    NULL_LIT        reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    INTERFACE       reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 285 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 285 (break_statement -> BREAK SEMICOLON .)


state 332

    (286) break_statement -> BREAK IDENT . SEMICOLON

    SEMICOLON       shift and go to state 549


state 333

    (287) continue_statement -> CONTINUE SEMICOLON .

    $end            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    ASSERT          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    SYNCHRONIZED    reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    IDENT           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    BYTE            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    PUBLIC          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    PROTECTED       reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    PRIVATE         reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    ABSTRACT        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    NATIVE          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    TRANSIENT       reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    STRICTFP        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    INC             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    DEC             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    LSS             reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    ATRATE          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    HEX_LIT         reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    OCTAL_LIT       reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    BINARY_LIT      reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    DECIMAL_LIT     reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    CHAR_LIT        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    STRING_LIT      reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    BOOL_LIT        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    NULL_LIT        reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 287 (continue_statement -> CONTINUE SEMICOLON .)


state 334

    (288) continue_statement -> CONTINUE IDENT . SEMICOLON

    SEMICOLON       shift and go to state 550


state 335

    (289) return_statement -> RETURN expression_opt . SEMICOLON

    SEMICOLON       shift and go to state 551


state 336

    (252) expression_opt -> expression .

    SEMICOLON       reduce using rule 252 (expression_opt -> expression .)


state 337

    (253) expression_opt -> empty .

    SEMICOLON       reduce using rule 253 (expression_opt -> empty .)


state 338

    (290) synchronized_statement -> SYNCHRONIZED LPAREN . expression RPAREN block
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 552
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 339

    (291) throw_statement -> THROW expression . SEMICOLON

    SEMICOLON       shift and go to state 553


state 340

    (292) try_statement -> TRY try_block . catches
    (293) try_statement -> TRY try_block . catches_opt finally
    (295) catches -> . catch_clause
    (296) catches -> . catches catch_clause
    (297) catches_opt -> . catches
    (298) catches_opt -> . empty
    (299) catch_clause -> . CATCH LPAREN catch_formal_parameter RPAREN block
    (583) empty -> .

    CATCH           shift and go to state 558
    FINALLY         reduce using rule 583 (empty -> .)

    catches                        shift and go to state 554
    catches_opt                    shift and go to state 555
    catch_clause                   shift and go to state 556
    empty                          shift and go to state 557

state 341

    (304) try_statement_with_resources -> TRY resource_specification . try_block catches_opt
    (305) try_statement_with_resources -> TRY resource_specification . try_block catches_opt finally
    (294) try_block -> . block
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE

    LBRACE          shift and go to state 153

    try_block                      shift and go to state 559
    block                          shift and go to state 342

state 342

    (294) try_block -> block .

    CATCH           reduce using rule 294 (try_block -> block .)
    FINALLY         reduce using rule 294 (try_block -> block .)
    $end            reduce using rule 294 (try_block -> block .)
    WHILE           reduce using rule 294 (try_block -> block .)
    IF              reduce using rule 294 (try_block -> block .)
    FOR             reduce using rule 294 (try_block -> block .)
    LBRACE          reduce using rule 294 (try_block -> block .)
    ASSERT          reduce using rule 294 (try_block -> block .)
    SEMICOLON       reduce using rule 294 (try_block -> block .)
    SWITCH          reduce using rule 294 (try_block -> block .)
    DO              reduce using rule 294 (try_block -> block .)
    BREAK           reduce using rule 294 (try_block -> block .)
    CONTINUE        reduce using rule 294 (try_block -> block .)
    RETURN          reduce using rule 294 (try_block -> block .)
    SYNCHRONIZED    reduce using rule 294 (try_block -> block .)
    THROW           reduce using rule 294 (try_block -> block .)
    TRY             reduce using rule 294 (try_block -> block .)
    IDENT           reduce using rule 294 (try_block -> block .)
    BOOLEAN         reduce using rule 294 (try_block -> block .)
    VOID            reduce using rule 294 (try_block -> block .)
    BYTE            reduce using rule 294 (try_block -> block .)
    SHORT           reduce using rule 294 (try_block -> block .)
    INT             reduce using rule 294 (try_block -> block .)
    LONG            reduce using rule 294 (try_block -> block .)
    CHAR            reduce using rule 294 (try_block -> block .)
    FLOAT           reduce using rule 294 (try_block -> block .)
    DOUBLE          reduce using rule 294 (try_block -> block .)
    PUBLIC          reduce using rule 294 (try_block -> block .)
    PROTECTED       reduce using rule 294 (try_block -> block .)
    PRIVATE         reduce using rule 294 (try_block -> block .)
    STATIC          reduce using rule 294 (try_block -> block .)
    ABSTRACT        reduce using rule 294 (try_block -> block .)
    FINAL           reduce using rule 294 (try_block -> block .)
    NATIVE          reduce using rule 294 (try_block -> block .)
    TRANSIENT       reduce using rule 294 (try_block -> block .)
    VOLATILE        reduce using rule 294 (try_block -> block .)
    STRICTFP        reduce using rule 294 (try_block -> block .)
    THIS            reduce using rule 294 (try_block -> block .)
    SUPER           reduce using rule 294 (try_block -> block .)
    INC             reduce using rule 294 (try_block -> block .)
    DEC             reduce using rule 294 (try_block -> block .)
    NEW             reduce using rule 294 (try_block -> block .)
    LSS             reduce using rule 294 (try_block -> block .)
    LPAREN          reduce using rule 294 (try_block -> block .)
    ATRATE          reduce using rule 294 (try_block -> block .)
    HEX_LIT         reduce using rule 294 (try_block -> block .)
    OCTAL_LIT       reduce using rule 294 (try_block -> block .)
    BINARY_LIT      reduce using rule 294 (try_block -> block .)
    DECIMAL_LIT     reduce using rule 294 (try_block -> block .)
    FLOAT_HEX_LIT   reduce using rule 294 (try_block -> block .)
    FLOAT_DEC_LIT   reduce using rule 294 (try_block -> block .)
    CHAR_LIT        reduce using rule 294 (try_block -> block .)
    STRING_LIT      reduce using rule 294 (try_block -> block .)
    BOOL_LIT        reduce using rule 294 (try_block -> block .)
    NULL_LIT        reduce using rule 294 (try_block -> block .)
    CLASS           reduce using rule 294 (try_block -> block .)
    INTERFACE       reduce using rule 294 (try_block -> block .)
    RBRACE          reduce using rule 294 (try_block -> block .)
    CASE            reduce using rule 294 (try_block -> block .)
    DEFAULT         reduce using rule 294 (try_block -> block .)
    ELSE            reduce using rule 294 (try_block -> block .)


state 343

    (306) resource_specification -> LPAREN . resources semi_opt RPAREN
    (309) resources -> . resource
    (310) resources -> . resources trailing_semicolon resource
    (312) resource -> . type variable_declarator_id ASSIGN variable_initializer
    (313) resource -> . modifiers type variable_declarator_id ASSIGN variable_initializer
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (548) annotation_name -> . ATRATE name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    IDENT           shift and go to state 196
    ATRATE          shift and go to state 47

    resources                      shift and go to state 560
    resource                       shift and go to state 561
    type                           shift and go to state 562
    modifiers                      shift and go to state 563
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45

state 344

    (259) enhanced_for_statement_header -> enhanced_for_statement_header_init COLON . expression RPAREN
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 564
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 345

    (315) explicit_constructor_invocation -> THIS LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 565
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 346

    (316) explicit_constructor_invocation -> SUPER LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 566
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 347

    (223) method_invocation -> SUPER PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> SUPER PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (337) field_access -> SUPER PERIOD . IDENT
    (403) type_arguments -> . LSS type_argument_list1

    IDENT           shift and go to state 567
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 494

state 348

    (317) explicit_constructor_invocation -> type_arguments SUPER . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 568


state 349

    (318) explicit_constructor_invocation -> type_arguments THIS . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 569


state 350

    (319) explicit_constructor_invocation -> primary PERIOD . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> primary PERIOD . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> primary PERIOD . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> primary PERIOD . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (222) method_invocation -> primary PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (329) class_instance_creation_expression -> primary PERIOD . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary PERIOD . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> primary PERIOD . IDENT
    (403) type_arguments -> . LSS type_argument_list1

    SUPER           shift and go to state 570
    THIS            shift and go to state 571
    IDENT           shift and go to state 573
    NEW             shift and go to state 422
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 572

state 351

    (320) explicit_constructor_invocation -> name PERIOD . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> name PERIOD . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> name PERIOD . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> name PERIOD . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (221) method_invocation -> name PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (333) class_instance_creation_expression_name -> name PERIOD .
    (148) primary_no_new_array -> name PERIOD . THIS
    (149) primary_no_new_array -> name PERIOD . SUPER
    (150) primary_no_new_array -> name PERIOD . CLASS
    (352) qualified_name -> name PERIOD . simple_name
    (403) type_arguments -> . LSS type_argument_list1
    (351) simple_name -> . IDENT

    SUPER           shift and go to state 574
    THIS            shift and go to state 575
    IDENT           shift and go to state 430
    NEW             reduce using rule 333 (class_instance_creation_expression_name -> name PERIOD .)
    CLASS           shift and go to state 427
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 576
    simple_name                    shift and go to state 428

state 352

    (400) array_type -> name dims .
    (151) primary_no_new_array -> name dims . PERIOD CLASS

    IDENT           reduce using rule 400 (array_type -> name dims .)
    GTR             reduce using rule 400 (array_type -> name dims .)
    COMMA           reduce using rule 400 (array_type -> name dims .)
    PERIOD          shift and go to state 431


state 353

    (397) generic_type -> class_or_interface type_arguments .

    PERIOD          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    LBRACK          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    IDENT           reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    LPAREN          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    GTR             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    COMMA           reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    LBRACE          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    INSTANCEOF      reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    EQL             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    NEQ             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    AND             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    XOR             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    OR              reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    LAND            reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    QUES            reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    LOR             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    $end            reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    SEMICOLON       reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    COLON           reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    RPAREN          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    RBRACK          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    RBRACE          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    SHR             reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    ELLIPSIS        reduce using rule 397 (generic_type -> class_or_interface type_arguments .)
    SHR_UN          reduce using rule 397 (generic_type -> class_or_interface type_arguments .)


state 354

    (398) generic_type -> class_or_interface LSS . GTR
    (403) type_arguments -> LSS . type_argument_list1
    (404) type_argument_list1 -> . type_argument1
    (405) type_argument_list1 -> . type_argument_list COMMA type_argument1
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (406) type_argument_list -> . type_argument
    (407) type_argument_list -> . type_argument_list COMMA type_argument
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    GTR             shift and go to state 577
    QUES            shift and go to state 365
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    class_or_interface             shift and go to state 364
    type_argument_list1            shift and go to state 357
    type_argument1                 shift and go to state 358
    type_argument_list             shift and go to state 359
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    type_argument                  shift and go to state 362
    reference_type                 shift and go to state 363
    wildcard                       shift and go to state 366
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 355

    (401) array_type -> generic_type dims .

    IDENT           reduce using rule 401 (array_type -> generic_type dims .)
    GTR             reduce using rule 401 (array_type -> generic_type dims .)
    COMMA           reduce using rule 401 (array_type -> generic_type dims .)
    INSTANCEOF      reduce using rule 401 (array_type -> generic_type dims .)
    EQL             reduce using rule 401 (array_type -> generic_type dims .)
    NEQ             reduce using rule 401 (array_type -> generic_type dims .)
    AND             reduce using rule 401 (array_type -> generic_type dims .)
    XOR             reduce using rule 401 (array_type -> generic_type dims .)
    OR              reduce using rule 401 (array_type -> generic_type dims .)
    LAND            reduce using rule 401 (array_type -> generic_type dims .)
    QUES            reduce using rule 401 (array_type -> generic_type dims .)
    LOR             reduce using rule 401 (array_type -> generic_type dims .)
    $end            reduce using rule 401 (array_type -> generic_type dims .)
    SEMICOLON       reduce using rule 401 (array_type -> generic_type dims .)
    COLON           reduce using rule 401 (array_type -> generic_type dims .)
    RPAREN          reduce using rule 401 (array_type -> generic_type dims .)
    RBRACK          reduce using rule 401 (array_type -> generic_type dims .)
    RBRACE          reduce using rule 401 (array_type -> generic_type dims .)
    SHR             reduce using rule 401 (array_type -> generic_type dims .)
    ELLIPSIS        reduce using rule 401 (array_type -> generic_type dims .)
    SHR_UN          reduce using rule 401 (array_type -> generic_type dims .)


state 356

    (402) array_type -> generic_type PERIOD . name dims
    (396) class_or_interface -> generic_type PERIOD . name
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 578
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 357

    (403) type_arguments -> LSS type_argument_list1 .

    SUPER           reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    THIS            reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    IDENT           reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    PERIOD          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    LBRACK          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    LPAREN          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    COMMA           reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    LBRACE          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    INSTANCEOF      reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    EQL             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    NEQ             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    AND             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    XOR             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    OR              reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    LAND            reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    QUES            reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    LOR             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    $end            reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    SEMICOLON       reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    COLON           reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    RPAREN          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    RBRACK          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    RBRACE          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    ELLIPSIS        reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    GTR             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    SHR             reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)
    SHR_UN          reduce using rule 403 (type_arguments -> LSS type_argument_list1 .)


state 358

    (404) type_argument_list1 -> type_argument1 .

    SUPER           reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    THIS            reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    IDENT           reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    PERIOD          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    LBRACK          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    LPAREN          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    COMMA           reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    LBRACE          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    INSTANCEOF      reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    EQL             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    NEQ             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    AND             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    XOR             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    OR              reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    LAND            reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    QUES            reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    LOR             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    $end            reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    SEMICOLON       reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    COLON           reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    RPAREN          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    RBRACK          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    RBRACE          reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    ELLIPSIS        reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    GTR             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    SHR             reduce using rule 404 (type_argument_list1 -> type_argument1 .)
    SHR_UN          reduce using rule 404 (type_argument_list1 -> type_argument1 .)


state 359

    (405) type_argument_list1 -> type_argument_list . COMMA type_argument1
    (407) type_argument_list -> type_argument_list . COMMA type_argument

    COMMA           shift and go to state 579


state 360

    (410) type_argument1 -> reference_type1 .

    SUPER           reduce using rule 410 (type_argument1 -> reference_type1 .)
    THIS            reduce using rule 410 (type_argument1 -> reference_type1 .)
    IDENT           reduce using rule 410 (type_argument1 -> reference_type1 .)
    PERIOD          reduce using rule 410 (type_argument1 -> reference_type1 .)
    LBRACK          reduce using rule 410 (type_argument1 -> reference_type1 .)
    LPAREN          reduce using rule 410 (type_argument1 -> reference_type1 .)
    COMMA           reduce using rule 410 (type_argument1 -> reference_type1 .)
    LBRACE          reduce using rule 410 (type_argument1 -> reference_type1 .)
    INSTANCEOF      reduce using rule 410 (type_argument1 -> reference_type1 .)
    EQL             reduce using rule 410 (type_argument1 -> reference_type1 .)
    NEQ             reduce using rule 410 (type_argument1 -> reference_type1 .)
    AND             reduce using rule 410 (type_argument1 -> reference_type1 .)
    XOR             reduce using rule 410 (type_argument1 -> reference_type1 .)
    OR              reduce using rule 410 (type_argument1 -> reference_type1 .)
    LAND            reduce using rule 410 (type_argument1 -> reference_type1 .)
    QUES            reduce using rule 410 (type_argument1 -> reference_type1 .)
    LOR             reduce using rule 410 (type_argument1 -> reference_type1 .)
    $end            reduce using rule 410 (type_argument1 -> reference_type1 .)
    SEMICOLON       reduce using rule 410 (type_argument1 -> reference_type1 .)
    COLON           reduce using rule 410 (type_argument1 -> reference_type1 .)
    RPAREN          reduce using rule 410 (type_argument1 -> reference_type1 .)
    RBRACK          reduce using rule 410 (type_argument1 -> reference_type1 .)
    RBRACE          reduce using rule 410 (type_argument1 -> reference_type1 .)
    ELLIPSIS        reduce using rule 410 (type_argument1 -> reference_type1 .)
    GTR             reduce using rule 410 (type_argument1 -> reference_type1 .)
    SHR             reduce using rule 410 (type_argument1 -> reference_type1 .)
    SHR_UN          reduce using rule 410 (type_argument1 -> reference_type1 .)


state 361

    (411) type_argument1 -> wildcard1 .

    SUPER           reduce using rule 411 (type_argument1 -> wildcard1 .)
    THIS            reduce using rule 411 (type_argument1 -> wildcard1 .)
    IDENT           reduce using rule 411 (type_argument1 -> wildcard1 .)
    PERIOD          reduce using rule 411 (type_argument1 -> wildcard1 .)
    LBRACK          reduce using rule 411 (type_argument1 -> wildcard1 .)
    LPAREN          reduce using rule 411 (type_argument1 -> wildcard1 .)
    COMMA           reduce using rule 411 (type_argument1 -> wildcard1 .)
    LBRACE          reduce using rule 411 (type_argument1 -> wildcard1 .)
    INSTANCEOF      reduce using rule 411 (type_argument1 -> wildcard1 .)
    EQL             reduce using rule 411 (type_argument1 -> wildcard1 .)
    NEQ             reduce using rule 411 (type_argument1 -> wildcard1 .)
    AND             reduce using rule 411 (type_argument1 -> wildcard1 .)
    XOR             reduce using rule 411 (type_argument1 -> wildcard1 .)
    OR              reduce using rule 411 (type_argument1 -> wildcard1 .)
    LAND            reduce using rule 411 (type_argument1 -> wildcard1 .)
    QUES            reduce using rule 411 (type_argument1 -> wildcard1 .)
    LOR             reduce using rule 411 (type_argument1 -> wildcard1 .)
    $end            reduce using rule 411 (type_argument1 -> wildcard1 .)
    SEMICOLON       reduce using rule 411 (type_argument1 -> wildcard1 .)
    COLON           reduce using rule 411 (type_argument1 -> wildcard1 .)
    RPAREN          reduce using rule 411 (type_argument1 -> wildcard1 .)
    RBRACK          reduce using rule 411 (type_argument1 -> wildcard1 .)
    RBRACE          reduce using rule 411 (type_argument1 -> wildcard1 .)
    ELLIPSIS        reduce using rule 411 (type_argument1 -> wildcard1 .)
    GTR             reduce using rule 411 (type_argument1 -> wildcard1 .)
    SHR             reduce using rule 411 (type_argument1 -> wildcard1 .)
    SHR_UN          reduce using rule 411 (type_argument1 -> wildcard1 .)


state 362

    (406) type_argument_list -> type_argument .

    COMMA           reduce using rule 406 (type_argument_list -> type_argument .)


state 363

    (412) reference_type1 -> reference_type . GTR
    (408) type_argument -> reference_type .

    GTR             shift and go to state 580
    COMMA           reduce using rule 408 (type_argument -> reference_type .)


state 364

    (413) reference_type1 -> class_or_interface . LSS type_argument_list2
    (392) class_or_interface_type -> class_or_interface .
    (397) generic_type -> class_or_interface . type_arguments
    (398) generic_type -> class_or_interface . LSS GTR
    (403) type_arguments -> . LSS type_argument_list1

    LSS             shift and go to state 581
    GTR             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    COMMA           reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    AND             reduce using rule 392 (class_or_interface_type -> class_or_interface .)

    type_arguments                 shift and go to state 353

state 365

    (429) wildcard1 -> QUES . GTR
    (430) wildcard1 -> QUES . wildcard_bounds1
    (425) wildcard -> QUES .
    (426) wildcard -> QUES . wildcard_bounds
    (431) wildcard_bounds1 -> . EXTENDS reference_type1
    (432) wildcard_bounds1 -> . SUPER reference_type1
    (427) wildcard_bounds -> . EXTENDS reference_type
    (428) wildcard_bounds -> . SUPER reference_type

    GTR             shift and go to state 582
    COMMA           reduce using rule 425 (wildcard -> QUES .)
    EXTENDS         shift and go to state 585
    SUPER           shift and go to state 586

    wildcard_bounds1               shift and go to state 583
    wildcard_bounds                shift and go to state 584

state 366

    (409) type_argument -> wildcard .

    COMMA           reduce using rule 409 (type_argument -> wildcard .)


state 367

    (395) class_or_interface -> name .
    (400) array_type -> name . dims
    (352) qualified_name -> name . PERIOD simple_name
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LSS             reduce using rule 395 (class_or_interface -> name .)
    GTR             reduce using rule 395 (class_or_interface -> name .)
    COMMA           reduce using rule 395 (class_or_interface -> name .)
    SHR             reduce using rule 395 (class_or_interface -> name .)
    AND             reduce using rule 395 (class_or_interface -> name .)
    SHR_UN          reduce using rule 395 (class_or_interface -> name .)
    PERIOD          shift and go to state 372
    LBRACK          shift and go to state 279

    dims                           shift and go to state 534
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 368

    (396) class_or_interface -> generic_type . PERIOD name
    (393) class_or_interface_type -> generic_type .
    (401) array_type -> generic_type . dims
    (402) array_type -> generic_type . PERIOD name dims
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 587
    GTR             reduce using rule 393 (class_or_interface_type -> generic_type .)
    COMMA           reduce using rule 393 (class_or_interface_type -> generic_type .)
    SHR             reduce using rule 393 (class_or_interface_type -> generic_type .)
    AND             reduce using rule 393 (class_or_interface_type -> generic_type .)
    SHR_UN          reduce using rule 393 (class_or_interface_type -> generic_type .)
    LBRACK          shift and go to state 279

    dims                           shift and go to state 355
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 369

    (399) array_type -> primitive_type . dims
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LBRACK          shift and go to state 279

    dims                           shift and go to state 533
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 370

    (559) compilation_unit -> package_declaration import_declarations type_declarations .
    (579) type_declarations -> type_declarations . type_declaration
    (459) type_declaration -> . class_declaration
    (460) type_declaration -> . interface_declaration
    (461) type_declaration -> . SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    $end            reduce using rule 559 (compilation_unit -> package_declaration import_declarations type_declarations .)
    SEMICOLON       shift and go to state 11
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    type_declaration               shift and go to state 191
    class_declaration              shift and go to state 20
    interface_declaration          shift and go to state 21
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifiers_opt                  shift and go to state 46
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 371

    (566) package_declaration_name -> modifiers PACKAGE name .
    (352) qualified_name -> name . PERIOD simple_name

    SEMICOLON       reduce using rule 566 (package_declaration_name -> modifiers PACKAGE name .)
    PERIOD          shift and go to state 372


state 372

    (352) qualified_name -> name PERIOD . simple_name
    (351) simple_name -> . IDENT

    IDENT           shift and go to state 196

    simple_name                    shift and go to state 428

state 373

    (574) single_type_import_declaration -> IMPORT name SEMICOLON .

    SEMICOLON       reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    IMPORT          reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    PUBLIC          reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    PROTECTED       reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    PRIVATE         reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    STATIC          reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    ABSTRACT        reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    FINAL           reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    NATIVE          reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    SYNCHRONIZED    reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    TRANSIENT       reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    VOLATILE        reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    STRICTFP        reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    ATRATE          reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    CLASS           reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    INTERFACE       reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)
    $end            reduce using rule 574 (single_type_import_declaration -> IMPORT name SEMICOLON .)


state 374

    (575) type_import_on_demand_declaration -> IMPORT name PERIOD . MUL SEMICOLON
    (352) qualified_name -> name PERIOD . simple_name
    (351) simple_name -> . IDENT

    MUL             shift and go to state 588
    IDENT           shift and go to state 196

    simple_name                    shift and go to state 428

state 375

    (576) single_static_import_declaration -> IMPORT STATIC name . SEMICOLON
    (577) static_import_on_demand_declaration -> IMPORT STATIC name . PERIOD MUL SEMICOLON
    (352) qualified_name -> name . PERIOD simple_name

    SEMICOLON       shift and go to state 589
    PERIOD          shift and go to state 590


state 376

    (470) class_body -> LBRACE inc_scope . class_body_declarations_opt dec_scope RBRACE
    (471) class_body_declarations_opt -> . class_body_declarations
    (472) class_body_declarations_opt -> . empty
    (473) class_body_declarations -> . class_body_declaration
    (474) class_body_declarations -> . class_body_declarations class_body_declaration
    (583) empty -> .
    (475) class_body_declaration -> . class_member_declaration
    (476) class_body_declaration -> . static_initializer
    (477) class_body_declaration -> . constructor_declaration
    (478) class_body_declaration -> . block
    (479) class_member_declaration -> . field_declaration
    (480) class_member_declaration -> . class_declaration
    (481) class_member_declaration -> . method_declaration
    (482) class_member_declaration -> . interface_declaration
    (483) class_member_declaration -> . SEMICOLON
    (485) static_initializer -> . STATIC block
    (486) constructor_declaration -> . constructor_header method_body
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (484) field_declaration -> . modifiers_opt type variable_declarators SEMICOLON
    (462) class_declaration -> . class_header class_body
    (503) method_declaration -> . abstract_method_declaration
    (504) method_declaration -> . method_header method_body
    (511) interface_declaration -> . interface_header interface_body
    (487) constructor_header -> . constructor_header_name formal_parameter_list_opt RPAREN method_header_throws_clause_opt
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (463) class_header -> . class_header_name empty empty
    (505) abstract_method_declaration -> . method_header101 SEMICOLON
    (507) method_header -> . method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (488) constructor_header_name -> . modifiers_opt type_parameters IDENT LPAREN
    (489) constructor_header_name -> . modifiers_opt IDENT LPAREN
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (506) method_header101 -> . method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
    (508) method_header_name -> . modifiers_opt type_parameters type IDENT LPAREN
    (509) method_header_name -> . modifiers_opt type IDENT LPAREN
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RBRACE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    SEMICOLON       shift and go to state 603
    STATIC          shift and go to state 604
    LBRACE          shift and go to state 153
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    class_body_declarations_opt    shift and go to state 591
    class_body_declarations        shift and go to state 592
    empty                          shift and go to state 593
    class_body_declaration         shift and go to state 594
    class_member_declaration       shift and go to state 595
    static_initializer             shift and go to state 596
    constructor_declaration        shift and go to state 597
    block                          shift and go to state 598
    field_declaration              shift and go to state 599
    class_declaration              shift and go to state 600
    method_declaration             shift and go to state 601
    interface_declaration          shift and go to state 602
    constructor_header             shift and go to state 605
    modifiers_opt                  shift and go to state 606
    class_header                   shift and go to state 25
    abstract_method_declaration    shift and go to state 607
    method_header                  shift and go to state 608
    interface_header               shift and go to state 26
    constructor_header_name        shift and go to state 609
    modifiers                      shift and go to state 188
    class_header_name              shift and go to state 38
    method_header101               shift and go to state 387
    method_header_name             shift and go to state 610
    interface_header_name          shift and go to state 39
    modifier                       shift and go to state 22
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 377

    (519) interface_body -> LBRACE interface_member_declarations_opt . RBRACE

    RBRACE          shift and go to state 611


state 378

    (520) interface_member_declarations_opt -> interface_member_declarations .
    (523) interface_member_declarations -> interface_member_declarations . interface_member_declaration
    (524) interface_member_declaration -> . constant_declaration
    (525) interface_member_declaration -> . abstract_method_declaration
    (526) interface_member_declaration -> . class_declaration
    (527) interface_member_declaration -> . interface_declaration
    (528) interface_member_declaration -> . SEMICOLON
    (529) constant_declaration -> . field_declaration
    (505) abstract_method_declaration -> . method_header101 SEMICOLON
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (484) field_declaration -> . modifiers_opt type variable_declarators SEMICOLON
    (506) method_header101 -> . method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (508) method_header_name -> . modifiers_opt type_parameters type IDENT LPAREN
    (509) method_header_name -> . modifiers_opt type IDENT LPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RBRACE          reduce using rule 520 (interface_member_declarations_opt -> interface_member_declarations .)
    SEMICOLON       shift and go to state 385
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    interface_member_declaration   shift and go to state 612
    constant_declaration           shift and go to state 381
    abstract_method_declaration    shift and go to state 382
    class_declaration              shift and go to state 383
    interface_declaration          shift and go to state 384
    field_declaration              shift and go to state 386
    method_header101               shift and go to state 387
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    modifiers_opt                  shift and go to state 388
    method_header_name             shift and go to state 389
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    modifiers                      shift and go to state 188
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 379

    (521) interface_member_declarations_opt -> empty .
    (364) modifiers_opt -> empty .

    RBRACE          reduce using rule 521 (interface_member_declarations_opt -> empty .)
    CLASS           reduce using rule 364 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 364 (modifiers_opt -> empty .)
    LSS             reduce using rule 364 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 364 (modifiers_opt -> empty .)
    VOID            reduce using rule 364 (modifiers_opt -> empty .)
    BYTE            reduce using rule 364 (modifiers_opt -> empty .)
    SHORT           reduce using rule 364 (modifiers_opt -> empty .)
    INT             reduce using rule 364 (modifiers_opt -> empty .)
    LONG            reduce using rule 364 (modifiers_opt -> empty .)
    CHAR            reduce using rule 364 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 364 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 364 (modifiers_opt -> empty .)
    IDENT           reduce using rule 364 (modifiers_opt -> empty .)


state 380

    (522) interface_member_declarations -> interface_member_declaration .

    SEMICOLON       reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    PUBLIC          reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    PROTECTED       reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    PRIVATE         reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    STATIC          reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    ABSTRACT        reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    FINAL           reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    NATIVE          reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    SYNCHRONIZED    reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    TRANSIENT       reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    VOLATILE        reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    STRICTFP        reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    ATRATE          reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    CLASS           reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    INTERFACE       reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    LSS             reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    BOOLEAN         reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    VOID            reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    BYTE            reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    SHORT           reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    INT             reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    LONG            reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    CHAR            reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    FLOAT           reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    DOUBLE          reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    IDENT           reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)
    RBRACE          reduce using rule 522 (interface_member_declarations -> interface_member_declaration .)


state 381

    (524) interface_member_declaration -> constant_declaration .

    SEMICOLON       reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    PUBLIC          reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    PROTECTED       reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    PRIVATE         reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    STATIC          reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    ABSTRACT        reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    FINAL           reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    NATIVE          reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    SYNCHRONIZED    reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    TRANSIENT       reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    VOLATILE        reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    STRICTFP        reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    ATRATE          reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    CLASS           reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    INTERFACE       reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    LSS             reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    BOOLEAN         reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    VOID            reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    BYTE            reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    SHORT           reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    INT             reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    LONG            reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    CHAR            reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    FLOAT           reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    DOUBLE          reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    IDENT           reduce using rule 524 (interface_member_declaration -> constant_declaration .)
    RBRACE          reduce using rule 524 (interface_member_declaration -> constant_declaration .)


state 382

    (525) interface_member_declaration -> abstract_method_declaration .

    SEMICOLON       reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    PUBLIC          reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    PROTECTED       reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    PRIVATE         reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    STATIC          reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    ABSTRACT        reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    FINAL           reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    NATIVE          reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    SYNCHRONIZED    reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    TRANSIENT       reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    VOLATILE        reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    STRICTFP        reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    ATRATE          reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    CLASS           reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    INTERFACE       reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    LSS             reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    BOOLEAN         reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    VOID            reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    BYTE            reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    SHORT           reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    INT             reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    LONG            reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    CHAR            reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    FLOAT           reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    DOUBLE          reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    IDENT           reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)
    RBRACE          reduce using rule 525 (interface_member_declaration -> abstract_method_declaration .)


state 383

    (526) interface_member_declaration -> class_declaration .

    SEMICOLON       reduce using rule 526 (interface_member_declaration -> class_declaration .)
    PUBLIC          reduce using rule 526 (interface_member_declaration -> class_declaration .)
    PROTECTED       reduce using rule 526 (interface_member_declaration -> class_declaration .)
    PRIVATE         reduce using rule 526 (interface_member_declaration -> class_declaration .)
    STATIC          reduce using rule 526 (interface_member_declaration -> class_declaration .)
    ABSTRACT        reduce using rule 526 (interface_member_declaration -> class_declaration .)
    FINAL           reduce using rule 526 (interface_member_declaration -> class_declaration .)
    NATIVE          reduce using rule 526 (interface_member_declaration -> class_declaration .)
    SYNCHRONIZED    reduce using rule 526 (interface_member_declaration -> class_declaration .)
    TRANSIENT       reduce using rule 526 (interface_member_declaration -> class_declaration .)
    VOLATILE        reduce using rule 526 (interface_member_declaration -> class_declaration .)
    STRICTFP        reduce using rule 526 (interface_member_declaration -> class_declaration .)
    ATRATE          reduce using rule 526 (interface_member_declaration -> class_declaration .)
    CLASS           reduce using rule 526 (interface_member_declaration -> class_declaration .)
    INTERFACE       reduce using rule 526 (interface_member_declaration -> class_declaration .)
    LSS             reduce using rule 526 (interface_member_declaration -> class_declaration .)
    BOOLEAN         reduce using rule 526 (interface_member_declaration -> class_declaration .)
    VOID            reduce using rule 526 (interface_member_declaration -> class_declaration .)
    BYTE            reduce using rule 526 (interface_member_declaration -> class_declaration .)
    SHORT           reduce using rule 526 (interface_member_declaration -> class_declaration .)
    INT             reduce using rule 526 (interface_member_declaration -> class_declaration .)
    LONG            reduce using rule 526 (interface_member_declaration -> class_declaration .)
    CHAR            reduce using rule 526 (interface_member_declaration -> class_declaration .)
    FLOAT           reduce using rule 526 (interface_member_declaration -> class_declaration .)
    DOUBLE          reduce using rule 526 (interface_member_declaration -> class_declaration .)
    IDENT           reduce using rule 526 (interface_member_declaration -> class_declaration .)
    RBRACE          reduce using rule 526 (interface_member_declaration -> class_declaration .)


state 384

    (527) interface_member_declaration -> interface_declaration .

    SEMICOLON       reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    PUBLIC          reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    PROTECTED       reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    PRIVATE         reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    STATIC          reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    ABSTRACT        reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    FINAL           reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    NATIVE          reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    TRANSIENT       reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    VOLATILE        reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    STRICTFP        reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    ATRATE          reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    CLASS           reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    INTERFACE       reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    LSS             reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    BOOLEAN         reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    VOID            reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    BYTE            reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    SHORT           reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    INT             reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    LONG            reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    CHAR            reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    FLOAT           reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    DOUBLE          reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    IDENT           reduce using rule 527 (interface_member_declaration -> interface_declaration .)
    RBRACE          reduce using rule 527 (interface_member_declaration -> interface_declaration .)


state 385

    (528) interface_member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    STATIC          reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    ABSTRACT        reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    FINAL           reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    NATIVE          reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    TRANSIENT       reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    STRICTFP        reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    ATRATE          reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    INTERFACE       reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    LSS             reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    BOOLEAN         reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    VOID            reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    BYTE            reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    INT             reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    LONG            reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    IDENT           reduce using rule 528 (interface_member_declaration -> SEMICOLON .)
    RBRACE          reduce using rule 528 (interface_member_declaration -> SEMICOLON .)


state 386

    (529) constant_declaration -> field_declaration .

    SEMICOLON       reduce using rule 529 (constant_declaration -> field_declaration .)
    PUBLIC          reduce using rule 529 (constant_declaration -> field_declaration .)
    PROTECTED       reduce using rule 529 (constant_declaration -> field_declaration .)
    PRIVATE         reduce using rule 529 (constant_declaration -> field_declaration .)
    STATIC          reduce using rule 529 (constant_declaration -> field_declaration .)
    ABSTRACT        reduce using rule 529 (constant_declaration -> field_declaration .)
    FINAL           reduce using rule 529 (constant_declaration -> field_declaration .)
    NATIVE          reduce using rule 529 (constant_declaration -> field_declaration .)
    SYNCHRONIZED    reduce using rule 529 (constant_declaration -> field_declaration .)
    TRANSIENT       reduce using rule 529 (constant_declaration -> field_declaration .)
    VOLATILE        reduce using rule 529 (constant_declaration -> field_declaration .)
    STRICTFP        reduce using rule 529 (constant_declaration -> field_declaration .)
    ATRATE          reduce using rule 529 (constant_declaration -> field_declaration .)
    CLASS           reduce using rule 529 (constant_declaration -> field_declaration .)
    INTERFACE       reduce using rule 529 (constant_declaration -> field_declaration .)
    LSS             reduce using rule 529 (constant_declaration -> field_declaration .)
    BOOLEAN         reduce using rule 529 (constant_declaration -> field_declaration .)
    VOID            reduce using rule 529 (constant_declaration -> field_declaration .)
    BYTE            reduce using rule 529 (constant_declaration -> field_declaration .)
    SHORT           reduce using rule 529 (constant_declaration -> field_declaration .)
    INT             reduce using rule 529 (constant_declaration -> field_declaration .)
    LONG            reduce using rule 529 (constant_declaration -> field_declaration .)
    CHAR            reduce using rule 529 (constant_declaration -> field_declaration .)
    FLOAT           reduce using rule 529 (constant_declaration -> field_declaration .)
    DOUBLE          reduce using rule 529 (constant_declaration -> field_declaration .)
    IDENT           reduce using rule 529 (constant_declaration -> field_declaration .)
    RBRACE          reduce using rule 529 (constant_declaration -> field_declaration .)


state 387

    (505) abstract_method_declaration -> method_header101 . SEMICOLON

    SEMICOLON       shift and go to state 613


state 388

    (484) field_declaration -> modifiers_opt . type variable_declarators SEMICOLON
    (508) method_header_name -> modifiers_opt . type_parameters type IDENT LPAREN
    (509) method_header_name -> modifiers_opt . type IDENT LPAREN
    (466) class_header_name1 -> modifiers_opt . CLASS IDENT
    (515) interface_header_name1 -> modifiers_opt . INTERFACE IDENT
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (442) type_parameters -> . LSS type_parameter_list1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    CLASS           shift and go to state 212
    INTERFACE       shift and go to state 213
    LSS             shift and go to state 209
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type                           shift and go to state 614
    type_parameters                shift and go to state 615
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 389

    (506) method_header101 -> method_header_name . formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
    (490) formal_parameter_list_opt -> . formal_parameter_list
    (491) formal_parameter_list_opt -> . empty
    (492) formal_parameter_list -> . formal_parameter
    (493) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (583) empty -> .
    (494) formal_parameter -> . modifiers_opt type variable_declarator_id
    (495) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RPAREN          reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    formal_parameter_list_opt      shift and go to state 616
    formal_parameter_list          shift and go to state 617
    empty                          shift and go to state 618
    formal_parameter               shift and go to state 619
    modifiers_opt                  shift and go to state 620
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 390

    (463) class_header -> class_header_name empty empty .

    LBRACE          reduce using rule 463 (class_header -> class_header_name empty empty .)


state 391

    (518) interface_header_extends -> EXTENDS interface_type_list .
    (468) interface_type_list -> interface_type_list . COMMA interface_type

    LBRACE          reduce using rule 518 (interface_header_extends -> EXTENDS interface_type_list .)
    COMMA           shift and go to state 621


state 392

    (467) interface_type_list -> interface_type .

    COMMA           reduce using rule 467 (interface_type_list -> interface_type .)
    LBRACE          reduce using rule 467 (interface_type_list -> interface_type .)


state 393

    (469) interface_type -> class_or_interface_type .

    COMMA           reduce using rule 469 (interface_type -> class_or_interface_type .)
    LBRACE          reduce using rule 469 (interface_type -> class_or_interface_type .)


state 394

    (442) type_parameters -> LSS type_parameter_list1 .

    LBRACE          reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    EXTENDS         reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    BOOLEAN         reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    VOID            reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    BYTE            reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    SHORT           reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    INT             reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    LONG            reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    CHAR            reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    FLOAT           reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    DOUBLE          reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)
    IDENT           reduce using rule 442 (type_parameters -> LSS type_parameter_list1 .)


state 395

    (451) type_parameter_list1 -> type_parameter1 .

    LBRACE          reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    EXTENDS         reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    BOOLEAN         reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    VOID            reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    BYTE            reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    SHORT           reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    INT             reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    LONG            reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    CHAR            reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    FLOAT           reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    DOUBLE          reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)
    IDENT           reduce using rule 451 (type_parameter_list1 -> type_parameter1 .)


state 396

    (452) type_parameter_list1 -> type_parameter_list . COMMA type_parameter1
    (444) type_parameter_list -> type_parameter_list . COMMA type_parameter

    COMMA           shift and go to state 622


state 397

    (453) type_parameter1 -> type_parameter_header . GTR
    (454) type_parameter1 -> type_parameter_header . EXTENDS reference_type1
    (455) type_parameter1 -> type_parameter_header . EXTENDS reference_type additional_bound_list1
    (445) type_parameter -> type_parameter_header .
    (446) type_parameter -> type_parameter_header . EXTENDS reference_type
    (447) type_parameter -> type_parameter_header . EXTENDS reference_type additional_bound_list

    GTR             shift and go to state 623
    EXTENDS         shift and go to state 624
    COMMA           reduce using rule 445 (type_parameter -> type_parameter_header .)


state 398

    (443) type_parameter_list -> type_parameter .

    COMMA           reduce using rule 443 (type_parameter_list -> type_parameter .)


state 399

    (441) type_parameter_header -> IDENT .

    GTR             reduce using rule 441 (type_parameter_header -> IDENT .)
    EXTENDS         reduce using rule 441 (type_parameter_header -> IDENT .)
    COMMA           reduce using rule 441 (type_parameter_header -> IDENT .)


state 400

    (547) normal_annotation -> annotation_name LPAREN member_value_pairs_opt . RPAREN

    RPAREN          shift and go to state 625


state 401

    (555) single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value . RPAREN

    RPAREN          shift and go to state 626


state 402

    (549) member_value_pairs_opt -> member_value_pairs .
    (552) member_value_pairs -> member_value_pairs . COMMA member_value_pair

    RPAREN          reduce using rule 549 (member_value_pairs_opt -> member_value_pairs .)
    COMMA           shift and go to state 627


state 403

    (550) member_value_pairs_opt -> empty .

    RPAREN          reduce using rule 550 (member_value_pairs_opt -> empty .)


state 404

    (556) single_member_annotation_member_value -> member_value .

    RPAREN          reduce using rule 556 (single_member_annotation_member_value -> member_value .)


state 405

    (551) member_value_pairs -> member_value_pair .

    COMMA           reduce using rule 551 (member_value_pairs -> member_value_pair .)
    RPAREN          reduce using rule 551 (member_value_pairs -> member_value_pair .)


state 406

    (534) member_value -> conditional_expression_not_name .

    RPAREN          reduce using rule 534 (member_value -> conditional_expression_not_name .)
    COMMA           reduce using rule 534 (member_value -> conditional_expression_not_name .)
    RBRACE          reduce using rule 534 (member_value -> conditional_expression_not_name .)


state 407

    (535) member_value -> name .
    (24) conditional_expression_not_name -> name . QUES expression COLON conditional_expression
    (29) conditional_or_expression_not_name -> name . LOR marker_next_quad conditional_and_expression
    (352) qualified_name -> name . PERIOD simple_name
    (34) conditional_and_expression_not_name -> name . LAND marker_next_quad inclusive_or_expression
    (40) inclusive_or_expression_not_name -> name . OR exclusive_or_expression
    (45) exclusive_or_expression_not_name -> name . XOR and_expression
    (50) and_expression_not_name -> name . AND equality_expression
    (56) equality_expression_not_name -> name . EQL instanceof_expression
    (58) equality_expression_not_name -> name . NEQ instanceof_expression
    (62) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (71) relational_expression_not_name -> name . LSS shift_expression
    (73) relational_expression_not_name -> name . GTR shift_expression
    (75) relational_expression_not_name -> name . GEQ shift_expression
    (77) relational_expression_not_name -> name . LEQ shift_expression
    (84) shift_expression_not_name -> name . SHL additive_expression
    (86) shift_expression_not_name -> name . SHR additive_expression
    (88) shift_expression_not_name -> name . SHR_UN additive_expression
    (94) additive_expression_not_name -> name . ADD multiplicative_expression
    (96) additive_expression_not_name -> name . SUB multiplicative_expression
    (103) multiplicative_expression_not_name -> name . MUL unary_expression
    (105) multiplicative_expression_not_name -> name . QUO unary_expression
    (107) multiplicative_expression_not_name -> name . REM unary_expression
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (129) postfix_expression -> name .
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> name . LBRACK expression RBRACK
    (333) class_instance_creation_expression_name -> name . PERIOD
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    RPAREN          reduce using rule 535 (member_value -> name .)
    COMMA           reduce using rule 535 (member_value -> name .)
    RBRACE          reduce using rule 535 (member_value -> name .)
    QUES            shift and go to state 443
    LOR             shift and go to state 444
    PERIOD          shift and go to state 441
    LAND            shift and go to state 445
    OR              shift and go to state 446
    XOR             shift and go to state 447
    AND             shift and go to state 448
    EQL             shift and go to state 449
    NEQ             shift and go to state 450
    INSTANCEOF      shift and go to state 451
    LSS             shift and go to state 538
    GTR             shift and go to state 453
    GEQ             shift and go to state 454
    LEQ             shift and go to state 455
    SHL             shift and go to state 456
    SHR             shift and go to state 457
    SHR_UN          shift and go to state 458
    ADD             shift and go to state 459
    SUB             shift and go to state 460
    MUL             shift and go to state 461
    QUO             shift and go to state 462
    REM             shift and go to state 463
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    LBRACK          shift and go to state 238

    dims                           shift and go to state 237
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 408

    (536) member_value -> annotation .

    RPAREN          reduce using rule 536 (member_value -> annotation .)
    COMMA           reduce using rule 536 (member_value -> annotation .)
    RBRACE          reduce using rule 536 (member_value -> annotation .)


state 409

    (537) member_value -> member_value_array_initializer .

    RPAREN          reduce using rule 537 (member_value -> member_value_array_initializer .)
    COMMA           reduce using rule 537 (member_value -> member_value_array_initializer .)
    RBRACE          reduce using rule 537 (member_value -> member_value_array_initializer .)


state 410

    (553) member_value_pair -> simple_name . ASSIGN member_value
    (349) name -> simple_name .

    ASSIGN          shift and go to state 628
    QUES            reduce using rule 349 (name -> simple_name .)
    LOR             reduce using rule 349 (name -> simple_name .)
    PERIOD          reduce using rule 349 (name -> simple_name .)
    LAND            reduce using rule 349 (name -> simple_name .)
    OR              reduce using rule 349 (name -> simple_name .)
    XOR             reduce using rule 349 (name -> simple_name .)
    AND             reduce using rule 349 (name -> simple_name .)
    EQL             reduce using rule 349 (name -> simple_name .)
    NEQ             reduce using rule 349 (name -> simple_name .)
    INSTANCEOF      reduce using rule 349 (name -> simple_name .)
    LSS             reduce using rule 349 (name -> simple_name .)
    GTR             reduce using rule 349 (name -> simple_name .)
    GEQ             reduce using rule 349 (name -> simple_name .)
    LEQ             reduce using rule 349 (name -> simple_name .)
    SHL             reduce using rule 349 (name -> simple_name .)
    SHR             reduce using rule 349 (name -> simple_name .)
    SHR_UN          reduce using rule 349 (name -> simple_name .)
    ADD             reduce using rule 349 (name -> simple_name .)
    SUB             reduce using rule 349 (name -> simple_name .)
    MUL             reduce using rule 349 (name -> simple_name .)
    QUO             reduce using rule 349 (name -> simple_name .)
    REM             reduce using rule 349 (name -> simple_name .)
    LBRACK          reduce using rule 349 (name -> simple_name .)
    RPAREN          reduce using rule 349 (name -> simple_name .)
    INC             reduce using rule 349 (name -> simple_name .)
    DEC             reduce using rule 349 (name -> simple_name .)


state 411

    (538) member_value_array_initializer -> LBRACE . member_values COMMA RBRACE
    (539) member_value_array_initializer -> LBRACE . member_values RBRACE
    (540) member_value_array_initializer -> LBRACE . COMMA RBRACE
    (541) member_value_array_initializer -> LBRACE . RBRACE
    (542) member_values -> . member_value
    (543) member_values -> . member_values COMMA member_value
    (534) member_value -> . conditional_expression_not_name
    (535) member_value -> . name
    (536) member_value -> . annotation
    (537) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (538) member_value_array_initializer -> . LBRACE member_values COMMA RBRACE
    (539) member_value_array_initializer -> . LBRACE member_values RBRACE
    (540) member_value_array_initializer -> . LBRACE COMMA RBRACE
    (541) member_value_array_initializer -> . LBRACE RBRACE
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (548) annotation_name -> . ATRATE name
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    COMMA           shift and go to state 630
    RBRACE          shift and go to state 631
    LBRACE          shift and go to state 411
    IDENT           shift and go to state 77
    ATRATE          shift and go to state 47
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    member_values                  shift and go to state 629
    member_value                   shift and go to state 632
    conditional_expression_not_name shift and go to state 406
    name                           shift and go to state 407
    annotation                     shift and go to state 408
    member_value_array_initializer shift and go to state 409
    conditional_or_expression_not_name shift and go to state 252
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    conditional_and_expression_not_name shift and go to state 256
    annotation_name                shift and go to state 45
    inclusive_or_expression_not_name shift and go to state 257
    exclusive_or_expression_not_name shift and go to state 258
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275
    primary                        shift and go to state 412
    post_increment_expression      shift and go to state 413
    post_decrement_expression      shift and go to state 414
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    postfix_expression             shift and go to state 415
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 412

    (132) postfix_expression_not_name -> primary .
    (128) postfix_expression -> primary .
    (329) class_instance_creation_expression -> primary . PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary . PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> primary . PERIOD IDENT
    (222) method_invocation -> primary . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary . PERIOD IDENT LPAREN argument_list_opt RPAREN

    MUL             reduce using rule 132 (postfix_expression_not_name -> primary .)
    QUO             reduce using rule 132 (postfix_expression_not_name -> primary .)
    REM             reduce using rule 132 (postfix_expression_not_name -> primary .)
    ADD             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SUB             reduce using rule 132 (postfix_expression_not_name -> primary .)
    LSS             reduce using rule 132 (postfix_expression_not_name -> primary .)
    GTR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    GEQ             reduce using rule 132 (postfix_expression_not_name -> primary .)
    LEQ             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SHL             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SHR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    SHR_UN          reduce using rule 132 (postfix_expression_not_name -> primary .)
    INSTANCEOF      reduce using rule 132 (postfix_expression_not_name -> primary .)
    EQL             reduce using rule 132 (postfix_expression_not_name -> primary .)
    NEQ             reduce using rule 132 (postfix_expression_not_name -> primary .)
    AND             reduce using rule 132 (postfix_expression_not_name -> primary .)
    XOR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    OR              reduce using rule 132 (postfix_expression_not_name -> primary .)
    LAND            reduce using rule 132 (postfix_expression_not_name -> primary .)
    QUES            reduce using rule 132 (postfix_expression_not_name -> primary .)
    LOR             reduce using rule 132 (postfix_expression_not_name -> primary .)
    RPAREN          reduce using rule 132 (postfix_expression_not_name -> primary .)
    COMMA           reduce using rule 132 (postfix_expression_not_name -> primary .)
    RBRACE          reduce using rule 132 (postfix_expression_not_name -> primary .)
    INC             reduce using rule 128 (postfix_expression -> primary .)
    DEC             reduce using rule 128 (postfix_expression -> primary .)
    PERIOD          shift and go to state 235


state 413

    (133) postfix_expression_not_name -> post_increment_expression .
    (130) postfix_expression -> post_increment_expression .

    MUL             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    QUO             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    REM             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    ADD             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SUB             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LSS             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    GTR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    GEQ             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LEQ             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SHL             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SHR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    SHR_UN          reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    INSTANCEOF      reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    EQL             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    NEQ             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    AND             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    XOR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    OR              reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LAND            reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    QUES            reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    LOR             reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    RPAREN          reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    COMMA           reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    RBRACE          reduce using rule 133 (postfix_expression_not_name -> post_increment_expression .)
    INC             reduce using rule 130 (postfix_expression -> post_increment_expression .)
    DEC             reduce using rule 130 (postfix_expression -> post_increment_expression .)


state 414

    (134) postfix_expression_not_name -> post_decrement_expression .
    (131) postfix_expression -> post_decrement_expression .

    MUL             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    QUO             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    REM             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    ADD             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SUB             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LSS             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    GTR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    GEQ             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LEQ             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SHL             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SHR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    SHR_UN          reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    INSTANCEOF      reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    EQL             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    NEQ             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    AND             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    XOR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    OR              reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LAND            reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    QUES            reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    LOR             reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    RPAREN          reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    COMMA           reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    RBRACE          reduce using rule 134 (postfix_expression_not_name -> post_decrement_expression .)
    INC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)
    DEC             reduce using rule 131 (postfix_expression -> post_decrement_expression .)


state 415

    (135) post_increment_expression -> postfix_expression . INC
    (136) post_decrement_expression -> postfix_expression . DEC

    INC             shift and go to state 219
    DEC             shift and go to state 220


state 416

    (466) class_header_name1 -> modifiers_opt CLASS IDENT .

    LSS             reduce using rule 466 (class_header_name1 -> modifiers_opt CLASS IDENT .)
    LBRACE          reduce using rule 466 (class_header_name1 -> modifiers_opt CLASS IDENT .)


state 417

    (515) interface_header_name1 -> modifiers_opt INTERFACE IDENT .

    LSS             reduce using rule 515 (interface_header_name1 -> modifiers_opt INTERFACE IDENT .)
    EXTENDS         reduce using rule 515 (interface_header_name1 -> modifiers_opt INTERFACE IDENT .)
    LBRACE          reduce using rule 515 (interface_header_name1 -> modifiers_opt INTERFACE IDENT .)


state 418

    (161) cast_expression -> LPAREN name . type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> LPAREN name . type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> LPAREN name . RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> LPAREN name . dims RPAREN unary_expression_not_plus_minus
    (146) primary_no_new_array -> LPAREN name . RPAREN
    (352) qualified_name -> name . PERIOD simple_name
    (24) conditional_expression_not_name -> name . QUES expression COLON conditional_expression
    (129) postfix_expression -> name .
    (29) conditional_or_expression_not_name -> name . LOR marker_next_quad conditional_and_expression
    (34) conditional_and_expression_not_name -> name . LAND marker_next_quad inclusive_or_expression
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (40) inclusive_or_expression_not_name -> name . OR exclusive_or_expression
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> name . LBRACK expression RBRACK
    (45) exclusive_or_expression_not_name -> name . XOR and_expression
    (333) class_instance_creation_expression_name -> name . PERIOD
    (50) and_expression_not_name -> name . AND equality_expression
    (56) equality_expression_not_name -> name . EQL instanceof_expression
    (58) equality_expression_not_name -> name . NEQ instanceof_expression
    (62) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (71) relational_expression_not_name -> name . LSS shift_expression
    (73) relational_expression_not_name -> name . GTR shift_expression
    (75) relational_expression_not_name -> name . GEQ shift_expression
    (77) relational_expression_not_name -> name . LEQ shift_expression
    (84) shift_expression_not_name -> name . SHL additive_expression
    (86) shift_expression_not_name -> name . SHR additive_expression
    (88) shift_expression_not_name -> name . SHR_UN additive_expression
    (94) additive_expression_not_name -> name . ADD multiplicative_expression
    (96) additive_expression_not_name -> name . SUB multiplicative_expression
    (103) multiplicative_expression_not_name -> name . MUL unary_expression
    (105) multiplicative_expression_not_name -> name . QUO unary_expression
    (107) multiplicative_expression_not_name -> name . REM unary_expression
    (403) type_arguments -> . LSS type_argument_list1
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    RPAREN          shift and go to state 633
    PERIOD          shift and go to state 441
    QUES            shift and go to state 443
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LOR             shift and go to state 444
    LAND            shift and go to state 445
    OR              shift and go to state 446
    LBRACK          shift and go to state 238
    XOR             shift and go to state 447
    AND             shift and go to state 448
    EQL             shift and go to state 449
    NEQ             shift and go to state 450
    INSTANCEOF      shift and go to state 451
    LSS             shift and go to state 452
    GTR             shift and go to state 453
    GEQ             shift and go to state 454
    LEQ             shift and go to state 455
    SHL             shift and go to state 456
    SHR             shift and go to state 457
    SHR_UN          shift and go to state 458
    ADD             shift and go to state 459
    SUB             shift and go to state 460
    MUL             shift and go to state 461
    QUO             shift and go to state 462
    REM             shift and go to state 463

    type_arguments                 shift and go to state 440
    dims                           shift and go to state 442
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 419

    (7) assignment -> postfix_expression assignment_operator assignment_expression .

    $end            reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    RBRACK          reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)


state 420

    (21) conditional_expression -> conditional_or_expression QUES expression . COLON conditional_expression

    COLON           shift and go to state 634


state 421

    (26) conditional_or_expression -> conditional_or_expression LOR marker_next_quad . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    conditional_and_expression     shift and go to state 635
    inclusive_or_expression        shift and go to state 66
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 422

    (329) class_instance_creation_expression -> primary PERIOD NEW . type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary PERIOD NEW . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (394) class_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    LSS             shift and go to state 185
    IDENT           shift and go to state 196

    type_arguments                 shift and go to state 636
    class_type                     shift and go to state 637
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 423

    (222) method_invocation -> primary PERIOD type_arguments . IDENT LPAREN argument_list_opt RPAREN

    IDENT           shift and go to state 638


state 424

    (336) field_access -> primary PERIOD IDENT .
    (225) method_invocation -> primary PERIOD IDENT . LPAREN argument_list_opt RPAREN

    LBRACK          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    PERIOD          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    INC             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    DEC             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    ASSIGN          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    MUL_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    QUO_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    REM_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    ADD_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SUB_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHL_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHR_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHR_UN_ASSIGN   reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    AND_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    OR_ASSIGN       reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    XOR_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    MUL             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    QUO             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    REM             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    ADD             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SUB             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHL             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHR             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHR_UN          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    GTR             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    LSS             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    GEQ             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    LEQ             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    INSTANCEOF      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    EQL             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    NEQ             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    AND             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    XOR             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    OR              reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    LAND            reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    QUES            reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    LOR             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    $end            reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SEMICOLON       reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    RPAREN          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    COLON           reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    RBRACK          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    COMMA           reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    RBRACE          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    LPAREN          shift and go to state 639


state 425

    (148) primary_no_new_array -> name PERIOD THIS .

    LBRACK          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    PERIOD          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    INC             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    DEC             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    ASSIGN          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    MUL_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    QUO_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    REM_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    ADD_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SUB_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHL_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHR_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHR_UN_ASSIGN   reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    AND_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    OR_ASSIGN       reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    XOR_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    MUL             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    QUO             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    REM             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    ADD             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SUB             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHL             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHR             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHR_UN          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    GTR             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    LSS             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    GEQ             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    LEQ             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    INSTANCEOF      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    EQL             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    NEQ             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    AND             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    XOR             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    OR              reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    LAND            reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    QUES            reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    LOR             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    $end            reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SEMICOLON       reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    RPAREN          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    COLON           reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    RBRACK          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    COMMA           reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    RBRACE          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)


state 426

    (149) primary_no_new_array -> name PERIOD SUPER .

    LBRACK          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    PERIOD          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    INC             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    DEC             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    ASSIGN          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    MUL_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    QUO_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    REM_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    ADD_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SUB_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHL_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHR_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHR_UN_ASSIGN   reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    AND_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    OR_ASSIGN       reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    XOR_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    MUL             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    QUO             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    REM             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    ADD             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SUB             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHL             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHR             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHR_UN          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    GTR             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    LSS             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    GEQ             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    LEQ             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    INSTANCEOF      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    EQL             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    NEQ             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    AND             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    XOR             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    OR              reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    LAND            reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    QUES            reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    LOR             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    $end            reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SEMICOLON       reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    RPAREN          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    COLON           reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    RBRACK          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    COMMA           reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    RBRACE          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)


state 427

    (150) primary_no_new_array -> name PERIOD CLASS .

    LBRACK          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    PERIOD          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    INC             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    DEC             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    ASSIGN          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    MUL_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    QUO_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    REM_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    ADD_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SUB_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SHL_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SHR_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SHR_UN_ASSIGN   reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    AND_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    OR_ASSIGN       reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    XOR_ASSIGN      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    MUL             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    QUO             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    REM             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    ADD             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SUB             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SHL             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SHR             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SHR_UN          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    GTR             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    LSS             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    GEQ             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    LEQ             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    INSTANCEOF      reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    EQL             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    NEQ             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    AND             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    XOR             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    OR              reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    LAND            reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    QUES            reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    LOR             reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    $end            reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    SEMICOLON       reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    RPAREN          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    COLON           reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    RBRACK          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    COMMA           reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)
    RBRACE          reduce using rule 150 (primary_no_new_array -> name PERIOD CLASS .)


state 428

    (352) qualified_name -> name PERIOD simple_name .

    PERIOD          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LBRACK          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    INC             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    DEC             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    ASSIGN          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    MUL_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    QUO_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    REM_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    ADD_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SUB_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHL_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHR_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHR_UN_ASSIGN   reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    AND_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    OR_ASSIGN       reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    XOR_ASSIGN      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    MUL             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    QUO             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    REM             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    ADD             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SUB             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHL             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHR             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHR_UN          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    GTR             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LSS             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    GEQ             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LEQ             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    INSTANCEOF      reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    EQL             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    NEQ             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    AND             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    XOR             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    OR              reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LAND            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    QUES            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LOR             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    $end            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    IDENT           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SEMICOLON       reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LPAREN          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    PACKAGE         reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    PUBLIC          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    PROTECTED       reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    PRIVATE         reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    STATIC          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    ABSTRACT        reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    FINAL           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    NATIVE          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SYNCHRONIZED    reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    TRANSIENT       reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    VOLATILE        reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    STRICTFP        reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    ATRATE          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    CLASS           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    INTERFACE       reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    BOOLEAN         reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    VOID            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    BYTE            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    SHORT           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    INT             reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LONG            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    CHAR            reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    FLOAT           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    DOUBLE          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    RPAREN          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    COMMA           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    RBRACE          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    COLON           reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    RBRACK          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    LBRACE          reduce using rule 352 (qualified_name -> name PERIOD simple_name .)
    ELLIPSIS        reduce using rule 352 (qualified_name -> name PERIOD simple_name .)


state 429

    (221) method_invocation -> name PERIOD type_arguments . IDENT LPAREN argument_list_opt RPAREN

    IDENT           shift and go to state 640


state 430

    (224) method_invocation -> name PERIOD IDENT . LPAREN argument_list_opt RPAREN
    (351) simple_name -> IDENT .

    LPAREN          shift and go to state 641
    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    INC             reduce using rule 351 (simple_name -> IDENT .)
    DEC             reduce using rule 351 (simple_name -> IDENT .)
    ASSIGN          reduce using rule 351 (simple_name -> IDENT .)
    MUL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    QUO_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    REM_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    ADD_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SUB_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN_ASSIGN   reduce using rule 351 (simple_name -> IDENT .)
    AND_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    OR_ASSIGN       reduce using rule 351 (simple_name -> IDENT .)
    XOR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    MUL             reduce using rule 351 (simple_name -> IDENT .)
    QUO             reduce using rule 351 (simple_name -> IDENT .)
    REM             reduce using rule 351 (simple_name -> IDENT .)
    ADD             reduce using rule 351 (simple_name -> IDENT .)
    SUB             reduce using rule 351 (simple_name -> IDENT .)
    SHL             reduce using rule 351 (simple_name -> IDENT .)
    SHR             reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN          reduce using rule 351 (simple_name -> IDENT .)
    GTR             reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    GEQ             reduce using rule 351 (simple_name -> IDENT .)
    LEQ             reduce using rule 351 (simple_name -> IDENT .)
    INSTANCEOF      reduce using rule 351 (simple_name -> IDENT .)
    EQL             reduce using rule 351 (simple_name -> IDENT .)
    NEQ             reduce using rule 351 (simple_name -> IDENT .)
    AND             reduce using rule 351 (simple_name -> IDENT .)
    XOR             reduce using rule 351 (simple_name -> IDENT .)
    OR              reduce using rule 351 (simple_name -> IDENT .)
    LAND            reduce using rule 351 (simple_name -> IDENT .)
    QUES            reduce using rule 351 (simple_name -> IDENT .)
    LOR             reduce using rule 351 (simple_name -> IDENT .)
    $end            reduce using rule 351 (simple_name -> IDENT .)
    SEMICOLON       reduce using rule 351 (simple_name -> IDENT .)
    RPAREN          reduce using rule 351 (simple_name -> IDENT .)
    COLON           reduce using rule 351 (simple_name -> IDENT .)
    RBRACK          reduce using rule 351 (simple_name -> IDENT .)
    COMMA           reduce using rule 351 (simple_name -> IDENT .)
    RBRACE          reduce using rule 351 (simple_name -> IDENT .)
    IDENT           reduce using rule 351 (simple_name -> IDENT .)


state 431

    (151) primary_no_new_array -> name dims PERIOD . CLASS

    CLASS           shift and go to state 642


state 432

    (338) array_access -> name LBRACK expression . RBRACK

    RBRACK          shift and go to state 643


state 433

    (159) one_dim_loop -> LBRACK RBRACK .

    LBRACK          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    PERIOD          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    IDENT           reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    INSTANCEOF      reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    EQL             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    NEQ             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    AND             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    XOR             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    OR              reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    LAND            reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    QUES            reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    LOR             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    $end            reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    SEMICOLON       reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    COLON           reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    RPAREN          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    RBRACK          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    COMMA           reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    RBRACE          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    ELLIPSIS        reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    ASSIGN          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    GTR             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    SHR             reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    SHR_UN          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    THROWS          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)
    LBRACE          reduce using rule 159 (one_dim_loop -> LBRACK RBRACK .)


state 434

    (158) dims_loop -> dims_loop one_dim_loop .

    LBRACK          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    PERIOD          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    IDENT           reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    INSTANCEOF      reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    EQL             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    NEQ             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    AND             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    XOR             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    OR              reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    LAND            reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    QUES            reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    LOR             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    $end            reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    SEMICOLON       reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    COLON           reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    RPAREN          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    RBRACK          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    COMMA           reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    RBRACE          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    ELLIPSIS        reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    ASSIGN          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    GTR             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    SHR             reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    SHR_UN          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    THROWS          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)
    LBRACE          reduce using rule 158 (dims_loop -> dims_loop one_dim_loop .)


state 435

    (31) conditional_and_expression -> conditional_and_expression LAND marker_next_quad . inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    inclusive_or_expression        shift and go to state 644
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 436

    (339) array_access -> primary_no_new_array LBRACK expression . RBRACK

    RBRACK          shift and go to state 645


state 437

    (340) array_access -> array_creation_with_array_initializer LBRACK expression . RBRACK

    RBRACK          shift and go to state 646


state 438

    (37) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (42) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    QUES            reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    $end            reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACK          reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 37 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 287


state 439

    (146) primary_no_new_array -> LPAREN name RPAREN .
    (163) cast_expression -> LPAREN name RPAREN . unary_expression_not_plus_minus
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    LBRACK          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    PERIOD          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    INC             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    DEC             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    ASSIGN          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    MUL_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    QUO_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    REM_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    ADD_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SUB_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHL_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    AND_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    OR_ASSIGN       reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    XOR_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    MUL             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    QUO             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    REM             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    ADD             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SUB             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHL             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR_UN          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    GTR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LSS             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    GEQ             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LEQ             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    INSTANCEOF      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    EQL             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    NEQ             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    AND             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    XOR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    OR              reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LAND            reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    QUES            reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LOR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    $end            reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    RPAREN          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SEMICOLON       reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    COLON           reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    RBRACK          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    COMMA           reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    RBRACE          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression_not_plus_minus shift and go to state 647
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 440

    (161) cast_expression -> LPAREN name type_arguments . dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> LPAREN name type_arguments . PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 649
    RPAREN          reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 648
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 441

    (352) qualified_name -> name PERIOD . simple_name
    (148) primary_no_new_array -> name PERIOD . THIS
    (149) primary_no_new_array -> name PERIOD . SUPER
    (150) primary_no_new_array -> name PERIOD . CLASS
    (221) method_invocation -> name PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (333) class_instance_creation_expression_name -> name PERIOD .
    (351) simple_name -> . IDENT
    (403) type_arguments -> . LSS type_argument_list1

    THIS            shift and go to state 425
    SUPER           shift and go to state 426
    CLASS           shift and go to state 427
    IDENT           shift and go to state 430
    NEW             reduce using rule 333 (class_instance_creation_expression_name -> name PERIOD .)
    LSS             shift and go to state 185

    simple_name                    shift and go to state 428
    type_arguments                 shift and go to state 429

state 442

    (164) cast_expression -> LPAREN name dims . RPAREN unary_expression_not_plus_minus
    (151) primary_no_new_array -> name dims . PERIOD CLASS

    RPAREN          shift and go to state 650
    PERIOD          shift and go to state 431


state 443

    (24) conditional_expression_not_name -> name QUES . expression COLON conditional_expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    expression                     shift and go to state 651
    conditional_expression         shift and go to state 52
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 444

    (29) conditional_or_expression_not_name -> name LOR . marker_next_quad conditional_and_expression
    (35) marker_next_quad -> .

    ADD             reduce using rule 35 (marker_next_quad -> .)
    SUB             reduce using rule 35 (marker_next_quad -> .)
    INC             reduce using rule 35 (marker_next_quad -> .)
    DEC             reduce using rule 35 (marker_next_quad -> .)
    LNOT            reduce using rule 35 (marker_next_quad -> .)
    NOT             reduce using rule 35 (marker_next_quad -> .)
    LPAREN          reduce using rule 35 (marker_next_quad -> .)
    THIS            reduce using rule 35 (marker_next_quad -> .)
    NEW             reduce using rule 35 (marker_next_quad -> .)
    IDENT           reduce using rule 35 (marker_next_quad -> .)
    HEX_LIT         reduce using rule 35 (marker_next_quad -> .)
    OCTAL_LIT       reduce using rule 35 (marker_next_quad -> .)
    BINARY_LIT      reduce using rule 35 (marker_next_quad -> .)
    DECIMAL_LIT     reduce using rule 35 (marker_next_quad -> .)
    FLOAT_HEX_LIT   reduce using rule 35 (marker_next_quad -> .)
    FLOAT_DEC_LIT   reduce using rule 35 (marker_next_quad -> .)
    CHAR_LIT        reduce using rule 35 (marker_next_quad -> .)
    STRING_LIT      reduce using rule 35 (marker_next_quad -> .)
    BOOL_LIT        reduce using rule 35 (marker_next_quad -> .)
    NULL_LIT        reduce using rule 35 (marker_next_quad -> .)
    SUPER           reduce using rule 35 (marker_next_quad -> .)
    BOOLEAN         reduce using rule 35 (marker_next_quad -> .)
    VOID            reduce using rule 35 (marker_next_quad -> .)
    BYTE            reduce using rule 35 (marker_next_quad -> .)
    SHORT           reduce using rule 35 (marker_next_quad -> .)
    INT             reduce using rule 35 (marker_next_quad -> .)
    LONG            reduce using rule 35 (marker_next_quad -> .)
    CHAR            reduce using rule 35 (marker_next_quad -> .)
    FLOAT           reduce using rule 35 (marker_next_quad -> .)
    DOUBLE          reduce using rule 35 (marker_next_quad -> .)

    marker_next_quad               shift and go to state 652

state 445

    (34) conditional_and_expression_not_name -> name LAND . marker_next_quad inclusive_or_expression
    (35) marker_next_quad -> .

    ADD             reduce using rule 35 (marker_next_quad -> .)
    SUB             reduce using rule 35 (marker_next_quad -> .)
    INC             reduce using rule 35 (marker_next_quad -> .)
    DEC             reduce using rule 35 (marker_next_quad -> .)
    LNOT            reduce using rule 35 (marker_next_quad -> .)
    NOT             reduce using rule 35 (marker_next_quad -> .)
    LPAREN          reduce using rule 35 (marker_next_quad -> .)
    THIS            reduce using rule 35 (marker_next_quad -> .)
    NEW             reduce using rule 35 (marker_next_quad -> .)
    IDENT           reduce using rule 35 (marker_next_quad -> .)
    HEX_LIT         reduce using rule 35 (marker_next_quad -> .)
    OCTAL_LIT       reduce using rule 35 (marker_next_quad -> .)
    BINARY_LIT      reduce using rule 35 (marker_next_quad -> .)
    DECIMAL_LIT     reduce using rule 35 (marker_next_quad -> .)
    FLOAT_HEX_LIT   reduce using rule 35 (marker_next_quad -> .)
    FLOAT_DEC_LIT   reduce using rule 35 (marker_next_quad -> .)
    CHAR_LIT        reduce using rule 35 (marker_next_quad -> .)
    STRING_LIT      reduce using rule 35 (marker_next_quad -> .)
    BOOL_LIT        reduce using rule 35 (marker_next_quad -> .)
    NULL_LIT        reduce using rule 35 (marker_next_quad -> .)
    SUPER           reduce using rule 35 (marker_next_quad -> .)
    BOOLEAN         reduce using rule 35 (marker_next_quad -> .)
    VOID            reduce using rule 35 (marker_next_quad -> .)
    BYTE            reduce using rule 35 (marker_next_quad -> .)
    SHORT           reduce using rule 35 (marker_next_quad -> .)
    INT             reduce using rule 35 (marker_next_quad -> .)
    LONG            reduce using rule 35 (marker_next_quad -> .)
    CHAR            reduce using rule 35 (marker_next_quad -> .)
    FLOAT           reduce using rule 35 (marker_next_quad -> .)
    DOUBLE          reduce using rule 35 (marker_next_quad -> .)

    marker_next_quad               shift and go to state 653

state 446

    (40) inclusive_or_expression_not_name -> name OR . exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    exclusive_or_expression        shift and go to state 654
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 447

    (45) exclusive_or_expression_not_name -> name XOR . and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    and_expression                 shift and go to state 655
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 448

    (50) and_expression_not_name -> name AND . equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    equality_expression            shift and go to state 656
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 449

    (56) equality_expression_not_name -> name EQL . instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    instanceof_expression          shift and go to state 657
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 450

    (58) equality_expression_not_name -> name NEQ . instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    instanceof_expression          shift and go to state 658
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 451

    (62) instanceof_expression_not_name -> name INSTANCEOF . reference_type
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    name                           shift and go to state 316
    reference_type                 shift and go to state 659
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 452

    (71) relational_expression_not_name -> name LSS . shift_expression
    (403) type_arguments -> LSS . type_argument_list1
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (404) type_argument_list1 -> . type_argument1
    (405) type_argument_list1 -> . type_argument_list COMMA type_argument1
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (406) type_argument_list -> . type_argument
    (407) type_argument_list -> . type_argument_list COMMA type_argument
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (333) class_instance_creation_expression_name -> . name PERIOD

    QUES            shift and go to state 365
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 77
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74

    name                           shift and go to state 660
    shift_expression               shift and go to state 661
    type_argument_list1            shift and go to state 357
    additive_expression            shift and go to state 104
    type_argument1                 shift and go to state 358
    type_argument_list             shift and go to state 359
    multiplicative_expression      shift and go to state 105
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    type_argument                  shift and go to state 362
    unary_expression               shift and go to state 108
    reference_type                 shift and go to state 363
    class_or_interface             shift and go to state 364
    wildcard                       shift and go to state 366
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    generic_type                   shift and go to state 368
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primitive_type                 shift and go to state 662
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 453

    (73) relational_expression_not_name -> name GTR . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    shift_expression               shift and go to state 663
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 454

    (75) relational_expression_not_name -> name GEQ . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    shift_expression               shift and go to state 664
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 455

    (77) relational_expression_not_name -> name LEQ . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    shift_expression               shift and go to state 665
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 456

    (84) shift_expression_not_name -> name SHL . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    additive_expression            shift and go to state 666
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 457

    (86) shift_expression_not_name -> name SHR . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    additive_expression            shift and go to state 667
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 458

    (88) shift_expression_not_name -> name SHR_UN . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    additive_expression            shift and go to state 668
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 459

    (94) additive_expression_not_name -> name ADD . multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    multiplicative_expression      shift and go to state 669
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 460

    (96) additive_expression_not_name -> name SUB . multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    multiplicative_expression      shift and go to state 670
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 461

    (103) multiplicative_expression_not_name -> name MUL . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression               shift and go to state 671
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 462

    (105) multiplicative_expression_not_name -> name QUO . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression               shift and go to state 672
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 463

    (107) multiplicative_expression_not_name -> name REM . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression               shift and go to state 673
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 464

    (147) primary_no_new_array -> LPAREN expression_not_name RPAREN .

    LBRACK          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    PERIOD          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    INC             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    DEC             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    ASSIGN          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    MUL_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    QUO_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    REM_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    ADD_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SUB_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SHL_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SHR_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    AND_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    OR_ASSIGN       reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    XOR_ASSIGN      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    MUL             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    QUO             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    REM             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    ADD             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SUB             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SHL             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SHR             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SHR_UN          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    GTR             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    LSS             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    GEQ             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    LEQ             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    INSTANCEOF      reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    EQL             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    NEQ             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    AND             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    XOR             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    OR              reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    LAND            reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    QUES            reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    LOR             reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    $end            reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    SEMICOLON       reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    RPAREN          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    COLON           reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    RBRACK          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    COMMA           reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)
    RBRACE          reduce using rule 147 (primary_no_new_array -> LPAREN expression_not_name RPAREN .)


state 465

    (160) cast_expression -> LPAREN primitive_type dims_opt . RPAREN unary_expression

    RPAREN          shift and go to state 674


state 466

    (152) primary_no_new_array -> primitive_type dims . PERIOD CLASS
    (154) dims_opt -> dims .

    PERIOD          shift and go to state 495
    RPAREN          reduce using rule 154 (dims_opt -> dims .)


state 467

    (155) dims_opt -> empty .

    RPAREN          reduce using rule 155 (dims_opt -> empty .)
    ASSIGN          reduce using rule 155 (dims_opt -> empty .)
    COMMA           reduce using rule 155 (dims_opt -> empty .)
    SEMICOLON       reduce using rule 155 (dims_opt -> empty .)
    THROWS          reduce using rule 155 (dims_opt -> empty .)
    LBRACE          reduce using rule 155 (dims_opt -> empty .)
    COLON           reduce using rule 155 (dims_opt -> empty .)


state 468

    (23) conditional_expression_not_name -> conditional_or_expression_not_name QUES . expression COLON conditional_expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 675
    conditional_expression         shift and go to state 52
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 469

    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name LOR . marker_next_quad conditional_and_expression
    (35) marker_next_quad -> .

    ADD             reduce using rule 35 (marker_next_quad -> .)
    SUB             reduce using rule 35 (marker_next_quad -> .)
    INC             reduce using rule 35 (marker_next_quad -> .)
    DEC             reduce using rule 35 (marker_next_quad -> .)
    LNOT            reduce using rule 35 (marker_next_quad -> .)
    NOT             reduce using rule 35 (marker_next_quad -> .)
    LPAREN          reduce using rule 35 (marker_next_quad -> .)
    THIS            reduce using rule 35 (marker_next_quad -> .)
    NEW             reduce using rule 35 (marker_next_quad -> .)
    IDENT           reduce using rule 35 (marker_next_quad -> .)
    HEX_LIT         reduce using rule 35 (marker_next_quad -> .)
    OCTAL_LIT       reduce using rule 35 (marker_next_quad -> .)
    BINARY_LIT      reduce using rule 35 (marker_next_quad -> .)
    DECIMAL_LIT     reduce using rule 35 (marker_next_quad -> .)
    FLOAT_HEX_LIT   reduce using rule 35 (marker_next_quad -> .)
    FLOAT_DEC_LIT   reduce using rule 35 (marker_next_quad -> .)
    CHAR_LIT        reduce using rule 35 (marker_next_quad -> .)
    STRING_LIT      reduce using rule 35 (marker_next_quad -> .)
    BOOL_LIT        reduce using rule 35 (marker_next_quad -> .)
    NULL_LIT        reduce using rule 35 (marker_next_quad -> .)
    SUPER           reduce using rule 35 (marker_next_quad -> .)
    BOOLEAN         reduce using rule 35 (marker_next_quad -> .)
    VOID            reduce using rule 35 (marker_next_quad -> .)
    BYTE            reduce using rule 35 (marker_next_quad -> .)
    SHORT           reduce using rule 35 (marker_next_quad -> .)
    INT             reduce using rule 35 (marker_next_quad -> .)
    LONG            reduce using rule 35 (marker_next_quad -> .)
    CHAR            reduce using rule 35 (marker_next_quad -> .)
    FLOAT           reduce using rule 35 (marker_next_quad -> .)
    DOUBLE          reduce using rule 35 (marker_next_quad -> .)

    marker_next_quad               shift and go to state 676

state 470

    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name LAND . marker_next_quad inclusive_or_expression
    (35) marker_next_quad -> .

    ADD             reduce using rule 35 (marker_next_quad -> .)
    SUB             reduce using rule 35 (marker_next_quad -> .)
    INC             reduce using rule 35 (marker_next_quad -> .)
    DEC             reduce using rule 35 (marker_next_quad -> .)
    LNOT            reduce using rule 35 (marker_next_quad -> .)
    NOT             reduce using rule 35 (marker_next_quad -> .)
    LPAREN          reduce using rule 35 (marker_next_quad -> .)
    THIS            reduce using rule 35 (marker_next_quad -> .)
    NEW             reduce using rule 35 (marker_next_quad -> .)
    IDENT           reduce using rule 35 (marker_next_quad -> .)
    HEX_LIT         reduce using rule 35 (marker_next_quad -> .)
    OCTAL_LIT       reduce using rule 35 (marker_next_quad -> .)
    BINARY_LIT      reduce using rule 35 (marker_next_quad -> .)
    DECIMAL_LIT     reduce using rule 35 (marker_next_quad -> .)
    FLOAT_HEX_LIT   reduce using rule 35 (marker_next_quad -> .)
    FLOAT_DEC_LIT   reduce using rule 35 (marker_next_quad -> .)
    CHAR_LIT        reduce using rule 35 (marker_next_quad -> .)
    STRING_LIT      reduce using rule 35 (marker_next_quad -> .)
    BOOL_LIT        reduce using rule 35 (marker_next_quad -> .)
    NULL_LIT        reduce using rule 35 (marker_next_quad -> .)
    SUPER           reduce using rule 35 (marker_next_quad -> .)
    BOOLEAN         reduce using rule 35 (marker_next_quad -> .)
    VOID            reduce using rule 35 (marker_next_quad -> .)
    BYTE            reduce using rule 35 (marker_next_quad -> .)
    SHORT           reduce using rule 35 (marker_next_quad -> .)
    INT             reduce using rule 35 (marker_next_quad -> .)
    LONG            reduce using rule 35 (marker_next_quad -> .)
    CHAR            reduce using rule 35 (marker_next_quad -> .)
    FLOAT           reduce using rule 35 (marker_next_quad -> .)
    DOUBLE          reduce using rule 35 (marker_next_quad -> .)

    marker_next_quad               shift and go to state 677

state 471

    (39) inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR . exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    exclusive_or_expression        shift and go to state 678
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 472

    (44) exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR . and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    and_expression                 shift and go to state 679
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 473

    (49) and_expression_not_name -> and_expression_not_name AND . equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    equality_expression            shift and go to state 680
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 474

    (55) equality_expression_not_name -> equality_expression_not_name EQL . instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    instanceof_expression          shift and go to state 681
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 475

    (57) equality_expression_not_name -> equality_expression_not_name NEQ . instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    instanceof_expression          shift and go to state 682
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 476

    (63) instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF . reference_type
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type                 shift and go to state 683
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    primitive_type                 shift and go to state 369
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 477

    (70) relational_expression_not_name -> shift_expression_not_name LSS . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 684
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 478

    (72) relational_expression_not_name -> shift_expression_not_name GTR . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 685
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 479

    (74) relational_expression_not_name -> shift_expression_not_name GEQ . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 686
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 480

    (76) relational_expression_not_name -> shift_expression_not_name LEQ . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    shift_expression               shift and go to state 687
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 481

    (83) shift_expression_not_name -> shift_expression_not_name SHL . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    additive_expression            shift and go to state 688
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 482

    (85) shift_expression_not_name -> shift_expression_not_name SHR . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    additive_expression            shift and go to state 689
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 483

    (87) shift_expression_not_name -> shift_expression_not_name SHR_UN . additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    additive_expression            shift and go to state 690
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 484

    (93) additive_expression_not_name -> additive_expression_not_name ADD . multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    multiplicative_expression      shift and go to state 691
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 485

    (95) additive_expression_not_name -> additive_expression_not_name SUB . multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    multiplicative_expression      shift and go to state 692
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 486

    (102) multiplicative_expression_not_name -> multiplicative_expression_not_name MUL . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 693
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 487

    (104) multiplicative_expression_not_name -> multiplicative_expression_not_name QUO . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 694
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 488

    (106) multiplicative_expression_not_name -> multiplicative_expression_not_name REM . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    unary_expression               shift and go to state 695
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 489

    (115) unary_expression_not_name -> ADD unary_expression .

    MUL             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    QUO             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    REM             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    ADD             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    SUB             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    LSS             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    GTR             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    GEQ             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    LEQ             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    SHL             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    SHR             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    SHR_UN          reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    INSTANCEOF      reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    EQL             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    NEQ             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    AND             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    XOR             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    OR              reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    LAND            reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    QUES            reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    LOR             reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    RPAREN          reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    COMMA           reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)
    RBRACE          reduce using rule 115 (unary_expression_not_name -> ADD unary_expression .)


state 490

    (116) unary_expression_not_name -> SUB unary_expression .

    MUL             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    QUO             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    REM             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    ADD             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    SUB             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    LSS             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    GTR             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    GEQ             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    LEQ             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    SHL             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    SHR             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    SHR_UN          reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    INSTANCEOF      reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    EQL             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    NEQ             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    AND             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    XOR             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    OR              reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    LAND            reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    QUES            reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    LOR             reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    RPAREN          reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    COMMA           reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)
    RBRACE          reduce using rule 116 (unary_expression_not_name -> SUB unary_expression .)


state 491

    (125) unary_expression_not_plus_minus_not_name -> LNOT unary_expression .

    MUL             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    QUO             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    REM             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    ADD             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    SUB             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    LSS             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    GTR             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    GEQ             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    LEQ             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    SHL             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    SHR             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    SHR_UN          reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    INSTANCEOF      reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    EQL             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    NEQ             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    AND             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    XOR             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    OR              reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    LAND            reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    QUES            reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    LOR             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    RPAREN          reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    COMMA           reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)
    RBRACE          reduce using rule 125 (unary_expression_not_plus_minus_not_name -> LNOT unary_expression .)


state 492

    (126) unary_expression_not_plus_minus_not_name -> NOT unary_expression .

    MUL             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    QUO             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    REM             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    ADD             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    SUB             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    LSS             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    GTR             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    GEQ             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    LEQ             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    SHL             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    SHR             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    SHR_UN          reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    INSTANCEOF      reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    EQL             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    NEQ             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    AND             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    XOR             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    OR              reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    LAND            reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    QUES            reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    LOR             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    RPAREN          reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    COMMA           reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)
    RBRACE          reduce using rule 126 (unary_expression_not_plus_minus_not_name -> NOT unary_expression .)


state 493

    (337) field_access -> SUPER PERIOD IDENT .
    (226) method_invocation -> SUPER PERIOD IDENT . LPAREN argument_list_opt RPAREN

    LBRACK          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    PERIOD          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    INC             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    DEC             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    ASSIGN          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    MUL_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    QUO_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    REM_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    ADD_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SUB_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHL_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHR_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHR_UN_ASSIGN   reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    AND_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    OR_ASSIGN       reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    XOR_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    MUL             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    QUO             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    REM             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    ADD             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SUB             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHL             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHR             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHR_UN          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    GTR             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    LSS             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    GEQ             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    LEQ             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    INSTANCEOF      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    EQL             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    NEQ             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    AND             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    XOR             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    OR              reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    LAND            reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    QUES            reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    LOR             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    $end            reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SEMICOLON       reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    RPAREN          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    COLON           reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    RBRACK          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    COMMA           reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    RBRACE          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    LPAREN          shift and go to state 696


state 494

    (223) method_invocation -> SUPER PERIOD type_arguments . IDENT LPAREN argument_list_opt RPAREN

    IDENT           shift and go to state 697


state 495

    (152) primary_no_new_array -> primitive_type dims PERIOD . CLASS

    CLASS           shift and go to state 698


state 496

    (153) primary_no_new_array -> primitive_type PERIOD CLASS .

    LBRACK          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    PERIOD          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    INC             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    DEC             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    ASSIGN          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    MUL_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    QUO_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    REM_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    ADD_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SUB_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SHL_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SHR_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SHR_UN_ASSIGN   reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    AND_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    OR_ASSIGN       reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    XOR_ASSIGN      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    MUL             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    QUO             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    REM             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    ADD             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SUB             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SHL             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SHR             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SHR_UN          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    GTR             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    LSS             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    GEQ             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    LEQ             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    INSTANCEOF      reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    EQL             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    NEQ             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    AND             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    XOR             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    OR              reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    LAND            reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    QUES            reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    LOR             reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    $end            reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    SEMICOLON       reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    RPAREN          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    COLON           reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    RBRACK          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    COMMA           reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)
    RBRACE          reduce using rule 153 (primary_no_new_array -> primitive_type PERIOD CLASS .)


state 497

    (341) array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs . array_initializer
    (347) array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .
    (344) dim_with_or_without_exprs -> dim_with_or_without_exprs . dim_with_or_without_expr
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (345) dim_with_or_without_expr -> . LBRACK expression RBRACK
    (346) dim_with_or_without_expr -> . LBRACK RBRACK

    PERIOD          reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    INC             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    DEC             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ASSIGN          reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    MUL_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    QUO_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    REM_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ADD_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SUB_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SHL_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SHR_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SHR_UN_ASSIGN   reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    AND_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    OR_ASSIGN       reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    XOR_ASSIGN      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    MUL             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    QUO             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    REM             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ADD             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SUB             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SHL             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SHR             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SHR_UN          reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    GTR             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LSS             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    GEQ             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LEQ             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    INSTANCEOF      reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    EQL             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    NEQ             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    AND             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    XOR             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    OR              reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LAND            reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    QUES            reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LOR             reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    $end            reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    SEMICOLON       reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RPAREN          reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    COLON           reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RBRACK          reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    COMMA           reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RBRACE          reduce using rule 347 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LBRACE          shift and go to state 701
    LBRACK          shift and go to state 499

    array_initializer              shift and go to state 699
    dim_with_or_without_expr       shift and go to state 700

state 498

    (343) dim_with_or_without_exprs -> dim_with_or_without_expr .

    LBRACE          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LBRACK          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    PERIOD          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    INC             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    DEC             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ASSIGN          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    MUL_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    QUO_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    REM_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ADD_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SUB_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SHL_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SHR_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SHR_UN_ASSIGN   reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    AND_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    OR_ASSIGN       reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    XOR_ASSIGN      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    MUL             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    QUO             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    REM             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ADD             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SUB             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SHL             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SHR             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SHR_UN          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    GTR             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LSS             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    GEQ             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LEQ             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    INSTANCEOF      reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    EQL             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    NEQ             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    AND             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    XOR             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    OR              reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LAND            reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    QUES            reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LOR             reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    $end            reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    SEMICOLON       reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RPAREN          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    COLON           reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RBRACK          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    COMMA           reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RBRACE          reduce using rule 343 (dim_with_or_without_exprs -> dim_with_or_without_expr .)


state 499

    (345) dim_with_or_without_expr -> LBRACK . expression RBRACK
    (346) dim_with_or_without_expr -> LBRACK . RBRACK
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RBRACK          shift and go to state 703
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 702
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 500

    (342) array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs . array_initializer
    (348) array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .
    (344) dim_with_or_without_exprs -> dim_with_or_without_exprs . dim_with_or_without_expr
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (345) dim_with_or_without_expr -> . LBRACK expression RBRACK
    (346) dim_with_or_without_expr -> . LBRACK RBRACK

    PERIOD          reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    INC             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    DEC             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ASSIGN          reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    MUL_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    QUO_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    REM_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ADD_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SUB_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SHL_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SHR_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SHR_UN_ASSIGN   reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    AND_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    OR_ASSIGN       reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    XOR_ASSIGN      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    MUL             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    QUO             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    REM             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ADD             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SUB             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SHL             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SHR             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SHR_UN          reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    GTR             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LSS             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    GEQ             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LEQ             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    INSTANCEOF      reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    EQL             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    NEQ             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    AND             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    XOR             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    OR              reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LAND            reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    QUES            reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LOR             reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    $end            reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    SEMICOLON       reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RPAREN          reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    COLON           reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RBRACK          reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    COMMA           reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RBRACE          reduce using rule 348 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LBRACE          shift and go to state 701
    LBRACK          shift and go to state 499

    array_initializer              shift and go to state 704
    dim_with_or_without_expr       shift and go to state 700

state 501

    (327) class_instance_creation_expression -> NEW type_arguments class_type . LPAREN argument_list_opt RPAREN class_body_opt

    LPAREN          shift and go to state 705


state 502

    (394) class_type -> class_or_interface_type .

    LPAREN          reduce using rule 394 (class_type -> class_or_interface_type .)
    COMMA           reduce using rule 394 (class_type -> class_or_interface_type .)
    LBRACE          reduce using rule 394 (class_type -> class_or_interface_type .)
    SEMICOLON       reduce using rule 394 (class_type -> class_or_interface_type .)


state 503

    (328) class_instance_creation_expression -> NEW class_type LPAREN . argument_list_opt RPAREN class_body_opt
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 706
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 504

    (396) class_or_interface -> generic_type PERIOD . name
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 707
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 505

    (220) method_invocation -> IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 708


state 506

    (530) argument_list_opt -> argument_list .
    (533) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 530 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 709


state 507

    (531) argument_list_opt -> empty .

    RPAREN          reduce using rule 531 (argument_list_opt -> empty .)


state 508

    (532) argument_list -> expression .

    COMMA           reduce using rule 532 (argument_list -> expression .)
    RPAREN          reduce using rule 532 (argument_list -> expression .)


state 509

    (42) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (47) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    QUES            reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    $end            reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMICOLON       reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACK          reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 42 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 289


state 510

    (331) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type . LPAREN argument_list_opt RPAREN class_body_opt

    LPAREN          shift and go to state 710


state 511

    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (394) class_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    class_type                     shift and go to state 711
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 512

    (47) and_expression -> and_expression AND equality_expression .
    (52) equality_expression -> equality_expression . EQL instanceof_expression
    (53) equality_expression -> equality_expression . NEQ instanceof_expression

    AND             reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    QUES            reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    $end            reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    RBRACK          reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 47 (and_expression -> and_expression AND equality_expression .)
    EQL             shift and go to state 290
    NEQ             shift and go to state 291


state 513

    (52) equality_expression -> equality_expression EQL instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    NEQ             reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    AND             reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    XOR             reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    OR              reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    LAND            reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    QUES            reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    LOR             reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    $end            reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    SEMICOLON       reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    COLON           reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    RPAREN          reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    RBRACK          reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    COMMA           reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    RBRACE          reduce using rule 52 (equality_expression -> equality_expression EQL instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 514

    (53) equality_expression -> equality_expression NEQ instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    NEQ             reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    AND             reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    XOR             reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    OR              reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    LAND            reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    QUES            reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    LOR             reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    $end            reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    SEMICOLON       reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    COLON           reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    RPAREN          reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    RBRACK          reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    COMMA           reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    RBRACE          reduce using rule 53 (equality_expression -> equality_expression NEQ instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 515

    (60) instanceof_expression -> instanceof_expression INSTANCEOF reference_type .

    INSTANCEOF      reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    EQL             reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    NEQ             reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    AND             reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    XOR             reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    OR              reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    LAND            reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    QUES            reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    LOR             reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    $end            reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    SEMICOLON       reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    COLON           reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    RPAREN          reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    RBRACK          reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    COMMA           reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    RBRACE          reduce using rule 60 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)


state 516

    (65) relational_expression -> relational_expression GTR shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    GTR             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    LSS             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    GEQ             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    LEQ             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    INSTANCEOF      reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    EQL             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    NEQ             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    AND             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    XOR             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    OR              reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    LAND            reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    QUES            reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    LOR             reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    $end            reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    SEMICOLON       reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    COLON           reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    RPAREN          reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    RBRACK          reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    COMMA           reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    RBRACE          reduce using rule 65 (relational_expression -> relational_expression GTR shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 517

    (66) relational_expression -> relational_expression LSS shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    GTR             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    LSS             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    GEQ             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    LEQ             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    INSTANCEOF      reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    EQL             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    NEQ             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    AND             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    XOR             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    OR              reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    LAND            reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    QUES            reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    LOR             reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    $end            reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    SEMICOLON       reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    COLON           reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    RPAREN          reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    RBRACK          reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    COMMA           reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    RBRACE          reduce using rule 66 (relational_expression -> relational_expression LSS shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 518

    (67) relational_expression -> relational_expression GEQ shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    GTR             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    LSS             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    INSTANCEOF      reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    EQL             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQ             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    AND             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    OR              reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    LAND            reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    QUES            reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    LOR             reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    $end            reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    SEMICOLON       reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    COLON           reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    RBRACK          reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    RBRACE          reduce using rule 67 (relational_expression -> relational_expression GEQ shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 519

    (68) relational_expression -> relational_expression LEQ shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    GTR             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    LSS             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    INSTANCEOF      reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    EQL             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQ             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    AND             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    OR              reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    LAND            reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    QUES            reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    LOR             reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    $end            reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    SEMICOLON       reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    COLON           reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    RBRACK          reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    RBRACE          reduce using rule 68 (relational_expression -> relational_expression LEQ shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 520

    (79) shift_expression -> shift_expression SHL additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    SHL             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    SHR             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    SHR_UN          reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    GTR             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    LSS             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    GEQ             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    LEQ             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    INSTANCEOF      reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    EQL             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    NEQ             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    AND             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    XOR             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    OR              reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    LAND            reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    QUES            reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    LOR             reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    $end            reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    SEMICOLON       reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    COLON           reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    RPAREN          reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    RBRACK          reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    COMMA           reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    RBRACE          reduce using rule 79 (shift_expression -> shift_expression SHL additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 521

    (80) shift_expression -> shift_expression SHR additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    SHL             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    SHR             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    SHR_UN          reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    GTR             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    LSS             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    GEQ             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    LEQ             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    INSTANCEOF      reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    EQL             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    NEQ             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    AND             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    XOR             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    OR              reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    LAND            reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    QUES            reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    LOR             reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    $end            reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    SEMICOLON       reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    COLON           reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    RPAREN          reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    RBRACK          reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    COMMA           reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    RBRACE          reduce using rule 80 (shift_expression -> shift_expression SHR additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 522

    (81) shift_expression -> shift_expression SHR_UN additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    SHL             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    SHR             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    SHR_UN          reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    GTR             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    LSS             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    GEQ             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    LEQ             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    INSTANCEOF      reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    EQL             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    NEQ             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    AND             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    XOR             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    OR              reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    LAND            reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    QUES            reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    LOR             reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    $end            reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    SEMICOLON       reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    COLON           reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    RPAREN          reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    RBRACK          reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    COMMA           reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    RBRACE          reduce using rule 81 (shift_expression -> shift_expression SHR_UN additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 523

    (90) additive_expression -> additive_expression ADD multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SUB             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SHL             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SHR             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SHR_UN          reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GTR             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LSS             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GEQ             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LEQ             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    INSTANCEOF      reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    EQL             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    NEQ             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    AND             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    XOR             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    OR              reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LAND            reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    QUES            reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LOR             reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    $end            reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SEMICOLON       reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COLON           reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RPAREN          reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RBRACK          reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COMMA           reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RBRACE          reduce using rule 90 (additive_expression -> additive_expression ADD multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 524

    (91) additive_expression -> additive_expression SUB multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SUB             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SHL             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SHR             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SHR_UN          reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    GTR             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LSS             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    GEQ             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LEQ             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    INSTANCEOF      reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    EQL             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    NEQ             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    AND             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    XOR             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    OR              reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LAND            reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    QUES            reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    LOR             reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    $end            reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    SEMICOLON       reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    COLON           reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RPAREN          reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RBRACK          reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    COMMA           reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    RBRACE          reduce using rule 91 (additive_expression -> additive_expression SUB multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 525

    (98) multiplicative_expression -> multiplicative_expression MUL unary_expression .

    MUL             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    QUO             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    REM             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    ADD             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SUB             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SHL             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SHR             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SHR_UN          reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    GTR             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LSS             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    GEQ             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LEQ             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    INSTANCEOF      reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    EQL             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    NEQ             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    AND             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    XOR             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    OR              reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LAND            reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    QUES            reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    LOR             reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    $end            reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    SEMICOLON       reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    COLON           reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    RPAREN          reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    RBRACK          reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    COMMA           reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)
    RBRACE          reduce using rule 98 (multiplicative_expression -> multiplicative_expression MUL unary_expression .)


state 526

    (99) multiplicative_expression -> multiplicative_expression QUO unary_expression .

    MUL             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    QUO             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    REM             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    ADD             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    SUB             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    SHL             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    SHR             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    SHR_UN          reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    GTR             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    LSS             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    GEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    LEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    INSTANCEOF      reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    EQL             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    NEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    AND             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    XOR             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    OR              reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    LAND            reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    QUES            reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    LOR             reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    $end            reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    SEMICOLON       reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    COLON           reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    RPAREN          reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    RBRACK          reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    COMMA           reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)
    RBRACE          reduce using rule 99 (multiplicative_expression -> multiplicative_expression QUO unary_expression .)


state 527

    (100) multiplicative_expression -> multiplicative_expression REM unary_expression .

    MUL             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    QUO             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    REM             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    ADD             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    SUB             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    SHL             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    SHR             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    SHR_UN          reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    GTR             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    LSS             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    GEQ             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    LEQ             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    INSTANCEOF      reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    EQL             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    NEQ             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    AND             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    XOR             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    OR              reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    LAND            reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    QUES            reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    LOR             reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    $end            reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    SEMICOLON       reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    COLON           reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    RPAREN          reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    RBRACK          reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    COMMA           reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)
    RBRACE          reduce using rule 100 (multiplicative_expression -> multiplicative_expression REM unary_expression .)


state 528

    (178) variable_declarators -> variable_declarators COMMA . variable_declarator
    (179) variable_declarator -> . variable_declarator_id
    (180) variable_declarator -> . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarator            shift and go to state 712
    variable_declarator_id         shift and go to state 312

state 529

    (180) variable_declarator -> variable_declarator_id ASSIGN . variable_initializer
    (182) variable_initializer -> . expression
    (183) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    LBRACE          shift and go to state 701
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    variable_initializer           shift and go to state 713
    expression                     shift and go to state 714
    array_initializer              shift and go to state 715
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 530

    (181) variable_declarator_id -> IDENT dims_opt .

    ASSIGN          reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    COMMA           reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    SEMICOLON       reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    RPAREN          reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)


state 531

    (154) dims_opt -> dims .

    ASSIGN          reduce using rule 154 (dims_opt -> dims .)
    COMMA           reduce using rule 154 (dims_opt -> dims .)
    SEMICOLON       reduce using rule 154 (dims_opt -> dims .)
    RPAREN          reduce using rule 154 (dims_opt -> dims .)
    THROWS          reduce using rule 154 (dims_opt -> dims .)
    LBRACE          reduce using rule 154 (dims_opt -> dims .)
    COLON           reduce using rule 154 (dims_opt -> dims .)


state 532

    (176) local_variable_declaration -> modifiers type variable_declarators .
    (178) variable_declarators -> variable_declarators . COMMA variable_declarator

    SEMICOLON       reduce using rule 176 (local_variable_declaration -> modifiers type variable_declarators .)
    COMMA           shift and go to state 528


state 533

    (399) array_type -> primitive_type dims .

    IDENT           reduce using rule 399 (array_type -> primitive_type dims .)
    GTR             reduce using rule 399 (array_type -> primitive_type dims .)
    COMMA           reduce using rule 399 (array_type -> primitive_type dims .)
    INSTANCEOF      reduce using rule 399 (array_type -> primitive_type dims .)
    EQL             reduce using rule 399 (array_type -> primitive_type dims .)
    NEQ             reduce using rule 399 (array_type -> primitive_type dims .)
    AND             reduce using rule 399 (array_type -> primitive_type dims .)
    XOR             reduce using rule 399 (array_type -> primitive_type dims .)
    OR              reduce using rule 399 (array_type -> primitive_type dims .)
    LAND            reduce using rule 399 (array_type -> primitive_type dims .)
    QUES            reduce using rule 399 (array_type -> primitive_type dims .)
    LOR             reduce using rule 399 (array_type -> primitive_type dims .)
    $end            reduce using rule 399 (array_type -> primitive_type dims .)
    SEMICOLON       reduce using rule 399 (array_type -> primitive_type dims .)
    COLON           reduce using rule 399 (array_type -> primitive_type dims .)
    RPAREN          reduce using rule 399 (array_type -> primitive_type dims .)
    RBRACK          reduce using rule 399 (array_type -> primitive_type dims .)
    RBRACE          reduce using rule 399 (array_type -> primitive_type dims .)
    SHR             reduce using rule 399 (array_type -> primitive_type dims .)
    ELLIPSIS        reduce using rule 399 (array_type -> primitive_type dims .)
    SHR_UN          reduce using rule 399 (array_type -> primitive_type dims .)


state 534

    (400) array_type -> name dims .

    IDENT           reduce using rule 400 (array_type -> name dims .)
    GTR             reduce using rule 400 (array_type -> name dims .)
    COMMA           reduce using rule 400 (array_type -> name dims .)
    INSTANCEOF      reduce using rule 400 (array_type -> name dims .)
    EQL             reduce using rule 400 (array_type -> name dims .)
    NEQ             reduce using rule 400 (array_type -> name dims .)
    AND             reduce using rule 400 (array_type -> name dims .)
    XOR             reduce using rule 400 (array_type -> name dims .)
    OR              reduce using rule 400 (array_type -> name dims .)
    LAND            reduce using rule 400 (array_type -> name dims .)
    QUES            reduce using rule 400 (array_type -> name dims .)
    LOR             reduce using rule 400 (array_type -> name dims .)
    $end            reduce using rule 400 (array_type -> name dims .)
    SEMICOLON       reduce using rule 400 (array_type -> name dims .)
    COLON           reduce using rule 400 (array_type -> name dims .)
    RPAREN          reduce using rule 400 (array_type -> name dims .)
    RBRACK          reduce using rule 400 (array_type -> name dims .)
    RBRACE          reduce using rule 400 (array_type -> name dims .)
    SHR             reduce using rule 400 (array_type -> name dims .)
    ELLIPSIS        reduce using rule 400 (array_type -> name dims .)
    SHR_UN          reduce using rule 400 (array_type -> name dims .)


state 535

    (227) labeled_statement -> label COLON statement .

    $end            reduce using rule 227 (labeled_statement -> label COLON statement .)
    WHILE           reduce using rule 227 (labeled_statement -> label COLON statement .)
    IF              reduce using rule 227 (labeled_statement -> label COLON statement .)
    FOR             reduce using rule 227 (labeled_statement -> label COLON statement .)
    LBRACE          reduce using rule 227 (labeled_statement -> label COLON statement .)
    ASSERT          reduce using rule 227 (labeled_statement -> label COLON statement .)
    SEMICOLON       reduce using rule 227 (labeled_statement -> label COLON statement .)
    SWITCH          reduce using rule 227 (labeled_statement -> label COLON statement .)
    DO              reduce using rule 227 (labeled_statement -> label COLON statement .)
    BREAK           reduce using rule 227 (labeled_statement -> label COLON statement .)
    CONTINUE        reduce using rule 227 (labeled_statement -> label COLON statement .)
    RETURN          reduce using rule 227 (labeled_statement -> label COLON statement .)
    SYNCHRONIZED    reduce using rule 227 (labeled_statement -> label COLON statement .)
    THROW           reduce using rule 227 (labeled_statement -> label COLON statement .)
    TRY             reduce using rule 227 (labeled_statement -> label COLON statement .)
    IDENT           reduce using rule 227 (labeled_statement -> label COLON statement .)
    BOOLEAN         reduce using rule 227 (labeled_statement -> label COLON statement .)
    VOID            reduce using rule 227 (labeled_statement -> label COLON statement .)
    BYTE            reduce using rule 227 (labeled_statement -> label COLON statement .)
    SHORT           reduce using rule 227 (labeled_statement -> label COLON statement .)
    INT             reduce using rule 227 (labeled_statement -> label COLON statement .)
    LONG            reduce using rule 227 (labeled_statement -> label COLON statement .)
    CHAR            reduce using rule 227 (labeled_statement -> label COLON statement .)
    FLOAT           reduce using rule 227 (labeled_statement -> label COLON statement .)
    DOUBLE          reduce using rule 227 (labeled_statement -> label COLON statement .)
    PUBLIC          reduce using rule 227 (labeled_statement -> label COLON statement .)
    PROTECTED       reduce using rule 227 (labeled_statement -> label COLON statement .)
    PRIVATE         reduce using rule 227 (labeled_statement -> label COLON statement .)
    STATIC          reduce using rule 227 (labeled_statement -> label COLON statement .)
    ABSTRACT        reduce using rule 227 (labeled_statement -> label COLON statement .)
    FINAL           reduce using rule 227 (labeled_statement -> label COLON statement .)
    NATIVE          reduce using rule 227 (labeled_statement -> label COLON statement .)
    TRANSIENT       reduce using rule 227 (labeled_statement -> label COLON statement .)
    VOLATILE        reduce using rule 227 (labeled_statement -> label COLON statement .)
    STRICTFP        reduce using rule 227 (labeled_statement -> label COLON statement .)
    THIS            reduce using rule 227 (labeled_statement -> label COLON statement .)
    SUPER           reduce using rule 227 (labeled_statement -> label COLON statement .)
    INC             reduce using rule 227 (labeled_statement -> label COLON statement .)
    DEC             reduce using rule 227 (labeled_statement -> label COLON statement .)
    NEW             reduce using rule 227 (labeled_statement -> label COLON statement .)
    LSS             reduce using rule 227 (labeled_statement -> label COLON statement .)
    LPAREN          reduce using rule 227 (labeled_statement -> label COLON statement .)
    ATRATE          reduce using rule 227 (labeled_statement -> label COLON statement .)
    HEX_LIT         reduce using rule 227 (labeled_statement -> label COLON statement .)
    OCTAL_LIT       reduce using rule 227 (labeled_statement -> label COLON statement .)
    BINARY_LIT      reduce using rule 227 (labeled_statement -> label COLON statement .)
    DECIMAL_LIT     reduce using rule 227 (labeled_statement -> label COLON statement .)
    FLOAT_HEX_LIT   reduce using rule 227 (labeled_statement -> label COLON statement .)
    FLOAT_DEC_LIT   reduce using rule 227 (labeled_statement -> label COLON statement .)
    CHAR_LIT        reduce using rule 227 (labeled_statement -> label COLON statement .)
    STRING_LIT      reduce using rule 227 (labeled_statement -> label COLON statement .)
    BOOL_LIT        reduce using rule 227 (labeled_statement -> label COLON statement .)
    NULL_LIT        reduce using rule 227 (labeled_statement -> label COLON statement .)
    CLASS           reduce using rule 227 (labeled_statement -> label COLON statement .)
    INTERFACE       reduce using rule 227 (labeled_statement -> label COLON statement .)
    RBRACE          reduce using rule 227 (labeled_statement -> label COLON statement .)
    CASE            reduce using rule 227 (labeled_statement -> label COLON statement .)
    DEFAULT         reduce using rule 227 (labeled_statement -> label COLON statement .)


state 536

    (230) if_then_statement -> IF LPAREN inc_scope . expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope . expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 716
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 537

    (146) primary_no_new_array -> LPAREN name RPAREN .

    LBRACK          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    PERIOD          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    INC             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    DEC             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    ASSIGN          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    MUL_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    QUO_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    REM_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    ADD_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SUB_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHL_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    AND_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    OR_ASSIGN       reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    XOR_ASSIGN      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)


state 538

    (71) relational_expression_not_name -> name LSS . shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    shift_expression               shift and go to state 661
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 539

    (236) while_statement -> WHILE inc_for_while_stack LPAREN . inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (584) inc_scope -> .

    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    ADD             reduce using rule 584 (inc_scope -> .)
    SUB             reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    LNOT            reduce using rule 584 (inc_scope -> .)
    NOT             reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 717

state 540

    (241) for_statement -> FOR inc_for_while_stack LPAREN . inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN . inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN . inc_scope modifiers type IDENT dims_opt
    (584) inc_scope -> .

    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    PUBLIC          reduce using rule 584 (inc_scope -> .)
    PROTECTED       reduce using rule 584 (inc_scope -> .)
    PRIVATE         reduce using rule 584 (inc_scope -> .)
    STATIC          reduce using rule 584 (inc_scope -> .)
    ABSTRACT        reduce using rule 584 (inc_scope -> .)
    FINAL           reduce using rule 584 (inc_scope -> .)
    NATIVE          reduce using rule 584 (inc_scope -> .)
    SYNCHRONIZED    reduce using rule 584 (inc_scope -> .)
    TRANSIENT       reduce using rule 584 (inc_scope -> .)
    VOLATILE        reduce using rule 584 (inc_scope -> .)
    STRICTFP        reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    ATRATE          reduce using rule 584 (inc_scope -> .)
    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SEMICOLON       reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 718

state 541

    (165) block -> LBRACE inc_scope block_statements_opt . dec_scope RBRACE
    (585) dec_scope -> .

    RBRACE          reduce using rule 585 (dec_scope -> .)

    dec_scope                      shift and go to state 719

state 542

    (166) block_statements_opt -> block_statements .
    (169) block_statements -> block_statements . block_statement
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (583) empty -> .
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    RBRACE          reduce using rule 166 (block_statements_opt -> block_statements .)
    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    block_statement                shift and go to state 720
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 543

    (167) block_statements_opt -> empty .
    (364) modifiers_opt -> empty .

    RBRACE          reduce using rule 167 (block_statements_opt -> empty .)
    CLASS           reduce using rule 364 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 364 (modifiers_opt -> empty .)


state 544

    (168) block_statements -> block_statement .

    IF              reduce using rule 168 (block_statements -> block_statement .)
    WHILE           reduce using rule 168 (block_statements -> block_statement .)
    FOR             reduce using rule 168 (block_statements -> block_statement .)
    LBRACE          reduce using rule 168 (block_statements -> block_statement .)
    ASSERT          reduce using rule 168 (block_statements -> block_statement .)
    SEMICOLON       reduce using rule 168 (block_statements -> block_statement .)
    SWITCH          reduce using rule 168 (block_statements -> block_statement .)
    DO              reduce using rule 168 (block_statements -> block_statement .)
    BREAK           reduce using rule 168 (block_statements -> block_statement .)
    CONTINUE        reduce using rule 168 (block_statements -> block_statement .)
    RETURN          reduce using rule 168 (block_statements -> block_statement .)
    SYNCHRONIZED    reduce using rule 168 (block_statements -> block_statement .)
    THROW           reduce using rule 168 (block_statements -> block_statement .)
    TRY             reduce using rule 168 (block_statements -> block_statement .)
    IDENT           reduce using rule 168 (block_statements -> block_statement .)
    BOOLEAN         reduce using rule 168 (block_statements -> block_statement .)
    VOID            reduce using rule 168 (block_statements -> block_statement .)
    BYTE            reduce using rule 168 (block_statements -> block_statement .)
    SHORT           reduce using rule 168 (block_statements -> block_statement .)
    INT             reduce using rule 168 (block_statements -> block_statement .)
    LONG            reduce using rule 168 (block_statements -> block_statement .)
    CHAR            reduce using rule 168 (block_statements -> block_statement .)
    FLOAT           reduce using rule 168 (block_statements -> block_statement .)
    DOUBLE          reduce using rule 168 (block_statements -> block_statement .)
    PUBLIC          reduce using rule 168 (block_statements -> block_statement .)
    PROTECTED       reduce using rule 168 (block_statements -> block_statement .)
    PRIVATE         reduce using rule 168 (block_statements -> block_statement .)
    STATIC          reduce using rule 168 (block_statements -> block_statement .)
    ABSTRACT        reduce using rule 168 (block_statements -> block_statement .)
    FINAL           reduce using rule 168 (block_statements -> block_statement .)
    NATIVE          reduce using rule 168 (block_statements -> block_statement .)
    TRANSIENT       reduce using rule 168 (block_statements -> block_statement .)
    VOLATILE        reduce using rule 168 (block_statements -> block_statement .)
    STRICTFP        reduce using rule 168 (block_statements -> block_statement .)
    THIS            reduce using rule 168 (block_statements -> block_statement .)
    SUPER           reduce using rule 168 (block_statements -> block_statement .)
    INC             reduce using rule 168 (block_statements -> block_statement .)
    DEC             reduce using rule 168 (block_statements -> block_statement .)
    NEW             reduce using rule 168 (block_statements -> block_statement .)
    LSS             reduce using rule 168 (block_statements -> block_statement .)
    LPAREN          reduce using rule 168 (block_statements -> block_statement .)
    ATRATE          reduce using rule 168 (block_statements -> block_statement .)
    HEX_LIT         reduce using rule 168 (block_statements -> block_statement .)
    OCTAL_LIT       reduce using rule 168 (block_statements -> block_statement .)
    BINARY_LIT      reduce using rule 168 (block_statements -> block_statement .)
    DECIMAL_LIT     reduce using rule 168 (block_statements -> block_statement .)
    FLOAT_HEX_LIT   reduce using rule 168 (block_statements -> block_statement .)
    FLOAT_DEC_LIT   reduce using rule 168 (block_statements -> block_statement .)
    CHAR_LIT        reduce using rule 168 (block_statements -> block_statement .)
    STRING_LIT      reduce using rule 168 (block_statements -> block_statement .)
    BOOL_LIT        reduce using rule 168 (block_statements -> block_statement .)
    NULL_LIT        reduce using rule 168 (block_statements -> block_statement .)
    CLASS           reduce using rule 168 (block_statements -> block_statement .)
    INTERFACE       reduce using rule 168 (block_statements -> block_statement .)
    RBRACE          reduce using rule 168 (block_statements -> block_statement .)
    CASE            reduce using rule 168 (block_statements -> block_statement .)
    DEFAULT         reduce using rule 168 (block_statements -> block_statement .)


state 545

    (268) assert_statement -> ASSERT expression SEMICOLON .

    $end            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    WHILE           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    IF              reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    FOR             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    LBRACE          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    ASSERT          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    SEMICOLON       reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    SWITCH          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    DO              reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    BREAK           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    CONTINUE        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    RETURN          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    THROW           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    TRY             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    IDENT           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    BOOLEAN         reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    VOID            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    BYTE            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    SHORT           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    INT             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    LONG            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    CHAR            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    FLOAT           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    DOUBLE          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    PUBLIC          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    PROTECTED       reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    PRIVATE         reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    STATIC          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    ABSTRACT        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    FINAL           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    NATIVE          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    TRANSIENT       reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    VOLATILE        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    STRICTFP        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    THIS            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    SUPER           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    INC             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    DEC             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    NEW             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    LSS             reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    LPAREN          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    ATRATE          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    HEX_LIT         reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    OCTAL_LIT       reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    BINARY_LIT      reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    DECIMAL_LIT     reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    CHAR_LIT        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    STRING_LIT      reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    BOOL_LIT        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    NULL_LIT        reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    CLASS           reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    INTERFACE       reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    RBRACE          reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    CASE            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    DEFAULT         reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)
    ELSE            reduce using rule 268 (assert_statement -> ASSERT expression SEMICOLON .)


state 546

    (269) assert_statement -> ASSERT expression COLON . expression SEMICOLON
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 721
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 547

    (271) switch_statement -> SWITCH LPAREN inc_scope . expression RPAREN switch_block
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 722
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 548

    (284) do_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 723


state 549

    (286) break_statement -> BREAK IDENT SEMICOLON .

    $end            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    WHILE           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    IF              reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    FOR             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    LBRACE          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    ASSERT          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    SEMICOLON       reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    SWITCH          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    DO              reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    BREAK           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    CONTINUE        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    RETURN          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    SYNCHRONIZED    reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    THROW           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    TRY             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    IDENT           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    BOOLEAN         reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    VOID            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    BYTE            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    SHORT           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    INT             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    LONG            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    CHAR            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    FLOAT           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    DOUBLE          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    PUBLIC          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    PROTECTED       reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    PRIVATE         reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    STATIC          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    ABSTRACT        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    FINAL           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    NATIVE          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    TRANSIENT       reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    VOLATILE        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    STRICTFP        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    THIS            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    SUPER           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    INC             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    DEC             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    NEW             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    LSS             reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    LPAREN          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    ATRATE          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    HEX_LIT         reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    OCTAL_LIT       reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    BINARY_LIT      reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    DECIMAL_LIT     reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    CHAR_LIT        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    STRING_LIT      reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    BOOL_LIT        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    NULL_LIT        reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    CLASS           reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    INTERFACE       reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    RBRACE          reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    CASE            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    DEFAULT         reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)
    ELSE            reduce using rule 286 (break_statement -> BREAK IDENT SEMICOLON .)


state 550

    (288) continue_statement -> CONTINUE IDENT SEMICOLON .

    $end            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    WHILE           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    IF              reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    FOR             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    LBRACE          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    ASSERT          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    SEMICOLON       reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    SWITCH          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    DO              reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    BREAK           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    CONTINUE        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    RETURN          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    SYNCHRONIZED    reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    THROW           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    TRY             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    IDENT           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    BOOLEAN         reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    VOID            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    BYTE            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    SHORT           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    INT             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    LONG            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    CHAR            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    FLOAT           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    DOUBLE          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    PUBLIC          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    PROTECTED       reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    PRIVATE         reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    STATIC          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    ABSTRACT        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    FINAL           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    NATIVE          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    TRANSIENT       reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    VOLATILE        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    STRICTFP        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    THIS            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    SUPER           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    INC             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    DEC             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    NEW             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    LSS             reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    LPAREN          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    ATRATE          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    HEX_LIT         reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    OCTAL_LIT       reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    BINARY_LIT      reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    DECIMAL_LIT     reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    CHAR_LIT        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    STRING_LIT      reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    BOOL_LIT        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    NULL_LIT        reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    CLASS           reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    INTERFACE       reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    RBRACE          reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    CASE            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    DEFAULT         reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)
    ELSE            reduce using rule 288 (continue_statement -> CONTINUE IDENT SEMICOLON .)


state 551

    (289) return_statement -> RETURN expression_opt SEMICOLON .

    $end            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    WHILE           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    IF              reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    FOR             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    LBRACE          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    ASSERT          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    SEMICOLON       reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    SWITCH          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    DO              reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    BREAK           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    CONTINUE        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    RETURN          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    SYNCHRONIZED    reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    THROW           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    TRY             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    IDENT           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    BOOLEAN         reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    VOID            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    BYTE            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    SHORT           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    INT             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    LONG            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    CHAR            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    FLOAT           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    DOUBLE          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    PUBLIC          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    PROTECTED       reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    PRIVATE         reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    STATIC          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    ABSTRACT        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    FINAL           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    NATIVE          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    TRANSIENT       reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    VOLATILE        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    STRICTFP        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    THIS            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    SUPER           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    INC             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    DEC             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    NEW             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    LSS             reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    LPAREN          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    ATRATE          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    HEX_LIT         reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    OCTAL_LIT       reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    BINARY_LIT      reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    DECIMAL_LIT     reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    CHAR_LIT        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    STRING_LIT      reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    BOOL_LIT        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    NULL_LIT        reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    CLASS           reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    INTERFACE       reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    RBRACE          reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    CASE            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    DEFAULT         reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)
    ELSE            reduce using rule 289 (return_statement -> RETURN expression_opt SEMICOLON .)


state 552

    (290) synchronized_statement -> SYNCHRONIZED LPAREN expression . RPAREN block

    RPAREN          shift and go to state 724


state 553

    (291) throw_statement -> THROW expression SEMICOLON .

    $end            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    WHILE           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    IF              reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    FOR             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    LBRACE          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    ASSERT          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    SEMICOLON       reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    SWITCH          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    DO              reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    BREAK           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    CONTINUE        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    RETURN          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    THROW           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    TRY             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    IDENT           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    BOOLEAN         reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    VOID            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    BYTE            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    SHORT           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    INT             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    LONG            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    CHAR            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    FLOAT           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    DOUBLE          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    PUBLIC          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    PROTECTED       reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    PRIVATE         reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    STATIC          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    ABSTRACT        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    FINAL           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    NATIVE          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    TRANSIENT       reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    VOLATILE        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    STRICTFP        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    THIS            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    SUPER           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    INC             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    DEC             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    NEW             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    LSS             reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    LPAREN          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    ATRATE          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    HEX_LIT         reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    OCTAL_LIT       reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    BINARY_LIT      reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    DECIMAL_LIT     reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    CHAR_LIT        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    STRING_LIT      reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    BOOL_LIT        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    NULL_LIT        reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    CLASS           reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    INTERFACE       reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    RBRACE          reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    CASE            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    DEFAULT         reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)
    ELSE            reduce using rule 291 (throw_statement -> THROW expression SEMICOLON .)


state 554

    (292) try_statement -> TRY try_block catches .
    (296) catches -> catches . catch_clause
    (297) catches_opt -> catches .
    (299) catch_clause -> . CATCH LPAREN catch_formal_parameter RPAREN block

    $end            reduce using rule 292 (try_statement -> TRY try_block catches .)
    WHILE           reduce using rule 292 (try_statement -> TRY try_block catches .)
    IF              reduce using rule 292 (try_statement -> TRY try_block catches .)
    FOR             reduce using rule 292 (try_statement -> TRY try_block catches .)
    LBRACE          reduce using rule 292 (try_statement -> TRY try_block catches .)
    ASSERT          reduce using rule 292 (try_statement -> TRY try_block catches .)
    SEMICOLON       reduce using rule 292 (try_statement -> TRY try_block catches .)
    SWITCH          reduce using rule 292 (try_statement -> TRY try_block catches .)
    DO              reduce using rule 292 (try_statement -> TRY try_block catches .)
    BREAK           reduce using rule 292 (try_statement -> TRY try_block catches .)
    CONTINUE        reduce using rule 292 (try_statement -> TRY try_block catches .)
    RETURN          reduce using rule 292 (try_statement -> TRY try_block catches .)
    SYNCHRONIZED    reduce using rule 292 (try_statement -> TRY try_block catches .)
    THROW           reduce using rule 292 (try_statement -> TRY try_block catches .)
    TRY             reduce using rule 292 (try_statement -> TRY try_block catches .)
    IDENT           reduce using rule 292 (try_statement -> TRY try_block catches .)
    BOOLEAN         reduce using rule 292 (try_statement -> TRY try_block catches .)
    VOID            reduce using rule 292 (try_statement -> TRY try_block catches .)
    BYTE            reduce using rule 292 (try_statement -> TRY try_block catches .)
    SHORT           reduce using rule 292 (try_statement -> TRY try_block catches .)
    INT             reduce using rule 292 (try_statement -> TRY try_block catches .)
    LONG            reduce using rule 292 (try_statement -> TRY try_block catches .)
    CHAR            reduce using rule 292 (try_statement -> TRY try_block catches .)
    FLOAT           reduce using rule 292 (try_statement -> TRY try_block catches .)
    DOUBLE          reduce using rule 292 (try_statement -> TRY try_block catches .)
    PUBLIC          reduce using rule 292 (try_statement -> TRY try_block catches .)
    PROTECTED       reduce using rule 292 (try_statement -> TRY try_block catches .)
    PRIVATE         reduce using rule 292 (try_statement -> TRY try_block catches .)
    STATIC          reduce using rule 292 (try_statement -> TRY try_block catches .)
    ABSTRACT        reduce using rule 292 (try_statement -> TRY try_block catches .)
    FINAL           reduce using rule 292 (try_statement -> TRY try_block catches .)
    NATIVE          reduce using rule 292 (try_statement -> TRY try_block catches .)
    TRANSIENT       reduce using rule 292 (try_statement -> TRY try_block catches .)
    VOLATILE        reduce using rule 292 (try_statement -> TRY try_block catches .)
    STRICTFP        reduce using rule 292 (try_statement -> TRY try_block catches .)
    THIS            reduce using rule 292 (try_statement -> TRY try_block catches .)
    SUPER           reduce using rule 292 (try_statement -> TRY try_block catches .)
    INC             reduce using rule 292 (try_statement -> TRY try_block catches .)
    DEC             reduce using rule 292 (try_statement -> TRY try_block catches .)
    NEW             reduce using rule 292 (try_statement -> TRY try_block catches .)
    LSS             reduce using rule 292 (try_statement -> TRY try_block catches .)
    LPAREN          reduce using rule 292 (try_statement -> TRY try_block catches .)
    ATRATE          reduce using rule 292 (try_statement -> TRY try_block catches .)
    HEX_LIT         reduce using rule 292 (try_statement -> TRY try_block catches .)
    OCTAL_LIT       reduce using rule 292 (try_statement -> TRY try_block catches .)
    BINARY_LIT      reduce using rule 292 (try_statement -> TRY try_block catches .)
    DECIMAL_LIT     reduce using rule 292 (try_statement -> TRY try_block catches .)
    FLOAT_HEX_LIT   reduce using rule 292 (try_statement -> TRY try_block catches .)
    FLOAT_DEC_LIT   reduce using rule 292 (try_statement -> TRY try_block catches .)
    CHAR_LIT        reduce using rule 292 (try_statement -> TRY try_block catches .)
    STRING_LIT      reduce using rule 292 (try_statement -> TRY try_block catches .)
    BOOL_LIT        reduce using rule 292 (try_statement -> TRY try_block catches .)
    NULL_LIT        reduce using rule 292 (try_statement -> TRY try_block catches .)
    CLASS           reduce using rule 292 (try_statement -> TRY try_block catches .)
    INTERFACE       reduce using rule 292 (try_statement -> TRY try_block catches .)
    RBRACE          reduce using rule 292 (try_statement -> TRY try_block catches .)
    CASE            reduce using rule 292 (try_statement -> TRY try_block catches .)
    DEFAULT         reduce using rule 292 (try_statement -> TRY try_block catches .)
    ELSE            reduce using rule 292 (try_statement -> TRY try_block catches .)
    FINALLY         reduce using rule 297 (catches_opt -> catches .)
    CATCH           shift and go to state 558

    catch_clause                   shift and go to state 725

state 555

    (293) try_statement -> TRY try_block catches_opt . finally
    (314) finally -> . FINALLY block

    FINALLY         shift and go to state 727

    finally                        shift and go to state 726

state 556

    (295) catches -> catch_clause .

    CATCH           reduce using rule 295 (catches -> catch_clause .)
    $end            reduce using rule 295 (catches -> catch_clause .)
    WHILE           reduce using rule 295 (catches -> catch_clause .)
    IF              reduce using rule 295 (catches -> catch_clause .)
    FOR             reduce using rule 295 (catches -> catch_clause .)
    LBRACE          reduce using rule 295 (catches -> catch_clause .)
    ASSERT          reduce using rule 295 (catches -> catch_clause .)
    SEMICOLON       reduce using rule 295 (catches -> catch_clause .)
    SWITCH          reduce using rule 295 (catches -> catch_clause .)
    DO              reduce using rule 295 (catches -> catch_clause .)
    BREAK           reduce using rule 295 (catches -> catch_clause .)
    CONTINUE        reduce using rule 295 (catches -> catch_clause .)
    RETURN          reduce using rule 295 (catches -> catch_clause .)
    SYNCHRONIZED    reduce using rule 295 (catches -> catch_clause .)
    THROW           reduce using rule 295 (catches -> catch_clause .)
    TRY             reduce using rule 295 (catches -> catch_clause .)
    IDENT           reduce using rule 295 (catches -> catch_clause .)
    BOOLEAN         reduce using rule 295 (catches -> catch_clause .)
    VOID            reduce using rule 295 (catches -> catch_clause .)
    BYTE            reduce using rule 295 (catches -> catch_clause .)
    SHORT           reduce using rule 295 (catches -> catch_clause .)
    INT             reduce using rule 295 (catches -> catch_clause .)
    LONG            reduce using rule 295 (catches -> catch_clause .)
    CHAR            reduce using rule 295 (catches -> catch_clause .)
    FLOAT           reduce using rule 295 (catches -> catch_clause .)
    DOUBLE          reduce using rule 295 (catches -> catch_clause .)
    PUBLIC          reduce using rule 295 (catches -> catch_clause .)
    PROTECTED       reduce using rule 295 (catches -> catch_clause .)
    PRIVATE         reduce using rule 295 (catches -> catch_clause .)
    STATIC          reduce using rule 295 (catches -> catch_clause .)
    ABSTRACT        reduce using rule 295 (catches -> catch_clause .)
    FINAL           reduce using rule 295 (catches -> catch_clause .)
    NATIVE          reduce using rule 295 (catches -> catch_clause .)
    TRANSIENT       reduce using rule 295 (catches -> catch_clause .)
    VOLATILE        reduce using rule 295 (catches -> catch_clause .)
    STRICTFP        reduce using rule 295 (catches -> catch_clause .)
    THIS            reduce using rule 295 (catches -> catch_clause .)
    SUPER           reduce using rule 295 (catches -> catch_clause .)
    INC             reduce using rule 295 (catches -> catch_clause .)
    DEC             reduce using rule 295 (catches -> catch_clause .)
    NEW             reduce using rule 295 (catches -> catch_clause .)
    LSS             reduce using rule 295 (catches -> catch_clause .)
    LPAREN          reduce using rule 295 (catches -> catch_clause .)
    ATRATE          reduce using rule 295 (catches -> catch_clause .)
    HEX_LIT         reduce using rule 295 (catches -> catch_clause .)
    OCTAL_LIT       reduce using rule 295 (catches -> catch_clause .)
    BINARY_LIT      reduce using rule 295 (catches -> catch_clause .)
    DECIMAL_LIT     reduce using rule 295 (catches -> catch_clause .)
    FLOAT_HEX_LIT   reduce using rule 295 (catches -> catch_clause .)
    FLOAT_DEC_LIT   reduce using rule 295 (catches -> catch_clause .)
    CHAR_LIT        reduce using rule 295 (catches -> catch_clause .)
    STRING_LIT      reduce using rule 295 (catches -> catch_clause .)
    BOOL_LIT        reduce using rule 295 (catches -> catch_clause .)
    NULL_LIT        reduce using rule 295 (catches -> catch_clause .)
    CLASS           reduce using rule 295 (catches -> catch_clause .)
    INTERFACE       reduce using rule 295 (catches -> catch_clause .)
    RBRACE          reduce using rule 295 (catches -> catch_clause .)
    CASE            reduce using rule 295 (catches -> catch_clause .)
    DEFAULT         reduce using rule 295 (catches -> catch_clause .)
    FINALLY         reduce using rule 295 (catches -> catch_clause .)
    ELSE            reduce using rule 295 (catches -> catch_clause .)


state 557

    (298) catches_opt -> empty .

    FINALLY         reduce using rule 298 (catches_opt -> empty .)
    $end            reduce using rule 298 (catches_opt -> empty .)
    WHILE           reduce using rule 298 (catches_opt -> empty .)
    IF              reduce using rule 298 (catches_opt -> empty .)
    FOR             reduce using rule 298 (catches_opt -> empty .)
    LBRACE          reduce using rule 298 (catches_opt -> empty .)
    ASSERT          reduce using rule 298 (catches_opt -> empty .)
    SEMICOLON       reduce using rule 298 (catches_opt -> empty .)
    SWITCH          reduce using rule 298 (catches_opt -> empty .)
    DO              reduce using rule 298 (catches_opt -> empty .)
    BREAK           reduce using rule 298 (catches_opt -> empty .)
    CONTINUE        reduce using rule 298 (catches_opt -> empty .)
    RETURN          reduce using rule 298 (catches_opt -> empty .)
    SYNCHRONIZED    reduce using rule 298 (catches_opt -> empty .)
    THROW           reduce using rule 298 (catches_opt -> empty .)
    TRY             reduce using rule 298 (catches_opt -> empty .)
    IDENT           reduce using rule 298 (catches_opt -> empty .)
    BOOLEAN         reduce using rule 298 (catches_opt -> empty .)
    VOID            reduce using rule 298 (catches_opt -> empty .)
    BYTE            reduce using rule 298 (catches_opt -> empty .)
    SHORT           reduce using rule 298 (catches_opt -> empty .)
    INT             reduce using rule 298 (catches_opt -> empty .)
    LONG            reduce using rule 298 (catches_opt -> empty .)
    CHAR            reduce using rule 298 (catches_opt -> empty .)
    FLOAT           reduce using rule 298 (catches_opt -> empty .)
    DOUBLE          reduce using rule 298 (catches_opt -> empty .)
    PUBLIC          reduce using rule 298 (catches_opt -> empty .)
    PROTECTED       reduce using rule 298 (catches_opt -> empty .)
    PRIVATE         reduce using rule 298 (catches_opt -> empty .)
    STATIC          reduce using rule 298 (catches_opt -> empty .)
    ABSTRACT        reduce using rule 298 (catches_opt -> empty .)
    FINAL           reduce using rule 298 (catches_opt -> empty .)
    NATIVE          reduce using rule 298 (catches_opt -> empty .)
    TRANSIENT       reduce using rule 298 (catches_opt -> empty .)
    VOLATILE        reduce using rule 298 (catches_opt -> empty .)
    STRICTFP        reduce using rule 298 (catches_opt -> empty .)
    THIS            reduce using rule 298 (catches_opt -> empty .)
    SUPER           reduce using rule 298 (catches_opt -> empty .)
    INC             reduce using rule 298 (catches_opt -> empty .)
    DEC             reduce using rule 298 (catches_opt -> empty .)
    NEW             reduce using rule 298 (catches_opt -> empty .)
    LSS             reduce using rule 298 (catches_opt -> empty .)
    LPAREN          reduce using rule 298 (catches_opt -> empty .)
    ATRATE          reduce using rule 298 (catches_opt -> empty .)
    HEX_LIT         reduce using rule 298 (catches_opt -> empty .)
    OCTAL_LIT       reduce using rule 298 (catches_opt -> empty .)
    BINARY_LIT      reduce using rule 298 (catches_opt -> empty .)
    DECIMAL_LIT     reduce using rule 298 (catches_opt -> empty .)
    FLOAT_HEX_LIT   reduce using rule 298 (catches_opt -> empty .)
    FLOAT_DEC_LIT   reduce using rule 298 (catches_opt -> empty .)
    CHAR_LIT        reduce using rule 298 (catches_opt -> empty .)
    STRING_LIT      reduce using rule 298 (catches_opt -> empty .)
    BOOL_LIT        reduce using rule 298 (catches_opt -> empty .)
    NULL_LIT        reduce using rule 298 (catches_opt -> empty .)
    CLASS           reduce using rule 298 (catches_opt -> empty .)
    INTERFACE       reduce using rule 298 (catches_opt -> empty .)
    RBRACE          reduce using rule 298 (catches_opt -> empty .)
    CASE            reduce using rule 298 (catches_opt -> empty .)
    DEFAULT         reduce using rule 298 (catches_opt -> empty .)
    ELSE            reduce using rule 298 (catches_opt -> empty .)


state 558

    (299) catch_clause -> CATCH . LPAREN catch_formal_parameter RPAREN block

    LPAREN          shift and go to state 728


state 559

    (304) try_statement_with_resources -> TRY resource_specification try_block . catches_opt
    (305) try_statement_with_resources -> TRY resource_specification try_block . catches_opt finally
    (297) catches_opt -> . catches
    (298) catches_opt -> . empty
    (295) catches -> . catch_clause
    (296) catches -> . catches catch_clause
    (583) empty -> .
    (299) catch_clause -> . CATCH LPAREN catch_formal_parameter RPAREN block

    FINALLY         reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    WHILE           reduce using rule 583 (empty -> .)
    IF              reduce using rule 583 (empty -> .)
    FOR             reduce using rule 583 (empty -> .)
    LBRACE          reduce using rule 583 (empty -> .)
    ASSERT          reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    SWITCH          reduce using rule 583 (empty -> .)
    DO              reduce using rule 583 (empty -> .)
    BREAK           reduce using rule 583 (empty -> .)
    CONTINUE        reduce using rule 583 (empty -> .)
    RETURN          reduce using rule 583 (empty -> .)
    SYNCHRONIZED    reduce using rule 583 (empty -> .)
    THROW           reduce using rule 583 (empty -> .)
    TRY             reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    PUBLIC          reduce using rule 583 (empty -> .)
    PROTECTED       reduce using rule 583 (empty -> .)
    PRIVATE         reduce using rule 583 (empty -> .)
    STATIC          reduce using rule 583 (empty -> .)
    ABSTRACT        reduce using rule 583 (empty -> .)
    FINAL           reduce using rule 583 (empty -> .)
    NATIVE          reduce using rule 583 (empty -> .)
    TRANSIENT       reduce using rule 583 (empty -> .)
    VOLATILE        reduce using rule 583 (empty -> .)
    STRICTFP        reduce using rule 583 (empty -> .)
    THIS            reduce using rule 583 (empty -> .)
    SUPER           reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    NEW             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    LPAREN          reduce using rule 583 (empty -> .)
    ATRATE          reduce using rule 583 (empty -> .)
    HEX_LIT         reduce using rule 583 (empty -> .)
    OCTAL_LIT       reduce using rule 583 (empty -> .)
    BINARY_LIT      reduce using rule 583 (empty -> .)
    DECIMAL_LIT     reduce using rule 583 (empty -> .)
    FLOAT_HEX_LIT   reduce using rule 583 (empty -> .)
    FLOAT_DEC_LIT   reduce using rule 583 (empty -> .)
    CHAR_LIT        reduce using rule 583 (empty -> .)
    STRING_LIT      reduce using rule 583 (empty -> .)
    BOOL_LIT        reduce using rule 583 (empty -> .)
    NULL_LIT        reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)
    CASE            reduce using rule 583 (empty -> .)
    DEFAULT         reduce using rule 583 (empty -> .)
    ELSE            reduce using rule 583 (empty -> .)
    CATCH           shift and go to state 558

    catches_opt                    shift and go to state 729
    catches                        shift and go to state 730
    empty                          shift and go to state 557
    catch_clause                   shift and go to state 556

state 560

    (306) resource_specification -> LPAREN resources . semi_opt RPAREN
    (310) resources -> resources . trailing_semicolon resource
    (307) semi_opt -> . SEMICOLON
    (308) semi_opt -> . empty
    (311) trailing_semicolon -> . SEMICOLON
    (583) empty -> .

    SEMICOLON       shift and go to state 733
    RPAREN          reduce using rule 583 (empty -> .)

    semi_opt                       shift and go to state 731
    trailing_semicolon             shift and go to state 732
    empty                          shift and go to state 734

state 561

    (309) resources -> resource .

    SEMICOLON       reduce using rule 309 (resources -> resource .)
    RPAREN          reduce using rule 309 (resources -> resource .)


state 562

    (312) resource -> type . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarator_id         shift and go to state 735

state 563

    (313) resource -> modifiers . type variable_declarator_id ASSIGN variable_initializer
    (366) modifiers -> modifiers . modifier
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (548) annotation_name -> . ATRATE name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ATRATE          shift and go to state 47
    IDENT           shift and go to state 196

    type                           shift and go to state 736
    modifier                       shift and go to state 194
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    annotation                     shift and go to state 37
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    annotation_name                shift and go to state 45
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 564

    (259) enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression . RPAREN

    RPAREN          shift and go to state 737


state 565

    (315) explicit_constructor_invocation -> THIS LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 738


state 566

    (316) explicit_constructor_invocation -> SUPER LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 739


state 567

    (226) method_invocation -> SUPER PERIOD IDENT . LPAREN argument_list_opt RPAREN
    (337) field_access -> SUPER PERIOD IDENT .

    LPAREN          shift and go to state 696
    LBRACK          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    PERIOD          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    INC             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    DEC             reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    ASSIGN          reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    MUL_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    QUO_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    REM_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    ADD_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SUB_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHL_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHR_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    SHR_UN_ASSIGN   reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    AND_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    OR_ASSIGN       reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)
    XOR_ASSIGN      reduce using rule 337 (field_access -> SUPER PERIOD IDENT .)


state 568

    (317) explicit_constructor_invocation -> type_arguments SUPER LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 740
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 569

    (318) explicit_constructor_invocation -> type_arguments THIS LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 741
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 570

    (319) explicit_constructor_invocation -> primary PERIOD SUPER . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 742


state 571

    (321) explicit_constructor_invocation -> primary PERIOD THIS . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 743


state 572

    (323) explicit_constructor_invocation -> primary PERIOD type_arguments . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> primary PERIOD type_arguments . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (222) method_invocation -> primary PERIOD type_arguments . IDENT LPAREN argument_list_opt RPAREN

    SUPER           shift and go to state 744
    THIS            shift and go to state 745
    IDENT           shift and go to state 638


state 573

    (225) method_invocation -> primary PERIOD IDENT . LPAREN argument_list_opt RPAREN
    (336) field_access -> primary PERIOD IDENT .

    LPAREN          shift and go to state 639
    LBRACK          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    PERIOD          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    INC             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    DEC             reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    ASSIGN          reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    MUL_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    QUO_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    REM_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    ADD_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SUB_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHL_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHR_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    SHR_UN_ASSIGN   reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    AND_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    OR_ASSIGN       reduce using rule 336 (field_access -> primary PERIOD IDENT .)
    XOR_ASSIGN      reduce using rule 336 (field_access -> primary PERIOD IDENT .)


state 574

    (320) explicit_constructor_invocation -> name PERIOD SUPER . LPAREN argument_list_opt RPAREN SEMICOLON
    (149) primary_no_new_array -> name PERIOD SUPER .

    LPAREN          shift and go to state 746
    LBRACK          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    PERIOD          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    INC             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    DEC             reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    ASSIGN          reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    MUL_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    QUO_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    REM_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    ADD_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SUB_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHL_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHR_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    SHR_UN_ASSIGN   reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    AND_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    OR_ASSIGN       reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)
    XOR_ASSIGN      reduce using rule 149 (primary_no_new_array -> name PERIOD SUPER .)


state 575

    (322) explicit_constructor_invocation -> name PERIOD THIS . LPAREN argument_list_opt RPAREN SEMICOLON
    (148) primary_no_new_array -> name PERIOD THIS .

    LPAREN          shift and go to state 747
    LBRACK          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    PERIOD          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    INC             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    DEC             reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    ASSIGN          reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    MUL_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    QUO_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    REM_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    ADD_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SUB_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHL_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHR_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    SHR_UN_ASSIGN   reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    AND_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    OR_ASSIGN       reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)
    XOR_ASSIGN      reduce using rule 148 (primary_no_new_array -> name PERIOD THIS .)


state 576

    (324) explicit_constructor_invocation -> name PERIOD type_arguments . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> name PERIOD type_arguments . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (221) method_invocation -> name PERIOD type_arguments . IDENT LPAREN argument_list_opt RPAREN

    SUPER           shift and go to state 748
    THIS            shift and go to state 749
    IDENT           shift and go to state 640


state 577

    (398) generic_type -> class_or_interface LSS GTR .

    PERIOD          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    LBRACK          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    IDENT           reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    LPAREN          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    GTR             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    COMMA           reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    LBRACE          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    INSTANCEOF      reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    EQL             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    NEQ             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    AND             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    XOR             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    OR              reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    LAND            reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    QUES            reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    LOR             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    $end            reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    SEMICOLON       reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    COLON           reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    RPAREN          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    RBRACK          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    RBRACE          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    SHR             reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    ELLIPSIS        reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)
    SHR_UN          reduce using rule 398 (generic_type -> class_or_interface LSS GTR .)


state 578

    (402) array_type -> generic_type PERIOD name . dims
    (396) class_or_interface -> generic_type PERIOD name .
    (352) qualified_name -> name . PERIOD simple_name
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LSS             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    IDENT           reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    INSTANCEOF      reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    EQL             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    NEQ             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    AND             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    XOR             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    OR              reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    LAND            reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    QUES            reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    LOR             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    $end            reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    SEMICOLON       reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    COLON           reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    RPAREN          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    RBRACK          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    COMMA           reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    RBRACE          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    ELLIPSIS        reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    PERIOD          shift and go to state 372
    LBRACK          shift and go to state 279

    dims                           shift and go to state 750
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 579

    (405) type_argument_list1 -> type_argument_list COMMA . type_argument1
    (407) type_argument_list -> type_argument_list COMMA . type_argument
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    QUES            shift and go to state 365
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type_argument1                 shift and go to state 751
    type_argument                  shift and go to state 752
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    reference_type                 shift and go to state 753
    wildcard                       shift and go to state 366
    class_or_interface             shift and go to state 364
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 580

    (412) reference_type1 -> reference_type GTR .

    SUPER           reduce using rule 412 (reference_type1 -> reference_type GTR .)
    THIS            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    IDENT           reduce using rule 412 (reference_type1 -> reference_type GTR .)
    PERIOD          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    LBRACK          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    LPAREN          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    COMMA           reduce using rule 412 (reference_type1 -> reference_type GTR .)
    LBRACE          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    INSTANCEOF      reduce using rule 412 (reference_type1 -> reference_type GTR .)
    EQL             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    NEQ             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    AND             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    XOR             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    OR              reduce using rule 412 (reference_type1 -> reference_type GTR .)
    LAND            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    QUES            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    LOR             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    $end            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    SEMICOLON       reduce using rule 412 (reference_type1 -> reference_type GTR .)
    COLON           reduce using rule 412 (reference_type1 -> reference_type GTR .)
    RPAREN          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    RBRACK          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    RBRACE          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    ELLIPSIS        reduce using rule 412 (reference_type1 -> reference_type GTR .)
    GTR             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    EXTENDS         reduce using rule 412 (reference_type1 -> reference_type GTR .)
    BOOLEAN         reduce using rule 412 (reference_type1 -> reference_type GTR .)
    VOID            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    BYTE            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    SHORT           reduce using rule 412 (reference_type1 -> reference_type GTR .)
    INT             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    LONG            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    CHAR            reduce using rule 412 (reference_type1 -> reference_type GTR .)
    FLOAT           reduce using rule 412 (reference_type1 -> reference_type GTR .)
    DOUBLE          reduce using rule 412 (reference_type1 -> reference_type GTR .)
    SHR             reduce using rule 412 (reference_type1 -> reference_type GTR .)
    SHR_UN          reduce using rule 412 (reference_type1 -> reference_type GTR .)


state 581

    (413) reference_type1 -> class_or_interface LSS . type_argument_list2
    (398) generic_type -> class_or_interface LSS . GTR
    (403) type_arguments -> LSS . type_argument_list1
    (414) type_argument_list2 -> . type_argument2
    (415) type_argument_list2 -> . type_argument_list COMMA type_argument2
    (404) type_argument_list1 -> . type_argument1
    (405) type_argument_list1 -> . type_argument_list COMMA type_argument1
    (416) type_argument2 -> . reference_type2
    (417) type_argument2 -> . wildcard2
    (406) type_argument_list -> . type_argument
    (407) type_argument_list -> . type_argument_list COMMA type_argument
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (433) wildcard2 -> . QUES SHR
    (434) wildcard2 -> . QUES wildcard_bounds2
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    GTR             shift and go to state 577
    QUES            shift and go to state 761
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    class_or_interface             shift and go to state 754
    type_argument_list2            shift and go to state 755
    type_argument_list1            shift and go to state 357
    type_argument2                 shift and go to state 756
    type_argument_list             shift and go to state 757
    type_argument1                 shift and go to state 358
    reference_type2                shift and go to state 758
    wildcard2                      shift and go to state 759
    type_argument                  shift and go to state 362
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    reference_type                 shift and go to state 760
    wildcard                       shift and go to state 366
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 582

    (429) wildcard1 -> QUES GTR .

    SUPER           reduce using rule 429 (wildcard1 -> QUES GTR .)
    THIS            reduce using rule 429 (wildcard1 -> QUES GTR .)
    IDENT           reduce using rule 429 (wildcard1 -> QUES GTR .)
    PERIOD          reduce using rule 429 (wildcard1 -> QUES GTR .)
    LBRACK          reduce using rule 429 (wildcard1 -> QUES GTR .)
    LPAREN          reduce using rule 429 (wildcard1 -> QUES GTR .)
    COMMA           reduce using rule 429 (wildcard1 -> QUES GTR .)
    LBRACE          reduce using rule 429 (wildcard1 -> QUES GTR .)
    INSTANCEOF      reduce using rule 429 (wildcard1 -> QUES GTR .)
    EQL             reduce using rule 429 (wildcard1 -> QUES GTR .)
    NEQ             reduce using rule 429 (wildcard1 -> QUES GTR .)
    AND             reduce using rule 429 (wildcard1 -> QUES GTR .)
    XOR             reduce using rule 429 (wildcard1 -> QUES GTR .)
    OR              reduce using rule 429 (wildcard1 -> QUES GTR .)
    LAND            reduce using rule 429 (wildcard1 -> QUES GTR .)
    QUES            reduce using rule 429 (wildcard1 -> QUES GTR .)
    LOR             reduce using rule 429 (wildcard1 -> QUES GTR .)
    $end            reduce using rule 429 (wildcard1 -> QUES GTR .)
    SEMICOLON       reduce using rule 429 (wildcard1 -> QUES GTR .)
    COLON           reduce using rule 429 (wildcard1 -> QUES GTR .)
    RPAREN          reduce using rule 429 (wildcard1 -> QUES GTR .)
    RBRACK          reduce using rule 429 (wildcard1 -> QUES GTR .)
    RBRACE          reduce using rule 429 (wildcard1 -> QUES GTR .)
    ELLIPSIS        reduce using rule 429 (wildcard1 -> QUES GTR .)
    GTR             reduce using rule 429 (wildcard1 -> QUES GTR .)
    SHR             reduce using rule 429 (wildcard1 -> QUES GTR .)
    SHR_UN          reduce using rule 429 (wildcard1 -> QUES GTR .)


state 583

    (430) wildcard1 -> QUES wildcard_bounds1 .

    SUPER           reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    THIS            reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    IDENT           reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    PERIOD          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    LBRACK          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    LPAREN          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    COMMA           reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    LBRACE          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    INSTANCEOF      reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    EQL             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    NEQ             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    AND             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    XOR             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    OR              reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    LAND            reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    QUES            reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    LOR             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    $end            reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    SEMICOLON       reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    COLON           reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    RPAREN          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    RBRACK          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    RBRACE          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    ELLIPSIS        reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    GTR             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    SHR             reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)
    SHR_UN          reduce using rule 430 (wildcard1 -> QUES wildcard_bounds1 .)


state 584

    (426) wildcard -> QUES wildcard_bounds .

    COMMA           reduce using rule 426 (wildcard -> QUES wildcard_bounds .)


state 585

    (431) wildcard_bounds1 -> EXTENDS . reference_type1
    (427) wildcard_bounds -> EXTENDS . reference_type
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type1                shift and go to state 762
    reference_type                 shift and go to state 763
    class_or_interface             shift and go to state 364
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 586

    (432) wildcard_bounds1 -> SUPER . reference_type1
    (428) wildcard_bounds -> SUPER . reference_type
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type1                shift and go to state 764
    reference_type                 shift and go to state 765
    class_or_interface             shift and go to state 364
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 587

    (396) class_or_interface -> generic_type PERIOD . name
    (402) array_type -> generic_type PERIOD . name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 766
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 588

    (575) type_import_on_demand_declaration -> IMPORT name PERIOD MUL . SEMICOLON

    SEMICOLON       shift and go to state 767


state 589

    (576) single_static_import_declaration -> IMPORT STATIC name SEMICOLON .

    SEMICOLON       reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    IMPORT          reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    PUBLIC          reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    PROTECTED       reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    PRIVATE         reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    STATIC          reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    ABSTRACT        reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    FINAL           reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    NATIVE          reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    SYNCHRONIZED    reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    TRANSIENT       reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    VOLATILE        reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    STRICTFP        reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    ATRATE          reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    CLASS           reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    INTERFACE       reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)
    $end            reduce using rule 576 (single_static_import_declaration -> IMPORT STATIC name SEMICOLON .)


state 590

    (577) static_import_on_demand_declaration -> IMPORT STATIC name PERIOD . MUL SEMICOLON
    (352) qualified_name -> name PERIOD . simple_name
    (351) simple_name -> . IDENT

    MUL             shift and go to state 768
    IDENT           shift and go to state 196

    simple_name                    shift and go to state 428

state 591

    (470) class_body -> LBRACE inc_scope class_body_declarations_opt . dec_scope RBRACE
    (585) dec_scope -> .

    RBRACE          reduce using rule 585 (dec_scope -> .)

    dec_scope                      shift and go to state 769

state 592

    (471) class_body_declarations_opt -> class_body_declarations .
    (474) class_body_declarations -> class_body_declarations . class_body_declaration
    (475) class_body_declaration -> . class_member_declaration
    (476) class_body_declaration -> . static_initializer
    (477) class_body_declaration -> . constructor_declaration
    (478) class_body_declaration -> . block
    (479) class_member_declaration -> . field_declaration
    (480) class_member_declaration -> . class_declaration
    (481) class_member_declaration -> . method_declaration
    (482) class_member_declaration -> . interface_declaration
    (483) class_member_declaration -> . SEMICOLON
    (485) static_initializer -> . STATIC block
    (486) constructor_declaration -> . constructor_header method_body
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (484) field_declaration -> . modifiers_opt type variable_declarators SEMICOLON
    (462) class_declaration -> . class_header class_body
    (503) method_declaration -> . abstract_method_declaration
    (504) method_declaration -> . method_header method_body
    (511) interface_declaration -> . interface_header interface_body
    (487) constructor_header -> . constructor_header_name formal_parameter_list_opt RPAREN method_header_throws_clause_opt
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (463) class_header -> . class_header_name empty empty
    (505) abstract_method_declaration -> . method_header101 SEMICOLON
    (507) method_header -> . method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (488) constructor_header_name -> . modifiers_opt type_parameters IDENT LPAREN
    (489) constructor_header_name -> . modifiers_opt IDENT LPAREN
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (506) method_header101 -> . method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
    (508) method_header_name -> . modifiers_opt type_parameters type IDENT LPAREN
    (509) method_header_name -> . modifiers_opt type IDENT LPAREN
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RBRACE          reduce using rule 471 (class_body_declarations_opt -> class_body_declarations .)
    SEMICOLON       shift and go to state 603
    STATIC          shift and go to state 604
    LBRACE          shift and go to state 153
    IDENT           reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    class_body_declaration         shift and go to state 770
    class_member_declaration       shift and go to state 595
    static_initializer             shift and go to state 596
    constructor_declaration        shift and go to state 597
    block                          shift and go to state 598
    field_declaration              shift and go to state 599
    class_declaration              shift and go to state 600
    method_declaration             shift and go to state 601
    interface_declaration          shift and go to state 602
    constructor_header             shift and go to state 605
    modifiers_opt                  shift and go to state 606
    class_header                   shift and go to state 25
    abstract_method_declaration    shift and go to state 607
    method_header                  shift and go to state 608
    interface_header               shift and go to state 26
    constructor_header_name        shift and go to state 609
    modifiers                      shift and go to state 188
    empty                          shift and go to state 150
    class_header_name              shift and go to state 38
    method_header101               shift and go to state 387
    method_header_name             shift and go to state 610
    interface_header_name          shift and go to state 39
    modifier                       shift and go to state 22
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 593

    (472) class_body_declarations_opt -> empty .
    (364) modifiers_opt -> empty .

    RBRACE          reduce using rule 472 (class_body_declarations_opt -> empty .)
    IDENT           reduce using rule 364 (modifiers_opt -> empty .)
    CLASS           reduce using rule 364 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 364 (modifiers_opt -> empty .)
    LSS             reduce using rule 364 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 364 (modifiers_opt -> empty .)
    VOID            reduce using rule 364 (modifiers_opt -> empty .)
    BYTE            reduce using rule 364 (modifiers_opt -> empty .)
    SHORT           reduce using rule 364 (modifiers_opt -> empty .)
    INT             reduce using rule 364 (modifiers_opt -> empty .)
    LONG            reduce using rule 364 (modifiers_opt -> empty .)
    CHAR            reduce using rule 364 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 364 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 364 (modifiers_opt -> empty .)


state 594

    (473) class_body_declarations -> class_body_declaration .

    SEMICOLON       reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    STATIC          reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    LBRACE          reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    PUBLIC          reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    PROTECTED       reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    PRIVATE         reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    ABSTRACT        reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    FINAL           reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    NATIVE          reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    SYNCHRONIZED    reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    TRANSIENT       reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    VOLATILE        reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    STRICTFP        reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    ATRATE          reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    IDENT           reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    CLASS           reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    INTERFACE       reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    LSS             reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    BOOLEAN         reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    VOID            reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    BYTE            reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    SHORT           reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    INT             reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    LONG            reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    CHAR            reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    FLOAT           reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    DOUBLE          reduce using rule 473 (class_body_declarations -> class_body_declaration .)
    RBRACE          reduce using rule 473 (class_body_declarations -> class_body_declaration .)


state 595

    (475) class_body_declaration -> class_member_declaration .

    SEMICOLON       reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    STATIC          reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    LBRACE          reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    PUBLIC          reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    PROTECTED       reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    PRIVATE         reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    ABSTRACT        reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    FINAL           reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    NATIVE          reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    SYNCHRONIZED    reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    TRANSIENT       reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    VOLATILE        reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    STRICTFP        reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    ATRATE          reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    IDENT           reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    CLASS           reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    INTERFACE       reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    LSS             reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    BOOLEAN         reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    VOID            reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    BYTE            reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    SHORT           reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    INT             reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    LONG            reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    CHAR            reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    FLOAT           reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    DOUBLE          reduce using rule 475 (class_body_declaration -> class_member_declaration .)
    RBRACE          reduce using rule 475 (class_body_declaration -> class_member_declaration .)


state 596

    (476) class_body_declaration -> static_initializer .

    SEMICOLON       reduce using rule 476 (class_body_declaration -> static_initializer .)
    STATIC          reduce using rule 476 (class_body_declaration -> static_initializer .)
    LBRACE          reduce using rule 476 (class_body_declaration -> static_initializer .)
    PUBLIC          reduce using rule 476 (class_body_declaration -> static_initializer .)
    PROTECTED       reduce using rule 476 (class_body_declaration -> static_initializer .)
    PRIVATE         reduce using rule 476 (class_body_declaration -> static_initializer .)
    ABSTRACT        reduce using rule 476 (class_body_declaration -> static_initializer .)
    FINAL           reduce using rule 476 (class_body_declaration -> static_initializer .)
    NATIVE          reduce using rule 476 (class_body_declaration -> static_initializer .)
    SYNCHRONIZED    reduce using rule 476 (class_body_declaration -> static_initializer .)
    TRANSIENT       reduce using rule 476 (class_body_declaration -> static_initializer .)
    VOLATILE        reduce using rule 476 (class_body_declaration -> static_initializer .)
    STRICTFP        reduce using rule 476 (class_body_declaration -> static_initializer .)
    ATRATE          reduce using rule 476 (class_body_declaration -> static_initializer .)
    IDENT           reduce using rule 476 (class_body_declaration -> static_initializer .)
    CLASS           reduce using rule 476 (class_body_declaration -> static_initializer .)
    INTERFACE       reduce using rule 476 (class_body_declaration -> static_initializer .)
    LSS             reduce using rule 476 (class_body_declaration -> static_initializer .)
    BOOLEAN         reduce using rule 476 (class_body_declaration -> static_initializer .)
    VOID            reduce using rule 476 (class_body_declaration -> static_initializer .)
    BYTE            reduce using rule 476 (class_body_declaration -> static_initializer .)
    SHORT           reduce using rule 476 (class_body_declaration -> static_initializer .)
    INT             reduce using rule 476 (class_body_declaration -> static_initializer .)
    LONG            reduce using rule 476 (class_body_declaration -> static_initializer .)
    CHAR            reduce using rule 476 (class_body_declaration -> static_initializer .)
    FLOAT           reduce using rule 476 (class_body_declaration -> static_initializer .)
    DOUBLE          reduce using rule 476 (class_body_declaration -> static_initializer .)
    RBRACE          reduce using rule 476 (class_body_declaration -> static_initializer .)


state 597

    (477) class_body_declaration -> constructor_declaration .

    SEMICOLON       reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    STATIC          reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    LBRACE          reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    FINAL           reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    NATIVE          reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    SYNCHRONIZED    reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    TRANSIENT       reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    VOLATILE        reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    STRICTFP        reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    ATRATE          reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    IDENT           reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    CLASS           reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    INTERFACE       reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    LSS             reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    BOOLEAN         reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    VOID            reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    BYTE            reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    SHORT           reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    INT             reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    LONG            reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    CHAR            reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    FLOAT           reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    DOUBLE          reduce using rule 477 (class_body_declaration -> constructor_declaration .)
    RBRACE          reduce using rule 477 (class_body_declaration -> constructor_declaration .)


state 598

    (478) class_body_declaration -> block .

    SEMICOLON       reduce using rule 478 (class_body_declaration -> block .)
    STATIC          reduce using rule 478 (class_body_declaration -> block .)
    LBRACE          reduce using rule 478 (class_body_declaration -> block .)
    PUBLIC          reduce using rule 478 (class_body_declaration -> block .)
    PROTECTED       reduce using rule 478 (class_body_declaration -> block .)
    PRIVATE         reduce using rule 478 (class_body_declaration -> block .)
    ABSTRACT        reduce using rule 478 (class_body_declaration -> block .)
    FINAL           reduce using rule 478 (class_body_declaration -> block .)
    NATIVE          reduce using rule 478 (class_body_declaration -> block .)
    SYNCHRONIZED    reduce using rule 478 (class_body_declaration -> block .)
    TRANSIENT       reduce using rule 478 (class_body_declaration -> block .)
    VOLATILE        reduce using rule 478 (class_body_declaration -> block .)
    STRICTFP        reduce using rule 478 (class_body_declaration -> block .)
    ATRATE          reduce using rule 478 (class_body_declaration -> block .)
    IDENT           reduce using rule 478 (class_body_declaration -> block .)
    CLASS           reduce using rule 478 (class_body_declaration -> block .)
    INTERFACE       reduce using rule 478 (class_body_declaration -> block .)
    LSS             reduce using rule 478 (class_body_declaration -> block .)
    BOOLEAN         reduce using rule 478 (class_body_declaration -> block .)
    VOID            reduce using rule 478 (class_body_declaration -> block .)
    BYTE            reduce using rule 478 (class_body_declaration -> block .)
    SHORT           reduce using rule 478 (class_body_declaration -> block .)
    INT             reduce using rule 478 (class_body_declaration -> block .)
    LONG            reduce using rule 478 (class_body_declaration -> block .)
    CHAR            reduce using rule 478 (class_body_declaration -> block .)
    FLOAT           reduce using rule 478 (class_body_declaration -> block .)
    DOUBLE          reduce using rule 478 (class_body_declaration -> block .)
    RBRACE          reduce using rule 478 (class_body_declaration -> block .)


state 599

    (479) class_member_declaration -> field_declaration .

    SEMICOLON       reduce using rule 479 (class_member_declaration -> field_declaration .)
    STATIC          reduce using rule 479 (class_member_declaration -> field_declaration .)
    LBRACE          reduce using rule 479 (class_member_declaration -> field_declaration .)
    PUBLIC          reduce using rule 479 (class_member_declaration -> field_declaration .)
    PROTECTED       reduce using rule 479 (class_member_declaration -> field_declaration .)
    PRIVATE         reduce using rule 479 (class_member_declaration -> field_declaration .)
    ABSTRACT        reduce using rule 479 (class_member_declaration -> field_declaration .)
    FINAL           reduce using rule 479 (class_member_declaration -> field_declaration .)
    NATIVE          reduce using rule 479 (class_member_declaration -> field_declaration .)
    SYNCHRONIZED    reduce using rule 479 (class_member_declaration -> field_declaration .)
    TRANSIENT       reduce using rule 479 (class_member_declaration -> field_declaration .)
    VOLATILE        reduce using rule 479 (class_member_declaration -> field_declaration .)
    STRICTFP        reduce using rule 479 (class_member_declaration -> field_declaration .)
    ATRATE          reduce using rule 479 (class_member_declaration -> field_declaration .)
    IDENT           reduce using rule 479 (class_member_declaration -> field_declaration .)
    CLASS           reduce using rule 479 (class_member_declaration -> field_declaration .)
    INTERFACE       reduce using rule 479 (class_member_declaration -> field_declaration .)
    LSS             reduce using rule 479 (class_member_declaration -> field_declaration .)
    BOOLEAN         reduce using rule 479 (class_member_declaration -> field_declaration .)
    VOID            reduce using rule 479 (class_member_declaration -> field_declaration .)
    BYTE            reduce using rule 479 (class_member_declaration -> field_declaration .)
    SHORT           reduce using rule 479 (class_member_declaration -> field_declaration .)
    INT             reduce using rule 479 (class_member_declaration -> field_declaration .)
    LONG            reduce using rule 479 (class_member_declaration -> field_declaration .)
    CHAR            reduce using rule 479 (class_member_declaration -> field_declaration .)
    FLOAT           reduce using rule 479 (class_member_declaration -> field_declaration .)
    DOUBLE          reduce using rule 479 (class_member_declaration -> field_declaration .)
    RBRACE          reduce using rule 479 (class_member_declaration -> field_declaration .)


state 600

    (480) class_member_declaration -> class_declaration .

    SEMICOLON       reduce using rule 480 (class_member_declaration -> class_declaration .)
    STATIC          reduce using rule 480 (class_member_declaration -> class_declaration .)
    LBRACE          reduce using rule 480 (class_member_declaration -> class_declaration .)
    PUBLIC          reduce using rule 480 (class_member_declaration -> class_declaration .)
    PROTECTED       reduce using rule 480 (class_member_declaration -> class_declaration .)
    PRIVATE         reduce using rule 480 (class_member_declaration -> class_declaration .)
    ABSTRACT        reduce using rule 480 (class_member_declaration -> class_declaration .)
    FINAL           reduce using rule 480 (class_member_declaration -> class_declaration .)
    NATIVE          reduce using rule 480 (class_member_declaration -> class_declaration .)
    SYNCHRONIZED    reduce using rule 480 (class_member_declaration -> class_declaration .)
    TRANSIENT       reduce using rule 480 (class_member_declaration -> class_declaration .)
    VOLATILE        reduce using rule 480 (class_member_declaration -> class_declaration .)
    STRICTFP        reduce using rule 480 (class_member_declaration -> class_declaration .)
    ATRATE          reduce using rule 480 (class_member_declaration -> class_declaration .)
    IDENT           reduce using rule 480 (class_member_declaration -> class_declaration .)
    CLASS           reduce using rule 480 (class_member_declaration -> class_declaration .)
    INTERFACE       reduce using rule 480 (class_member_declaration -> class_declaration .)
    LSS             reduce using rule 480 (class_member_declaration -> class_declaration .)
    BOOLEAN         reduce using rule 480 (class_member_declaration -> class_declaration .)
    VOID            reduce using rule 480 (class_member_declaration -> class_declaration .)
    BYTE            reduce using rule 480 (class_member_declaration -> class_declaration .)
    SHORT           reduce using rule 480 (class_member_declaration -> class_declaration .)
    INT             reduce using rule 480 (class_member_declaration -> class_declaration .)
    LONG            reduce using rule 480 (class_member_declaration -> class_declaration .)
    CHAR            reduce using rule 480 (class_member_declaration -> class_declaration .)
    FLOAT           reduce using rule 480 (class_member_declaration -> class_declaration .)
    DOUBLE          reduce using rule 480 (class_member_declaration -> class_declaration .)
    RBRACE          reduce using rule 480 (class_member_declaration -> class_declaration .)


state 601

    (481) class_member_declaration -> method_declaration .

    SEMICOLON       reduce using rule 481 (class_member_declaration -> method_declaration .)
    STATIC          reduce using rule 481 (class_member_declaration -> method_declaration .)
    LBRACE          reduce using rule 481 (class_member_declaration -> method_declaration .)
    PUBLIC          reduce using rule 481 (class_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 481 (class_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 481 (class_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 481 (class_member_declaration -> method_declaration .)
    FINAL           reduce using rule 481 (class_member_declaration -> method_declaration .)
    NATIVE          reduce using rule 481 (class_member_declaration -> method_declaration .)
    SYNCHRONIZED    reduce using rule 481 (class_member_declaration -> method_declaration .)
    TRANSIENT       reduce using rule 481 (class_member_declaration -> method_declaration .)
    VOLATILE        reduce using rule 481 (class_member_declaration -> method_declaration .)
    STRICTFP        reduce using rule 481 (class_member_declaration -> method_declaration .)
    ATRATE          reduce using rule 481 (class_member_declaration -> method_declaration .)
    IDENT           reduce using rule 481 (class_member_declaration -> method_declaration .)
    CLASS           reduce using rule 481 (class_member_declaration -> method_declaration .)
    INTERFACE       reduce using rule 481 (class_member_declaration -> method_declaration .)
    LSS             reduce using rule 481 (class_member_declaration -> method_declaration .)
    BOOLEAN         reduce using rule 481 (class_member_declaration -> method_declaration .)
    VOID            reduce using rule 481 (class_member_declaration -> method_declaration .)
    BYTE            reduce using rule 481 (class_member_declaration -> method_declaration .)
    SHORT           reduce using rule 481 (class_member_declaration -> method_declaration .)
    INT             reduce using rule 481 (class_member_declaration -> method_declaration .)
    LONG            reduce using rule 481 (class_member_declaration -> method_declaration .)
    CHAR            reduce using rule 481 (class_member_declaration -> method_declaration .)
    FLOAT           reduce using rule 481 (class_member_declaration -> method_declaration .)
    DOUBLE          reduce using rule 481 (class_member_declaration -> method_declaration .)
    RBRACE          reduce using rule 481 (class_member_declaration -> method_declaration .)


state 602

    (482) class_member_declaration -> interface_declaration .

    SEMICOLON       reduce using rule 482 (class_member_declaration -> interface_declaration .)
    STATIC          reduce using rule 482 (class_member_declaration -> interface_declaration .)
    LBRACE          reduce using rule 482 (class_member_declaration -> interface_declaration .)
    PUBLIC          reduce using rule 482 (class_member_declaration -> interface_declaration .)
    PROTECTED       reduce using rule 482 (class_member_declaration -> interface_declaration .)
    PRIVATE         reduce using rule 482 (class_member_declaration -> interface_declaration .)
    ABSTRACT        reduce using rule 482 (class_member_declaration -> interface_declaration .)
    FINAL           reduce using rule 482 (class_member_declaration -> interface_declaration .)
    NATIVE          reduce using rule 482 (class_member_declaration -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 482 (class_member_declaration -> interface_declaration .)
    TRANSIENT       reduce using rule 482 (class_member_declaration -> interface_declaration .)
    VOLATILE        reduce using rule 482 (class_member_declaration -> interface_declaration .)
    STRICTFP        reduce using rule 482 (class_member_declaration -> interface_declaration .)
    ATRATE          reduce using rule 482 (class_member_declaration -> interface_declaration .)
    IDENT           reduce using rule 482 (class_member_declaration -> interface_declaration .)
    CLASS           reduce using rule 482 (class_member_declaration -> interface_declaration .)
    INTERFACE       reduce using rule 482 (class_member_declaration -> interface_declaration .)
    LSS             reduce using rule 482 (class_member_declaration -> interface_declaration .)
    BOOLEAN         reduce using rule 482 (class_member_declaration -> interface_declaration .)
    VOID            reduce using rule 482 (class_member_declaration -> interface_declaration .)
    BYTE            reduce using rule 482 (class_member_declaration -> interface_declaration .)
    SHORT           reduce using rule 482 (class_member_declaration -> interface_declaration .)
    INT             reduce using rule 482 (class_member_declaration -> interface_declaration .)
    LONG            reduce using rule 482 (class_member_declaration -> interface_declaration .)
    CHAR            reduce using rule 482 (class_member_declaration -> interface_declaration .)
    FLOAT           reduce using rule 482 (class_member_declaration -> interface_declaration .)
    DOUBLE          reduce using rule 482 (class_member_declaration -> interface_declaration .)
    RBRACE          reduce using rule 482 (class_member_declaration -> interface_declaration .)


state 603

    (483) class_member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    STATIC          reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    LBRACE          reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    ABSTRACT        reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    FINAL           reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    NATIVE          reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    TRANSIENT       reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    STRICTFP        reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    ATRATE          reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    IDENT           reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    INTERFACE       reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    LSS             reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    BOOLEAN         reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    VOID            reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    BYTE            reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    INT             reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    LONG            reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 483 (class_member_declaration -> SEMICOLON .)
    RBRACE          reduce using rule 483 (class_member_declaration -> SEMICOLON .)


state 604

    (485) static_initializer -> STATIC . block
    (370) modifier -> STATIC .
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE

    PUBLIC          reduce using rule 370 (modifier -> STATIC .)
    PROTECTED       reduce using rule 370 (modifier -> STATIC .)
    PRIVATE         reduce using rule 370 (modifier -> STATIC .)
    STATIC          reduce using rule 370 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 370 (modifier -> STATIC .)
    FINAL           reduce using rule 370 (modifier -> STATIC .)
    NATIVE          reduce using rule 370 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 370 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 370 (modifier -> STATIC .)
    VOLATILE        reduce using rule 370 (modifier -> STATIC .)
    STRICTFP        reduce using rule 370 (modifier -> STATIC .)
    ATRATE          reduce using rule 370 (modifier -> STATIC .)
    IDENT           reduce using rule 370 (modifier -> STATIC .)
    CLASS           reduce using rule 370 (modifier -> STATIC .)
    INTERFACE       reduce using rule 370 (modifier -> STATIC .)
    LSS             reduce using rule 370 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 370 (modifier -> STATIC .)
    VOID            reduce using rule 370 (modifier -> STATIC .)
    BYTE            reduce using rule 370 (modifier -> STATIC .)
    SHORT           reduce using rule 370 (modifier -> STATIC .)
    INT             reduce using rule 370 (modifier -> STATIC .)
    LONG            reduce using rule 370 (modifier -> STATIC .)
    CHAR            reduce using rule 370 (modifier -> STATIC .)
    FLOAT           reduce using rule 370 (modifier -> STATIC .)
    DOUBLE          reduce using rule 370 (modifier -> STATIC .)
    LBRACE          shift and go to state 153

    block                          shift and go to state 771

state 605

    (486) constructor_declaration -> constructor_header . method_body
    (502) method_body -> . LBRACE block_statements_opt dec_scope RBRACE

    LBRACE          shift and go to state 773

    method_body                    shift and go to state 772

state 606

    (484) field_declaration -> modifiers_opt . type variable_declarators SEMICOLON
    (488) constructor_header_name -> modifiers_opt . type_parameters IDENT LPAREN
    (489) constructor_header_name -> modifiers_opt . IDENT LPAREN
    (508) method_header_name -> modifiers_opt . type_parameters type IDENT LPAREN
    (509) method_header_name -> modifiers_opt . type IDENT LPAREN
    (466) class_header_name1 -> modifiers_opt . CLASS IDENT
    (515) interface_header_name1 -> modifiers_opt . INTERFACE IDENT
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (442) type_parameters -> . LSS type_parameter_list1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 775
    CLASS           shift and go to state 212
    INTERFACE       shift and go to state 213
    LSS             shift and go to state 209
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    type                           shift and go to state 614
    type_parameters                shift and go to state 774
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 607

    (503) method_declaration -> abstract_method_declaration .

    SEMICOLON       reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    STATIC          reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    LBRACE          reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    PUBLIC          reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    PROTECTED       reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    PRIVATE         reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    ABSTRACT        reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    FINAL           reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    NATIVE          reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    SYNCHRONIZED    reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    TRANSIENT       reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    VOLATILE        reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    STRICTFP        reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    ATRATE          reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    IDENT           reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    CLASS           reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    INTERFACE       reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    LSS             reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    BOOLEAN         reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    VOID            reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    BYTE            reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    SHORT           reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    INT             reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    LONG            reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    CHAR            reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    FLOAT           reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    DOUBLE          reduce using rule 503 (method_declaration -> abstract_method_declaration .)
    RBRACE          reduce using rule 503 (method_declaration -> abstract_method_declaration .)


state 608

    (504) method_declaration -> method_header . method_body
    (502) method_body -> . LBRACE block_statements_opt dec_scope RBRACE

    LBRACE          shift and go to state 773

    method_body                    shift and go to state 776

state 609

    (487) constructor_header -> constructor_header_name . formal_parameter_list_opt RPAREN method_header_throws_clause_opt
    (490) formal_parameter_list_opt -> . formal_parameter_list
    (491) formal_parameter_list_opt -> . empty
    (492) formal_parameter_list -> . formal_parameter
    (493) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (583) empty -> .
    (494) formal_parameter -> . modifiers_opt type variable_declarator_id
    (495) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RPAREN          reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    formal_parameter_list_opt      shift and go to state 777
    formal_parameter_list          shift and go to state 617
    empty                          shift and go to state 618
    formal_parameter               shift and go to state 619
    modifiers_opt                  shift and go to state 620
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 610

    (507) method_header -> method_header_name . formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt
    (506) method_header101 -> method_header_name . formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope
    (490) formal_parameter_list_opt -> . formal_parameter_list
    (491) formal_parameter_list_opt -> . empty
    (492) formal_parameter_list -> . formal_parameter
    (493) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (583) empty -> .
    (494) formal_parameter -> . modifiers_opt type variable_declarator_id
    (495) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    RPAREN          reduce using rule 583 (empty -> .)
    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    formal_parameter_list_opt      shift and go to state 778
    formal_parameter_list          shift and go to state 617
    empty                          shift and go to state 618
    formal_parameter               shift and go to state 619
    modifiers_opt                  shift and go to state 620
    modifiers                      shift and go to state 188
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 611

    (519) interface_body -> LBRACE interface_member_declarations_opt RBRACE .

    SEMICOLON       reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    PUBLIC          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    PROTECTED       reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    PRIVATE         reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    STATIC          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    ABSTRACT        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    FINAL           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    NATIVE          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    SYNCHRONIZED    reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    TRANSIENT       reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    VOLATILE        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    STRICTFP        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    ATRATE          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    CLASS           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    INTERFACE       reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    $end            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    LSS             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    BOOLEAN         reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    VOID            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    BYTE            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    SHORT           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    INT             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    LONG            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    CHAR            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    FLOAT           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    DOUBLE          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    IDENT           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    RBRACE          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    IF              reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    WHILE           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    FOR             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    LBRACE          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    ASSERT          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    SWITCH          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    DO              reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    BREAK           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    CONTINUE        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    RETURN          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    THROW           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    TRY             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    THIS            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    SUPER           reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    INC             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    DEC             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    NEW             reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    LPAREN          reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    HEX_LIT         reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    OCTAL_LIT       reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    BINARY_LIT      reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    DECIMAL_LIT     reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    CHAR_LIT        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    STRING_LIT      reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    BOOL_LIT        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    NULL_LIT        reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    CASE            reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)
    DEFAULT         reduce using rule 519 (interface_body -> LBRACE interface_member_declarations_opt RBRACE .)


state 612

    (523) interface_member_declarations -> interface_member_declarations interface_member_declaration .

    SEMICOLON       reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PUBLIC          reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PROTECTED       reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PRIVATE         reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    STATIC          reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    ABSTRACT        reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FINAL           reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    NATIVE          reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    SYNCHRONIZED    reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    TRANSIENT       reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    VOLATILE        reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    STRICTFP        reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    ATRATE          reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    CLASS           reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    INTERFACE       reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    LSS             reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    BOOLEAN         reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    VOID            reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    BYTE            reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    SHORT           reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    INT             reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    LONG            reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    CHAR            reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FLOAT           reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    DOUBLE          reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    IDENT           reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    RBRACE          reduce using rule 523 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)


state 613

    (505) abstract_method_declaration -> method_header101 SEMICOLON .

    SEMICOLON       reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    PUBLIC          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    PROTECTED       reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    PRIVATE         reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    STATIC          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    ABSTRACT        reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    FINAL           reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    NATIVE          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    SYNCHRONIZED    reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    TRANSIENT       reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    VOLATILE        reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    STRICTFP        reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    ATRATE          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    CLASS           reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    INTERFACE       reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    LSS             reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    BOOLEAN         reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    VOID            reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    BYTE            reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    SHORT           reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    INT             reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    LONG            reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    CHAR            reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    FLOAT           reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    DOUBLE          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    IDENT           reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    RBRACE          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)
    LBRACE          reduce using rule 505 (abstract_method_declaration -> method_header101 SEMICOLON .)


state 614

    (484) field_declaration -> modifiers_opt type . variable_declarators SEMICOLON
    (509) method_header_name -> modifiers_opt type . IDENT LPAREN
    (177) variable_declarators -> . variable_declarator
    (178) variable_declarators -> . variable_declarators COMMA variable_declarator
    (179) variable_declarator -> . variable_declarator_id
    (180) variable_declarator -> . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 780

    variable_declarators           shift and go to state 779
    variable_declarator            shift and go to state 311
    variable_declarator_id         shift and go to state 312

state 615

    (508) method_header_name -> modifiers_opt type_parameters . type IDENT LPAREN
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type                           shift and go to state 781
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 616

    (506) method_header101 -> method_header_name formal_parameter_list_opt . RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope

    RPAREN          shift and go to state 782


state 617

    (490) formal_parameter_list_opt -> formal_parameter_list .
    (493) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          reduce using rule 490 (formal_parameter_list_opt -> formal_parameter_list .)
    COMMA           shift and go to state 783


state 618

    (491) formal_parameter_list_opt -> empty .
    (364) modifiers_opt -> empty .

    RPAREN          reduce using rule 491 (formal_parameter_list_opt -> empty .)
    BOOLEAN         reduce using rule 364 (modifiers_opt -> empty .)
    VOID            reduce using rule 364 (modifiers_opt -> empty .)
    BYTE            reduce using rule 364 (modifiers_opt -> empty .)
    SHORT           reduce using rule 364 (modifiers_opt -> empty .)
    INT             reduce using rule 364 (modifiers_opt -> empty .)
    LONG            reduce using rule 364 (modifiers_opt -> empty .)
    CHAR            reduce using rule 364 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 364 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 364 (modifiers_opt -> empty .)
    IDENT           reduce using rule 364 (modifiers_opt -> empty .)


state 619

    (492) formal_parameter_list -> formal_parameter .

    COMMA           reduce using rule 492 (formal_parameter_list -> formal_parameter .)
    RPAREN          reduce using rule 492 (formal_parameter_list -> formal_parameter .)


state 620

    (494) formal_parameter -> modifiers_opt . type variable_declarator_id
    (495) formal_parameter -> modifiers_opt . type ELLIPSIS variable_declarator_id
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type                           shift and go to state 784
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 621

    (468) interface_type_list -> interface_type_list COMMA . interface_type
    (469) interface_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    interface_type                 shift and go to state 785
    class_or_interface_type        shift and go to state 393
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 622

    (452) type_parameter_list1 -> type_parameter_list COMMA . type_parameter1
    (444) type_parameter_list -> type_parameter_list COMMA . type_parameter
    (453) type_parameter1 -> . type_parameter_header GTR
    (454) type_parameter1 -> . type_parameter_header EXTENDS reference_type1
    (455) type_parameter1 -> . type_parameter_header EXTENDS reference_type additional_bound_list1
    (445) type_parameter -> . type_parameter_header
    (446) type_parameter -> . type_parameter_header EXTENDS reference_type
    (447) type_parameter -> . type_parameter_header EXTENDS reference_type additional_bound_list
    (441) type_parameter_header -> . IDENT

    IDENT           shift and go to state 399

    type_parameter1                shift and go to state 786
    type_parameter                 shift and go to state 787
    type_parameter_header          shift and go to state 397

state 623

    (453) type_parameter1 -> type_parameter_header GTR .

    LBRACE          reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    EXTENDS         reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    BOOLEAN         reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    VOID            reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    BYTE            reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    SHORT           reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    INT             reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    LONG            reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    CHAR            reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    FLOAT           reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    DOUBLE          reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)
    IDENT           reduce using rule 453 (type_parameter1 -> type_parameter_header GTR .)


state 624

    (454) type_parameter1 -> type_parameter_header EXTENDS . reference_type1
    (455) type_parameter1 -> type_parameter_header EXTENDS . reference_type additional_bound_list1
    (446) type_parameter -> type_parameter_header EXTENDS . reference_type
    (447) type_parameter -> type_parameter_header EXTENDS . reference_type additional_bound_list
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type1                shift and go to state 788
    reference_type                 shift and go to state 789
    class_or_interface             shift and go to state 364
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 625

    (547) normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .

    PACKAGE         reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    PUBLIC          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    PROTECTED       reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    PRIVATE         reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    STATIC          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    ABSTRACT        reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    FINAL           reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    NATIVE          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    SYNCHRONIZED    reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    TRANSIENT       reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    VOLATILE        reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    STRICTFP        reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    ATRATE          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    CLASS           reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    INTERFACE       reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    BOOLEAN         reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    VOID            reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    BYTE            reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    SHORT           reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    INT             reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    LONG            reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    CHAR            reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    FLOAT           reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    DOUBLE          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    IDENT           reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    LSS             reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    RPAREN          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    COMMA           reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)
    RBRACE          reduce using rule 547 (normal_annotation -> annotation_name LPAREN member_value_pairs_opt RPAREN .)


state 626

    (555) single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .

    PACKAGE         reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    PUBLIC          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    PROTECTED       reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    PRIVATE         reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    STATIC          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    ABSTRACT        reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    FINAL           reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    NATIVE          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    SYNCHRONIZED    reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    TRANSIENT       reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    VOLATILE        reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    STRICTFP        reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    ATRATE          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    CLASS           reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    INTERFACE       reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    BOOLEAN         reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    VOID            reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    BYTE            reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    SHORT           reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    INT             reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    LONG            reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    CHAR            reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    FLOAT           reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    DOUBLE          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    IDENT           reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    LSS             reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    RPAREN          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    COMMA           reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)
    RBRACE          reduce using rule 555 (single_member_annotation -> annotation_name LPAREN single_member_annotation_member_value RPAREN .)


state 627

    (552) member_value_pairs -> member_value_pairs COMMA . member_value_pair
    (553) member_value_pair -> . simple_name ASSIGN member_value
    (351) simple_name -> . IDENT

    IDENT           shift and go to state 196

    member_value_pair              shift and go to state 790
    simple_name                    shift and go to state 791

state 628

    (553) member_value_pair -> simple_name ASSIGN . member_value
    (534) member_value -> . conditional_expression_not_name
    (535) member_value -> . name
    (536) member_value -> . annotation
    (537) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (538) member_value_array_initializer -> . LBRACE member_values COMMA RBRACE
    (539) member_value_array_initializer -> . LBRACE member_values RBRACE
    (540) member_value_array_initializer -> . LBRACE COMMA RBRACE
    (541) member_value_array_initializer -> . LBRACE RBRACE
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (548) annotation_name -> . ATRATE name
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    LBRACE          shift and go to state 411
    IDENT           shift and go to state 77
    ATRATE          shift and go to state 47
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    simple_name                    shift and go to state 63
    member_value                   shift and go to state 792
    conditional_expression_not_name shift and go to state 406
    name                           shift and go to state 407
    annotation                     shift and go to state 408
    member_value_array_initializer shift and go to state 409
    conditional_or_expression_not_name shift and go to state 252
    qualified_name                 shift and go to state 64
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    conditional_and_expression_not_name shift and go to state 256
    annotation_name                shift and go to state 45
    inclusive_or_expression_not_name shift and go to state 257
    exclusive_or_expression_not_name shift and go to state 258
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275
    primary                        shift and go to state 412
    post_increment_expression      shift and go to state 413
    post_decrement_expression      shift and go to state 414
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    postfix_expression             shift and go to state 415
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 629

    (538) member_value_array_initializer -> LBRACE member_values . COMMA RBRACE
    (539) member_value_array_initializer -> LBRACE member_values . RBRACE
    (543) member_values -> member_values . COMMA member_value

    COMMA           shift and go to state 793
    RBRACE          shift and go to state 794


state 630

    (540) member_value_array_initializer -> LBRACE COMMA . RBRACE

    RBRACE          shift and go to state 795


state 631

    (541) member_value_array_initializer -> LBRACE RBRACE .

    RPAREN          reduce using rule 541 (member_value_array_initializer -> LBRACE RBRACE .)
    COMMA           reduce using rule 541 (member_value_array_initializer -> LBRACE RBRACE .)
    RBRACE          reduce using rule 541 (member_value_array_initializer -> LBRACE RBRACE .)


state 632

    (542) member_values -> member_value .

    COMMA           reduce using rule 542 (member_values -> member_value .)
    RBRACE          reduce using rule 542 (member_values -> member_value .)


state 633

    (163) cast_expression -> LPAREN name RPAREN . unary_expression_not_plus_minus
    (146) primary_no_new_array -> LPAREN name RPAREN .
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    LBRACK          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    PERIOD          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    INC             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    DEC             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    MUL             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    QUO             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    REM             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    ADD             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SUB             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHL             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SHR_UN          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    GTR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LSS             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    GEQ             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LEQ             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    INSTANCEOF      reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    EQL             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    NEQ             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    AND             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    XOR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    OR              reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LAND            reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    QUES            reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LOR             reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    $end            reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    SEMICOLON       reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    RPAREN          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    COLON           reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    RBRACK          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    COMMA           reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    RBRACE          reduce using rule 146 (primary_no_new_array -> LPAREN name RPAREN .)
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression_not_plus_minus shift and go to state 647
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 634

    (21) conditional_expression -> conditional_or_expression QUES expression COLON . conditional_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    conditional_or_expression      shift and go to state 54
    conditional_expression         shift and go to state 796
    conditional_and_expression     shift and go to state 59
    inclusive_or_expression        shift and go to state 66
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 635

    (26) conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . LAND marker_next_quad inclusive_or_expression

    QUES            reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    LOR             reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    $end            reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    SEMICOLON       reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    COLON           reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    RPAREN          reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    RBRACK          reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    COMMA           reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    RBRACE          reduce using rule 26 (conditional_or_expression -> conditional_or_expression LOR marker_next_quad conditional_and_expression .)
    LAND            shift and go to state 241


state 636

    (329) class_instance_creation_expression -> primary PERIOD NEW type_arguments . class_type LPAREN argument_list_opt RPAREN class_body_opt
    (394) class_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    class_type                     shift and go to state 797
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 637

    (330) class_instance_creation_expression -> primary PERIOD NEW class_type . LPAREN argument_list_opt RPAREN class_body_opt

    LPAREN          shift and go to state 798


state 638

    (222) method_invocation -> primary PERIOD type_arguments IDENT . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 799


state 639

    (225) method_invocation -> primary PERIOD IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 800
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 640

    (221) method_invocation -> name PERIOD type_arguments IDENT . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 801


state 641

    (224) method_invocation -> name PERIOD IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    argument_list_opt              shift and go to state 802
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 642

    (151) primary_no_new_array -> name dims PERIOD CLASS .

    LBRACK          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    PERIOD          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    INC             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    DEC             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    ASSIGN          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    MUL_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    QUO_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    REM_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    ADD_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SUB_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SHL_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SHR_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SHR_UN_ASSIGN   reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    AND_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    OR_ASSIGN       reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    XOR_ASSIGN      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    MUL             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    QUO             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    REM             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    ADD             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SUB             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SHL             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SHR             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SHR_UN          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    GTR             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    LSS             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    GEQ             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    LEQ             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    INSTANCEOF      reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    EQL             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    NEQ             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    AND             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    XOR             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    OR              reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    LAND            reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    QUES            reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    LOR             reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    $end            reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    SEMICOLON       reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    RPAREN          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    COLON           reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    RBRACK          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    COMMA           reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)
    RBRACE          reduce using rule 151 (primary_no_new_array -> name dims PERIOD CLASS .)


state 643

    (338) array_access -> name LBRACK expression RBRACK .

    LBRACK          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    PERIOD          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    INC             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    DEC             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    MUL_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    QUO_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    REM_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    ADD_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SUB_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SHL_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SHR_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SHR_UN_ASSIGN   reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    AND_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    OR_ASSIGN       reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    XOR_ASSIGN      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    MUL             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    QUO             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    REM             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    ADD             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SUB             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SHL             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SHR             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SHR_UN          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    GTR             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    LSS             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    GEQ             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    LEQ             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    INSTANCEOF      reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    EQL             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    NEQ             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    AND             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    XOR             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    OR              reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    LAND            reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    QUES            reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    LOR             reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    $end            reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    RPAREN          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    COLON           reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    RBRACK          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    COMMA           reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)
    RBRACE          reduce using rule 338 (array_access -> name LBRACK expression RBRACK .)


state 644

    (31) conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .
    (37) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    QUES            reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    LOR             reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    $end            reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    SEMICOLON       reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    COLON           reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    RPAREN          reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    RBRACK          reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    COMMA           reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    RBRACE          reduce using rule 31 (conditional_and_expression -> conditional_and_expression LAND marker_next_quad inclusive_or_expression .)
    OR              shift and go to state 245


state 645

    (339) array_access -> primary_no_new_array LBRACK expression RBRACK .

    LBRACK          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    PERIOD          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    INC             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    DEC             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    MUL_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    QUO_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    REM_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    ADD_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SUB_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SHL_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SHR_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SHR_UN_ASSIGN   reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    AND_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    OR_ASSIGN       reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    XOR_ASSIGN      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    MUL             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    QUO             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    REM             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    ADD             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SUB             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SHL             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SHR             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SHR_UN          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    GTR             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    LSS             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    GEQ             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    LEQ             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    INSTANCEOF      reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    EQL             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    NEQ             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    AND             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    XOR             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    OR              reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    LAND            reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    QUES            reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    LOR             reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    $end            reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    RPAREN          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    COLON           reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    RBRACK          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    COMMA           reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)
    RBRACE          reduce using rule 339 (array_access -> primary_no_new_array LBRACK expression RBRACK .)


state 646

    (340) array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .

    LBRACK          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    PERIOD          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    INC             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    DEC             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    MUL_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    QUO_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    REM_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    ADD_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SUB_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SHL_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SHR_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SHR_UN_ASSIGN   reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    AND_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    OR_ASSIGN       reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    XOR_ASSIGN      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    MUL             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    QUO             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    REM             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    ADD             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SUB             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SHL             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SHR             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SHR_UN          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    GTR             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    LSS             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    GEQ             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    LEQ             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    INSTANCEOF      reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    EQL             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    NEQ             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    AND             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    XOR             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    OR              reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    LAND            reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    QUES            reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    LOR             reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    $end            reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    RPAREN          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    COLON           reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    RBRACK          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    COMMA           reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)
    RBRACE          reduce using rule 340 (array_access -> array_creation_with_array_initializer LBRACK expression RBRACK .)


state 647

    (163) cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .

    MUL             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    QUO             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    REM             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    ADD             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    SUB             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    SHL             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    SHR             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    SHR_UN          reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    GTR             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    LSS             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    GEQ             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    LEQ             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    EQL             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    NEQ             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    AND             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    XOR             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    OR              reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    LAND            reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    QUES            reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    LOR             reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    $end            reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    SEMICOLON       reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    COLON           reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    RBRACK          reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    COMMA           reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)
    RBRACE          reduce using rule 163 (cast_expression -> LPAREN name RPAREN unary_expression_not_plus_minus .)


state 648

    (161) cast_expression -> LPAREN name type_arguments dims_opt . RPAREN unary_expression_not_plus_minus

    RPAREN          shift and go to state 803


state 649

    (162) cast_expression -> LPAREN name type_arguments PERIOD . class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    name                           shift and go to state 285
    class_or_interface_type        shift and go to state 804
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 650

    (164) cast_expression -> LPAREN name dims RPAREN . unary_expression_not_plus_minus
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression_not_plus_minus shift and go to state 805
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 651

    (24) conditional_expression_not_name -> name QUES expression . COLON conditional_expression

    COLON           shift and go to state 806


state 652

    (29) conditional_or_expression_not_name -> name LOR marker_next_quad . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    conditional_and_expression     shift and go to state 807
    inclusive_or_expression        shift and go to state 66
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 653

    (34) conditional_and_expression_not_name -> name LAND marker_next_quad . inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    inclusive_or_expression        shift and go to state 808
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 654

    (40) inclusive_or_expression_not_name -> name OR exclusive_or_expression .
    (42) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    LAND            reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    QUES            reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    LOR             reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    RPAREN          reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    COMMA           reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    RBRACE          reduce using rule 40 (inclusive_or_expression_not_name -> name OR exclusive_or_expression .)
    XOR             shift and go to state 287


state 655

    (45) exclusive_or_expression_not_name -> name XOR and_expression .
    (47) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    OR              reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    LAND            reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    QUES            reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    LOR             reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    RPAREN          reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    COMMA           reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    RBRACE          reduce using rule 45 (exclusive_or_expression_not_name -> name XOR and_expression .)
    AND             shift and go to state 289


state 656

    (50) and_expression_not_name -> name AND equality_expression .
    (52) equality_expression -> equality_expression . EQL instanceof_expression
    (53) equality_expression -> equality_expression . NEQ instanceof_expression

    AND             reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    XOR             reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    OR              reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    LAND            reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    QUES            reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    LOR             reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    RPAREN          reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    COMMA           reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    RBRACE          reduce using rule 50 (and_expression_not_name -> name AND equality_expression .)
    EQL             shift and go to state 290
    NEQ             shift and go to state 291


state 657

    (56) equality_expression_not_name -> name EQL instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    NEQ             reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    AND             reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    XOR             reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    OR              reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    LAND            reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    QUES            reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    LOR             reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    RPAREN          reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    COMMA           reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    RBRACE          reduce using rule 56 (equality_expression_not_name -> name EQL instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 658

    (58) equality_expression_not_name -> name NEQ instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    NEQ             reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    AND             reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    XOR             reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    OR              reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    LAND            reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    QUES            reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    LOR             reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    RPAREN          reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    COMMA           reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    RBRACE          reduce using rule 58 (equality_expression_not_name -> name NEQ instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 659

    (62) instanceof_expression_not_name -> name INSTANCEOF reference_type .

    INSTANCEOF      reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    EQL             reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    NEQ             reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    AND             reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    XOR             reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    OR              reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    LAND            reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    QUES            reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    LOR             reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    RPAREN          reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    COMMA           reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    RBRACE          reduce using rule 62 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)


state 660

    (395) class_or_interface -> name .
    (400) array_type -> name . dims
    (129) postfix_expression -> name .
    (352) qualified_name -> name . PERIOD simple_name
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> name . LBRACK expression RBRACK
    (333) class_instance_creation_expression_name -> name . PERIOD
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LSS             reduce using rule 395 (class_or_interface -> name .)
    GTR             reduce using rule 395 (class_or_interface -> name .)
    COMMA           reduce using rule 395 (class_or_interface -> name .)
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    MUL             reduce using rule 129 (postfix_expression -> name .)
    QUO             reduce using rule 129 (postfix_expression -> name .)
    REM             reduce using rule 129 (postfix_expression -> name .)
    ADD             reduce using rule 129 (postfix_expression -> name .)
    SUB             reduce using rule 129 (postfix_expression -> name .)
    SHL             reduce using rule 129 (postfix_expression -> name .)
    SHR             reduce using rule 129 (postfix_expression -> name .)
    SHR_UN          reduce using rule 129 (postfix_expression -> name .)
    INSTANCEOF      reduce using rule 129 (postfix_expression -> name .)
    EQL             reduce using rule 129 (postfix_expression -> name .)
    NEQ             reduce using rule 129 (postfix_expression -> name .)
    AND             reduce using rule 129 (postfix_expression -> name .)
    XOR             reduce using rule 129 (postfix_expression -> name .)
    OR              reduce using rule 129 (postfix_expression -> name .)
    LAND            reduce using rule 129 (postfix_expression -> name .)
    QUES            reduce using rule 129 (postfix_expression -> name .)
    LOR             reduce using rule 129 (postfix_expression -> name .)
    RPAREN          reduce using rule 129 (postfix_expression -> name .)
    PERIOD          shift and go to state 441
    LBRACK          shift and go to state 238

    dims                           shift and go to state 352
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 661

    (71) relational_expression_not_name -> name LSS shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    EQL             reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    NEQ             reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    AND             reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    XOR             reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    OR              reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    LAND            reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    QUES            reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    LOR             reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    RPAREN          reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    COMMA           reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    RBRACE          reduce using rule 71 (relational_expression_not_name -> name LSS shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 662

    (399) array_type -> primitive_type . dims
    (152) primary_no_new_array -> primitive_type . dims PERIOD CLASS
    (153) primary_no_new_array -> primitive_type . PERIOD CLASS
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 278
    LBRACK          shift and go to state 279

    dims                           shift and go to state 325
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 663

    (73) relational_expression_not_name -> name GTR shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    EQL             reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    NEQ             reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    AND             reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    XOR             reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    OR              reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    LAND            reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    QUES            reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    LOR             reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    RPAREN          reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    COMMA           reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    RBRACE          reduce using rule 73 (relational_expression_not_name -> name GTR shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 664

    (75) relational_expression_not_name -> name GEQ shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    EQL             reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    NEQ             reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    AND             reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    XOR             reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    OR              reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    LAND            reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    QUES            reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    LOR             reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    RPAREN          reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    COMMA           reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    RBRACE          reduce using rule 75 (relational_expression_not_name -> name GEQ shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 665

    (77) relational_expression_not_name -> name LEQ shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    EQL             reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    NEQ             reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    AND             reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    XOR             reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    OR              reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    LAND            reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    QUES            reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    LOR             reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    RPAREN          reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    COMMA           reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    RBRACE          reduce using rule 77 (relational_expression_not_name -> name LEQ shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 666

    (84) shift_expression_not_name -> name SHL additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    LSS             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    GTR             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    GEQ             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    LEQ             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    SHL             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    SHR             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    SHR_UN          reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    INSTANCEOF      reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    EQL             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    NEQ             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    AND             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    XOR             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    OR              reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    LAND            reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    QUES            reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    LOR             reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    RPAREN          reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    COMMA           reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    RBRACE          reduce using rule 84 (shift_expression_not_name -> name SHL additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 667

    (86) shift_expression_not_name -> name SHR additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    LSS             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    GTR             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    GEQ             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    LEQ             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    SHL             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    SHR             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    SHR_UN          reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    INSTANCEOF      reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    EQL             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    NEQ             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    AND             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    XOR             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    OR              reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    LAND            reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    QUES            reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    LOR             reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    RPAREN          reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    COMMA           reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    RBRACE          reduce using rule 86 (shift_expression_not_name -> name SHR additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 668

    (88) shift_expression_not_name -> name SHR_UN additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    LSS             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    GTR             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    GEQ             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    LEQ             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    SHL             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    SHR             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    SHR_UN          reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    INSTANCEOF      reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    EQL             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    NEQ             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    AND             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    XOR             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    OR              reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    LAND            reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    QUES            reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    LOR             reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    RPAREN          reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    COMMA           reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    RBRACE          reduce using rule 88 (shift_expression_not_name -> name SHR_UN additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 669

    (94) additive_expression_not_name -> name ADD multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    SUB             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    LSS             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    GTR             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    GEQ             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    LEQ             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    SHL             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    SHR             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    SHR_UN          reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    INSTANCEOF      reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    EQL             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    NEQ             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    AND             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    XOR             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    OR              reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    LAND            reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    QUES            reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    LOR             reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    RPAREN          reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    COMMA           reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    RBRACE          reduce using rule 94 (additive_expression_not_name -> name ADD multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 670

    (96) additive_expression_not_name -> name SUB multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    SUB             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    LSS             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    GTR             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    GEQ             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    LEQ             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    SHL             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    SHR             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    SHR_UN          reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    INSTANCEOF      reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    EQL             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    NEQ             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    AND             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    XOR             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    OR              reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    LAND            reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    QUES            reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    LOR             reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    RPAREN          reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    COMMA           reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    RBRACE          reduce using rule 96 (additive_expression_not_name -> name SUB multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 671

    (103) multiplicative_expression_not_name -> name MUL unary_expression .

    MUL             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    QUO             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    REM             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    ADD             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    SUB             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    LSS             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    GTR             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    GEQ             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    LEQ             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    SHL             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    SHR             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    SHR_UN          reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    INSTANCEOF      reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    EQL             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    NEQ             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    AND             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    XOR             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    OR              reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    LAND            reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    QUES            reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    LOR             reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    RPAREN          reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    COMMA           reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)
    RBRACE          reduce using rule 103 (multiplicative_expression_not_name -> name MUL unary_expression .)


state 672

    (105) multiplicative_expression_not_name -> name QUO unary_expression .

    MUL             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    QUO             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    REM             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    ADD             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    SUB             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    LSS             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    GTR             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    GEQ             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    LEQ             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    SHL             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    SHR             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    SHR_UN          reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    INSTANCEOF      reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    EQL             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    NEQ             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    AND             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    XOR             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    OR              reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    LAND            reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    QUES            reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    LOR             reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    RPAREN          reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    COMMA           reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)
    RBRACE          reduce using rule 105 (multiplicative_expression_not_name -> name QUO unary_expression .)


state 673

    (107) multiplicative_expression_not_name -> name REM unary_expression .

    MUL             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    QUO             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    REM             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    ADD             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    SUB             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    LSS             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    GTR             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    GEQ             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    LEQ             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    SHL             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    SHR             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    SHR_UN          reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    INSTANCEOF      reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    EQL             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    NEQ             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    AND             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    XOR             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    OR              reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    LAND            reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    QUES            reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    LOR             reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    RPAREN          reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    COMMA           reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)
    RBRACE          reduce using rule 107 (multiplicative_expression_not_name -> name REM unary_expression .)


state 674

    (160) cast_expression -> LPAREN primitive_type dims_opt RPAREN . unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    primitive_type                 shift and go to state 75
    unary_expression               shift and go to state 809
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 675

    (23) conditional_expression_not_name -> conditional_or_expression_not_name QUES expression . COLON conditional_expression

    COLON           shift and go to state 810


state 676

    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    conditional_and_expression     shift and go to state 811
    inclusive_or_expression        shift and go to state 66
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 677

    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad . inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    inclusive_or_expression        shift and go to state 812
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 678

    (39) inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .
    (42) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    LAND            reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    QUES            reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    LOR             reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    RPAREN          reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    COMMA           reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    RBRACE          reduce using rule 39 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name OR exclusive_or_expression .)
    XOR             shift and go to state 287


state 679

    (44) exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .
    (47) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    OR              reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    LAND            reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    QUES            reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    LOR             reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    RPAREN          reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    COMMA           reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    RBRACE          reduce using rule 44 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name XOR and_expression .)
    AND             shift and go to state 289


state 680

    (49) and_expression_not_name -> and_expression_not_name AND equality_expression .
    (52) equality_expression -> equality_expression . EQL instanceof_expression
    (53) equality_expression -> equality_expression . NEQ instanceof_expression

    AND             reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    XOR             reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    OR              reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    LAND            reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    QUES            reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    LOR             reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    RPAREN          reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    COMMA           reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    RBRACE          reduce using rule 49 (and_expression_not_name -> and_expression_not_name AND equality_expression .)
    EQL             shift and go to state 290
    NEQ             shift and go to state 291


state 681

    (55) equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    NEQ             reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    AND             reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    XOR             reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    OR              reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    LAND            reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    QUES            reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    LOR             reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    RPAREN          reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    COMMA           reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    RBRACE          reduce using rule 55 (equality_expression_not_name -> equality_expression_not_name EQL instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 682

    (57) equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .
    (60) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQL             reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    NEQ             reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    AND             reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    XOR             reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    OR              reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    LAND            reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    QUES            reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    LOR             reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    RPAREN          reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    COMMA           reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    RBRACE          reduce using rule 57 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    INSTANCEOF      shift and go to state 292


state 683

    (63) instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .

    INSTANCEOF      reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    EQL             reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    NEQ             reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    AND             reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    XOR             reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    OR              reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    LAND            reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    QUES            reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    LOR             reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    RPAREN          reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    COMMA           reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    RBRACE          reduce using rule 63 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)


state 684

    (70) relational_expression_not_name -> shift_expression_not_name LSS shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    EQL             reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    NEQ             reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    AND             reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    XOR             reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    OR              reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    LAND            reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    QUES            reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    LOR             reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    RPAREN          reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    COMMA           reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    RBRACE          reduce using rule 70 (relational_expression_not_name -> shift_expression_not_name LSS shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 685

    (72) relational_expression_not_name -> shift_expression_not_name GTR shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    EQL             reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    NEQ             reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    AND             reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    XOR             reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    OR              reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    LAND            reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    QUES            reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    LOR             reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    RPAREN          reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    COMMA           reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    RBRACE          reduce using rule 72 (relational_expression_not_name -> shift_expression_not_name GTR shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 686

    (74) relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    EQL             reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    NEQ             reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    AND             reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    XOR             reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    OR              reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    LAND            reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    QUES            reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    LOR             reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    RPAREN          reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    COMMA           reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    RBRACE          reduce using rule 74 (relational_expression_not_name -> shift_expression_not_name GEQ shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 687

    (76) relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .
    (79) shift_expression -> shift_expression . SHL additive_expression
    (80) shift_expression -> shift_expression . SHR additive_expression
    (81) shift_expression -> shift_expression . SHR_UN additive_expression

    INSTANCEOF      reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    EQL             reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    NEQ             reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    AND             reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    XOR             reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    OR              reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    LAND            reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    QUES            reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    LOR             reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    RPAREN          reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    COMMA           reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    RBRACE          reduce using rule 76 (relational_expression_not_name -> shift_expression_not_name LEQ shift_expression .)
    SHL             shift and go to state 297
    SHR             shift and go to state 298
    SHR_UN          shift and go to state 299


state 688

    (83) shift_expression_not_name -> shift_expression_not_name SHL additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    LSS             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    GTR             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    GEQ             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    LEQ             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    SHL             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    SHR             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    SHR_UN          reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    INSTANCEOF      reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    EQL             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    NEQ             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    AND             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    XOR             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    OR              reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    LAND            reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    QUES            reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    LOR             reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    RPAREN          reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    COMMA           reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    RBRACE          reduce using rule 83 (shift_expression_not_name -> shift_expression_not_name SHL additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 689

    (85) shift_expression_not_name -> shift_expression_not_name SHR additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    LSS             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    GTR             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    GEQ             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    LEQ             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    SHL             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    SHR             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    SHR_UN          reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    INSTANCEOF      reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    EQL             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    NEQ             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    AND             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    XOR             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    OR              reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    LAND            reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    QUES            reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    LOR             reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    RPAREN          reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    COMMA           reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    RBRACE          reduce using rule 85 (shift_expression_not_name -> shift_expression_not_name SHR additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 690

    (87) shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .
    (90) additive_expression -> additive_expression . ADD multiplicative_expression
    (91) additive_expression -> additive_expression . SUB multiplicative_expression

    LSS             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    GTR             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    GEQ             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    LEQ             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    SHL             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    SHR             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    SHR_UN          reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    INSTANCEOF      reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    EQL             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    NEQ             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    AND             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    XOR             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    OR              reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    LAND            reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    QUES            reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    LOR             reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    RPAREN          reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    COMMA           reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    RBRACE          reduce using rule 87 (shift_expression_not_name -> shift_expression_not_name SHR_UN additive_expression .)
    ADD             shift and go to state 300
    SUB             shift and go to state 301


state 691

    (93) additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    SUB             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    LSS             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    GTR             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    GEQ             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    LEQ             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    SHL             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    SHR             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    SHR_UN          reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    INSTANCEOF      reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    EQL             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    NEQ             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    AND             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    XOR             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    OR              reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    LAND            reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    QUES            reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    LOR             reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    RPAREN          reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    COMMA           reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    RBRACE          reduce using rule 93 (additive_expression_not_name -> additive_expression_not_name ADD multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 692

    (95) additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .
    (98) multiplicative_expression -> multiplicative_expression . MUL unary_expression
    (99) multiplicative_expression -> multiplicative_expression . QUO unary_expression
    (100) multiplicative_expression -> multiplicative_expression . REM unary_expression

    ADD             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    SUB             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    LSS             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    GTR             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    GEQ             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    LEQ             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    SHL             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    SHR             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    SHR_UN          reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    INSTANCEOF      reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    EQL             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    NEQ             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    AND             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    XOR             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    OR              reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    LAND            reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    QUES            reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    LOR             reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    RPAREN          reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    COMMA           reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    RBRACE          reduce using rule 95 (additive_expression_not_name -> additive_expression_not_name SUB multiplicative_expression .)
    MUL             shift and go to state 302
    QUO             shift and go to state 303
    REM             shift and go to state 304


state 693

    (102) multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .

    MUL             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    QUO             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    REM             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    ADD             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    SUB             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    LSS             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    GTR             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    GEQ             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    LEQ             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    SHL             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    SHR             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    SHR_UN          reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    INSTANCEOF      reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    EQL             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    NEQ             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    AND             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    XOR             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    OR              reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    LAND            reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    QUES            reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    LOR             reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    RPAREN          reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    COMMA           reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)
    RBRACE          reduce using rule 102 (multiplicative_expression_not_name -> multiplicative_expression_not_name MUL unary_expression .)


state 694

    (104) multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .

    MUL             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    QUO             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    REM             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    ADD             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    SUB             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    LSS             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    GTR             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    GEQ             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    LEQ             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    SHL             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    SHR             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    SHR_UN          reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    INSTANCEOF      reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    EQL             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    NEQ             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    AND             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    XOR             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    OR              reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    LAND            reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    QUES            reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    LOR             reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    RPAREN          reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    COMMA           reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)
    RBRACE          reduce using rule 104 (multiplicative_expression_not_name -> multiplicative_expression_not_name QUO unary_expression .)


state 695

    (106) multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .

    MUL             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    QUO             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    REM             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    ADD             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    SUB             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    LSS             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    GTR             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    GEQ             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    LEQ             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    SHL             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    SHR             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    SHR_UN          reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    INSTANCEOF      reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    EQL             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    NEQ             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    AND             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    XOR             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    OR              reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    LAND            reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    QUES            reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    LOR             reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    RPAREN          reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    COMMA           reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)
    RBRACE          reduce using rule 106 (multiplicative_expression_not_name -> multiplicative_expression_not_name REM unary_expression .)


state 696

    (226) method_invocation -> SUPER PERIOD IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 813
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 697

    (223) method_invocation -> SUPER PERIOD type_arguments IDENT . LPAREN argument_list_opt RPAREN

    LPAREN          shift and go to state 814


state 698

    (152) primary_no_new_array -> primitive_type dims PERIOD CLASS .

    LBRACK          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    PERIOD          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    INC             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    DEC             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    ASSIGN          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    MUL_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    QUO_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    REM_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    ADD_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SUB_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SHL_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SHR_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SHR_UN_ASSIGN   reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    AND_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    OR_ASSIGN       reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    XOR_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    MUL             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    QUO             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    REM             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    ADD             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SUB             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SHL             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SHR             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SHR_UN          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    GTR             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    LSS             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    GEQ             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    LEQ             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    INSTANCEOF      reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    EQL             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    NEQ             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    AND             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    XOR             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    OR              reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    LAND            reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    QUES            reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    LOR             reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    $end            reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    SEMICOLON       reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    RPAREN          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    COLON           reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    RBRACK          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    COMMA           reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)
    RBRACE          reduce using rule 152 (primary_no_new_array -> primitive_type dims PERIOD CLASS .)


state 699

    (341) array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .

    LBRACK          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    PERIOD          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    INC             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    DEC             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ASSIGN          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    MUL_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    QUO_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    REM_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ADD_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SUB_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SHL_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SHR_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SHR_UN_ASSIGN   reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    AND_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    OR_ASSIGN       reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    XOR_ASSIGN      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    MUL             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    QUO             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    REM             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ADD             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SUB             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SHL             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SHR             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SHR_UN          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    GTR             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LSS             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    GEQ             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LEQ             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    INSTANCEOF      reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    EQL             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    NEQ             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    AND             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    XOR             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    OR              reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LAND            reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    QUES            reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LOR             reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    $end            reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    SEMICOLON       reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RPAREN          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    COLON           reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RBRACK          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    COMMA           reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RBRACE          reduce using rule 341 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)


state 700

    (344) dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .

    LBRACE          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LBRACK          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    PERIOD          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    INC             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    DEC             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ASSIGN          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    MUL_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    QUO_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    REM_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ADD_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SUB_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SHL_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SHR_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SHR_UN_ASSIGN   reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    AND_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    OR_ASSIGN       reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    XOR_ASSIGN      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    MUL             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    QUO             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    REM             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ADD             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SUB             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SHL             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SHR             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SHR_UN          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    GTR             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LSS             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    GEQ             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LEQ             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    INSTANCEOF      reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    EQL             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    NEQ             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    AND             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    XOR             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    OR              reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LAND            reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    QUES            reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LOR             reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    $end            reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    SEMICOLON       reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RPAREN          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    COLON           reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RBRACK          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    COMMA           reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RBRACE          reduce using rule 344 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)


state 701

    (215) array_initializer -> LBRACE . comma_opt RBRACE
    (216) array_initializer -> LBRACE . variable_initializers RBRACE
    (217) array_initializer -> LBRACE . variable_initializers COMMA RBRACE
    (213) comma_opt -> . COMMA
    (214) comma_opt -> . empty
    (218) variable_initializers -> . variable_initializer
    (219) variable_initializers -> . variable_initializers COMMA variable_initializer
    (583) empty -> .
    (182) variable_initializer -> . expression
    (183) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    COMMA           shift and go to state 817
    RBRACE          reduce using rule 583 (empty -> .)
    LBRACE          shift and go to state 701
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    comma_opt                      shift and go to state 815
    variable_initializers          shift and go to state 816
    empty                          shift and go to state 818
    variable_initializer           shift and go to state 819
    expression                     shift and go to state 714
    array_initializer              shift and go to state 715
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 702

    (345) dim_with_or_without_expr -> LBRACK expression . RBRACK

    RBRACK          shift and go to state 820


state 703

    (346) dim_with_or_without_expr -> LBRACK RBRACK .

    LBRACE          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    LBRACK          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    PERIOD          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    INC             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    DEC             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    ASSIGN          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    MUL_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    QUO_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    REM_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    ADD_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SUB_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SHL_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SHR_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SHR_UN_ASSIGN   reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    AND_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    OR_ASSIGN       reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    XOR_ASSIGN      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    MUL             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    QUO             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    REM             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    ADD             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SUB             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SHL             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SHR             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SHR_UN          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    GTR             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    LSS             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    GEQ             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    LEQ             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    INSTANCEOF      reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    EQL             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    NEQ             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    AND             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    XOR             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    OR              reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    LAND            reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    QUES            reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    LOR             reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    $end            reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    SEMICOLON       reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    RPAREN          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    COLON           reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    RBRACK          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    COMMA           reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)
    RBRACE          reduce using rule 346 (dim_with_or_without_expr -> LBRACK RBRACK .)


state 704

    (342) array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .

    LBRACK          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    PERIOD          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    INC             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    DEC             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ASSIGN          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    MUL_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    QUO_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    REM_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ADD_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SUB_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SHL_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SHR_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SHR_UN_ASSIGN   reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    AND_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    OR_ASSIGN       reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    XOR_ASSIGN      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    MUL             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    QUO             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    REM             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ADD             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SUB             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SHL             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SHR             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SHR_UN          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    GTR             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LSS             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    GEQ             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LEQ             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    INSTANCEOF      reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    EQL             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    NEQ             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    AND             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    XOR             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    OR              reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LAND            reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    QUES            reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LOR             reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    $end            reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    SEMICOLON       reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RPAREN          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    COLON           reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RBRACK          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    COMMA           reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RBRACE          reduce using rule 342 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)


state 705

    (327) class_instance_creation_expression -> NEW type_arguments class_type LPAREN . argument_list_opt RPAREN class_body_opt
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 821
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 706

    (328) class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt . RPAREN class_body_opt

    RPAREN          shift and go to state 822


state 707

    (396) class_or_interface -> generic_type PERIOD name .
    (352) qualified_name -> name . PERIOD simple_name

    LSS             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    LBRACK          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    LPAREN          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    COMMA           reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    LBRACE          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    RPAREN          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    SEMICOLON       reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    PERIOD          shift and go to state 372


state 708

    (220) method_invocation -> IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 220 (method_invocation -> IDENT LPAREN argument_list_opt RPAREN .)


state 709

    (533) argument_list -> argument_list COMMA . expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 823
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 710

    (331) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN . argument_list_opt RPAREN class_body_opt
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    class_instance_creation_expression_name shift and go to state 89
    argument_list_opt              shift and go to state 824
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 711

    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type . LPAREN argument_list_opt RPAREN class_body_opt

    LPAREN          shift and go to state 825


state 712

    (178) variable_declarators -> variable_declarators COMMA variable_declarator .

    COMMA           reduce using rule 178 (variable_declarators -> variable_declarators COMMA variable_declarator .)
    SEMICOLON       reduce using rule 178 (variable_declarators -> variable_declarators COMMA variable_declarator .)


state 713

    (180) variable_declarator -> variable_declarator_id ASSIGN variable_initializer .

    COMMA           reduce using rule 180 (variable_declarator -> variable_declarator_id ASSIGN variable_initializer .)
    SEMICOLON       reduce using rule 180 (variable_declarator -> variable_declarator_id ASSIGN variable_initializer .)


state 714

    (182) variable_initializer -> expression .

    COMMA           reduce using rule 182 (variable_initializer -> expression .)
    SEMICOLON       reduce using rule 182 (variable_initializer -> expression .)
    RBRACE          reduce using rule 182 (variable_initializer -> expression .)
    RPAREN          reduce using rule 182 (variable_initializer -> expression .)


state 715

    (183) variable_initializer -> array_initializer .

    COMMA           reduce using rule 183 (variable_initializer -> array_initializer .)
    SEMICOLON       reduce using rule 183 (variable_initializer -> array_initializer .)
    RBRACE          reduce using rule 183 (variable_initializer -> array_initializer .)
    RPAREN          reduce using rule 183 (variable_initializer -> array_initializer .)


state 716

    (230) if_then_statement -> IF LPAREN inc_scope expression . RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope expression . RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2

    RPAREN          shift and go to state 826


state 717

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope . label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (239) label_for_while1 -> .

    THIS            reduce using rule 239 (label_for_while1 -> .)
    LPAREN          reduce using rule 239 (label_for_while1 -> .)
    NEW             reduce using rule 239 (label_for_while1 -> .)
    IDENT           reduce using rule 239 (label_for_while1 -> .)
    HEX_LIT         reduce using rule 239 (label_for_while1 -> .)
    OCTAL_LIT       reduce using rule 239 (label_for_while1 -> .)
    BINARY_LIT      reduce using rule 239 (label_for_while1 -> .)
    DECIMAL_LIT     reduce using rule 239 (label_for_while1 -> .)
    FLOAT_HEX_LIT   reduce using rule 239 (label_for_while1 -> .)
    FLOAT_DEC_LIT   reduce using rule 239 (label_for_while1 -> .)
    CHAR_LIT        reduce using rule 239 (label_for_while1 -> .)
    STRING_LIT      reduce using rule 239 (label_for_while1 -> .)
    BOOL_LIT        reduce using rule 239 (label_for_while1 -> .)
    NULL_LIT        reduce using rule 239 (label_for_while1 -> .)
    SUPER           reduce using rule 239 (label_for_while1 -> .)
    BOOLEAN         reduce using rule 239 (label_for_while1 -> .)
    VOID            reduce using rule 239 (label_for_while1 -> .)
    BYTE            reduce using rule 239 (label_for_while1 -> .)
    SHORT           reduce using rule 239 (label_for_while1 -> .)
    INT             reduce using rule 239 (label_for_while1 -> .)
    LONG            reduce using rule 239 (label_for_while1 -> .)
    CHAR            reduce using rule 239 (label_for_while1 -> .)
    FLOAT           reduce using rule 239 (label_for_while1 -> .)
    DOUBLE          reduce using rule 239 (label_for_while1 -> .)
    ADD             reduce using rule 239 (label_for_while1 -> .)
    SUB             reduce using rule 239 (label_for_while1 -> .)
    INC             reduce using rule 239 (label_for_while1 -> .)
    DEC             reduce using rule 239 (label_for_while1 -> .)
    LNOT            reduce using rule 239 (label_for_while1 -> .)
    NOT             reduce using rule 239 (label_for_while1 -> .)

    label_for_while1               shift and go to state 827

state 718

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope . for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope . type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope . modifiers type IDENT dims_opt
    (246) for_init_opt -> . for_init
    (247) for_init_opt -> . empty
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (248) for_init -> . statement_expression_list
    (249) for_init -> . local_variable_declaration
    (583) empty -> .
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (250) statement_expression_list -> . statement_expression
    (251) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (548) annotation_name -> . ATRATE name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    SEMICOLON       reduce using rule 583 (empty -> .)
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    INC             shift and go to state 65
    DEC             shift and go to state 48
    IDENT           shift and go to state 830
    SUPER           shift and go to state 839
    NEW             shift and go to state 184
    ATRATE          shift and go to state 47
    THIS            shift and go to state 68
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    for_init_opt                   shift and go to state 828
    type                           shift and go to state 829
    modifiers                      shift and go to state 831
    for_init                       shift and go to state 832
    empty                          shift and go to state 833
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression_list      shift and go to state 834
    local_variable_declaration     shift and go to state 835
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    statement_expression           shift and go to state 836
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 837
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    postfix_expression             shift and go to state 183
    primary                        shift and go to state 838
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 719

    (165) block -> LBRACE inc_scope block_statements_opt dec_scope . RBRACE

    RBRACE          shift and go to state 840


state 720

    (169) block_statements -> block_statements block_statement .

    IF              reduce using rule 169 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 169 (block_statements -> block_statements block_statement .)
    FOR             reduce using rule 169 (block_statements -> block_statements block_statement .)
    LBRACE          reduce using rule 169 (block_statements -> block_statements block_statement .)
    ASSERT          reduce using rule 169 (block_statements -> block_statements block_statement .)
    SEMICOLON       reduce using rule 169 (block_statements -> block_statements block_statement .)
    SWITCH          reduce using rule 169 (block_statements -> block_statements block_statement .)
    DO              reduce using rule 169 (block_statements -> block_statements block_statement .)
    BREAK           reduce using rule 169 (block_statements -> block_statements block_statement .)
    CONTINUE        reduce using rule 169 (block_statements -> block_statements block_statement .)
    RETURN          reduce using rule 169 (block_statements -> block_statements block_statement .)
    SYNCHRONIZED    reduce using rule 169 (block_statements -> block_statements block_statement .)
    THROW           reduce using rule 169 (block_statements -> block_statements block_statement .)
    TRY             reduce using rule 169 (block_statements -> block_statements block_statement .)
    IDENT           reduce using rule 169 (block_statements -> block_statements block_statement .)
    BOOLEAN         reduce using rule 169 (block_statements -> block_statements block_statement .)
    VOID            reduce using rule 169 (block_statements -> block_statements block_statement .)
    BYTE            reduce using rule 169 (block_statements -> block_statements block_statement .)
    SHORT           reduce using rule 169 (block_statements -> block_statements block_statement .)
    INT             reduce using rule 169 (block_statements -> block_statements block_statement .)
    LONG            reduce using rule 169 (block_statements -> block_statements block_statement .)
    CHAR            reduce using rule 169 (block_statements -> block_statements block_statement .)
    FLOAT           reduce using rule 169 (block_statements -> block_statements block_statement .)
    DOUBLE          reduce using rule 169 (block_statements -> block_statements block_statement .)
    PUBLIC          reduce using rule 169 (block_statements -> block_statements block_statement .)
    PROTECTED       reduce using rule 169 (block_statements -> block_statements block_statement .)
    PRIVATE         reduce using rule 169 (block_statements -> block_statements block_statement .)
    STATIC          reduce using rule 169 (block_statements -> block_statements block_statement .)
    ABSTRACT        reduce using rule 169 (block_statements -> block_statements block_statement .)
    FINAL           reduce using rule 169 (block_statements -> block_statements block_statement .)
    NATIVE          reduce using rule 169 (block_statements -> block_statements block_statement .)
    TRANSIENT       reduce using rule 169 (block_statements -> block_statements block_statement .)
    VOLATILE        reduce using rule 169 (block_statements -> block_statements block_statement .)
    STRICTFP        reduce using rule 169 (block_statements -> block_statements block_statement .)
    THIS            reduce using rule 169 (block_statements -> block_statements block_statement .)
    SUPER           reduce using rule 169 (block_statements -> block_statements block_statement .)
    INC             reduce using rule 169 (block_statements -> block_statements block_statement .)
    DEC             reduce using rule 169 (block_statements -> block_statements block_statement .)
    NEW             reduce using rule 169 (block_statements -> block_statements block_statement .)
    LSS             reduce using rule 169 (block_statements -> block_statements block_statement .)
    LPAREN          reduce using rule 169 (block_statements -> block_statements block_statement .)
    ATRATE          reduce using rule 169 (block_statements -> block_statements block_statement .)
    HEX_LIT         reduce using rule 169 (block_statements -> block_statements block_statement .)
    OCTAL_LIT       reduce using rule 169 (block_statements -> block_statements block_statement .)
    BINARY_LIT      reduce using rule 169 (block_statements -> block_statements block_statement .)
    DECIMAL_LIT     reduce using rule 169 (block_statements -> block_statements block_statement .)
    FLOAT_HEX_LIT   reduce using rule 169 (block_statements -> block_statements block_statement .)
    FLOAT_DEC_LIT   reduce using rule 169 (block_statements -> block_statements block_statement .)
    CHAR_LIT        reduce using rule 169 (block_statements -> block_statements block_statement .)
    STRING_LIT      reduce using rule 169 (block_statements -> block_statements block_statement .)
    BOOL_LIT        reduce using rule 169 (block_statements -> block_statements block_statement .)
    NULL_LIT        reduce using rule 169 (block_statements -> block_statements block_statement .)
    CLASS           reduce using rule 169 (block_statements -> block_statements block_statement .)
    INTERFACE       reduce using rule 169 (block_statements -> block_statements block_statement .)
    RBRACE          reduce using rule 169 (block_statements -> block_statements block_statement .)
    CASE            reduce using rule 169 (block_statements -> block_statements block_statement .)
    DEFAULT         reduce using rule 169 (block_statements -> block_statements block_statement .)


state 721

    (269) assert_statement -> ASSERT expression COLON expression . SEMICOLON

    SEMICOLON       shift and go to state 841


state 722

    (271) switch_statement -> SWITCH LPAREN inc_scope expression . RPAREN switch_block

    RPAREN          shift and go to state 842


state 723

    (284) do_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 843
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 724

    (290) synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN . block
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE

    LBRACE          shift and go to state 153

    block                          shift and go to state 844

state 725

    (296) catches -> catches catch_clause .

    CATCH           reduce using rule 296 (catches -> catches catch_clause .)
    $end            reduce using rule 296 (catches -> catches catch_clause .)
    WHILE           reduce using rule 296 (catches -> catches catch_clause .)
    IF              reduce using rule 296 (catches -> catches catch_clause .)
    FOR             reduce using rule 296 (catches -> catches catch_clause .)
    LBRACE          reduce using rule 296 (catches -> catches catch_clause .)
    ASSERT          reduce using rule 296 (catches -> catches catch_clause .)
    SEMICOLON       reduce using rule 296 (catches -> catches catch_clause .)
    SWITCH          reduce using rule 296 (catches -> catches catch_clause .)
    DO              reduce using rule 296 (catches -> catches catch_clause .)
    BREAK           reduce using rule 296 (catches -> catches catch_clause .)
    CONTINUE        reduce using rule 296 (catches -> catches catch_clause .)
    RETURN          reduce using rule 296 (catches -> catches catch_clause .)
    SYNCHRONIZED    reduce using rule 296 (catches -> catches catch_clause .)
    THROW           reduce using rule 296 (catches -> catches catch_clause .)
    TRY             reduce using rule 296 (catches -> catches catch_clause .)
    IDENT           reduce using rule 296 (catches -> catches catch_clause .)
    BOOLEAN         reduce using rule 296 (catches -> catches catch_clause .)
    VOID            reduce using rule 296 (catches -> catches catch_clause .)
    BYTE            reduce using rule 296 (catches -> catches catch_clause .)
    SHORT           reduce using rule 296 (catches -> catches catch_clause .)
    INT             reduce using rule 296 (catches -> catches catch_clause .)
    LONG            reduce using rule 296 (catches -> catches catch_clause .)
    CHAR            reduce using rule 296 (catches -> catches catch_clause .)
    FLOAT           reduce using rule 296 (catches -> catches catch_clause .)
    DOUBLE          reduce using rule 296 (catches -> catches catch_clause .)
    PUBLIC          reduce using rule 296 (catches -> catches catch_clause .)
    PROTECTED       reduce using rule 296 (catches -> catches catch_clause .)
    PRIVATE         reduce using rule 296 (catches -> catches catch_clause .)
    STATIC          reduce using rule 296 (catches -> catches catch_clause .)
    ABSTRACT        reduce using rule 296 (catches -> catches catch_clause .)
    FINAL           reduce using rule 296 (catches -> catches catch_clause .)
    NATIVE          reduce using rule 296 (catches -> catches catch_clause .)
    TRANSIENT       reduce using rule 296 (catches -> catches catch_clause .)
    VOLATILE        reduce using rule 296 (catches -> catches catch_clause .)
    STRICTFP        reduce using rule 296 (catches -> catches catch_clause .)
    THIS            reduce using rule 296 (catches -> catches catch_clause .)
    SUPER           reduce using rule 296 (catches -> catches catch_clause .)
    INC             reduce using rule 296 (catches -> catches catch_clause .)
    DEC             reduce using rule 296 (catches -> catches catch_clause .)
    NEW             reduce using rule 296 (catches -> catches catch_clause .)
    LSS             reduce using rule 296 (catches -> catches catch_clause .)
    LPAREN          reduce using rule 296 (catches -> catches catch_clause .)
    ATRATE          reduce using rule 296 (catches -> catches catch_clause .)
    HEX_LIT         reduce using rule 296 (catches -> catches catch_clause .)
    OCTAL_LIT       reduce using rule 296 (catches -> catches catch_clause .)
    BINARY_LIT      reduce using rule 296 (catches -> catches catch_clause .)
    DECIMAL_LIT     reduce using rule 296 (catches -> catches catch_clause .)
    FLOAT_HEX_LIT   reduce using rule 296 (catches -> catches catch_clause .)
    FLOAT_DEC_LIT   reduce using rule 296 (catches -> catches catch_clause .)
    CHAR_LIT        reduce using rule 296 (catches -> catches catch_clause .)
    STRING_LIT      reduce using rule 296 (catches -> catches catch_clause .)
    BOOL_LIT        reduce using rule 296 (catches -> catches catch_clause .)
    NULL_LIT        reduce using rule 296 (catches -> catches catch_clause .)
    CLASS           reduce using rule 296 (catches -> catches catch_clause .)
    INTERFACE       reduce using rule 296 (catches -> catches catch_clause .)
    RBRACE          reduce using rule 296 (catches -> catches catch_clause .)
    CASE            reduce using rule 296 (catches -> catches catch_clause .)
    DEFAULT         reduce using rule 296 (catches -> catches catch_clause .)
    FINALLY         reduce using rule 296 (catches -> catches catch_clause .)
    ELSE            reduce using rule 296 (catches -> catches catch_clause .)


state 726

    (293) try_statement -> TRY try_block catches_opt finally .

    $end            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    WHILE           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    IF              reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    FOR             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    LBRACE          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    ASSERT          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    SEMICOLON       reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    SWITCH          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    DO              reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    BREAK           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    CONTINUE        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    RETURN          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    SYNCHRONIZED    reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    THROW           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    TRY             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    IDENT           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    BOOLEAN         reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    VOID            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    BYTE            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    SHORT           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    INT             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    LONG            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    CHAR            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    FLOAT           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    DOUBLE          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    PUBLIC          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    PROTECTED       reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    PRIVATE         reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    STATIC          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    ABSTRACT        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    FINAL           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    NATIVE          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    TRANSIENT       reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    VOLATILE        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    STRICTFP        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    THIS            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    SUPER           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    INC             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    DEC             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    NEW             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    LSS             reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    LPAREN          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    ATRATE          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    HEX_LIT         reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    OCTAL_LIT       reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    BINARY_LIT      reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    DECIMAL_LIT     reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    FLOAT_HEX_LIT   reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    FLOAT_DEC_LIT   reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    CHAR_LIT        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    STRING_LIT      reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    BOOL_LIT        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    NULL_LIT        reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    CLASS           reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    INTERFACE       reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    RBRACE          reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    CASE            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    DEFAULT         reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)
    ELSE            reduce using rule 293 (try_statement -> TRY try_block catches_opt finally .)


state 727

    (314) finally -> FINALLY . block
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE

    LBRACE          shift and go to state 153

    block                          shift and go to state 845

state 728

    (299) catch_clause -> CATCH LPAREN . catch_formal_parameter RPAREN block
    (300) catch_formal_parameter -> . modifiers_opt catch_type variable_declarator_id
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    catch_formal_parameter         shift and go to state 846
    modifiers_opt                  shift and go to state 847
    modifiers                      shift and go to state 188
    empty                          shift and go to state 150
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 729

    (304) try_statement_with_resources -> TRY resource_specification try_block catches_opt .
    (305) try_statement_with_resources -> TRY resource_specification try_block catches_opt . finally
    (314) finally -> . FINALLY block

    $end            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    WHILE           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    IF              reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FOR             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    LBRACE          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ASSERT          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SEMICOLON       reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SWITCH          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DO              reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BREAK           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CONTINUE        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    RETURN          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SYNCHRONIZED    reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    THROW           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    TRY             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    IDENT           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BOOLEAN         reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    VOID            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BYTE            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SHORT           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    INT             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    LONG            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CHAR            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FLOAT           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DOUBLE          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PUBLIC          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PROTECTED       reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PRIVATE         reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    STATIC          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ABSTRACT        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FINAL           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NATIVE          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    TRANSIENT       reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    VOLATILE        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    STRICTFP        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    THIS            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SUPER           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    INC             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DEC             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NEW             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    LSS             reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    LPAREN          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ATRATE          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    HEX_LIT         reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    OCTAL_LIT       reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BINARY_LIT      reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DECIMAL_LIT     reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FLOAT_HEX_LIT   reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FLOAT_DEC_LIT   reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CHAR_LIT        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    STRING_LIT      reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BOOL_LIT        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NULL_LIT        reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CLASS           reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    INTERFACE       reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    RBRACE          reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CASE            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DEFAULT         reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ELSE            reduce using rule 304 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FINALLY         shift and go to state 727

    finally                        shift and go to state 848

state 730

    (297) catches_opt -> catches .
    (296) catches -> catches . catch_clause
    (299) catch_clause -> . CATCH LPAREN catch_formal_parameter RPAREN block

    FINALLY         reduce using rule 297 (catches_opt -> catches .)
    $end            reduce using rule 297 (catches_opt -> catches .)
    WHILE           reduce using rule 297 (catches_opt -> catches .)
    IF              reduce using rule 297 (catches_opt -> catches .)
    FOR             reduce using rule 297 (catches_opt -> catches .)
    LBRACE          reduce using rule 297 (catches_opt -> catches .)
    ASSERT          reduce using rule 297 (catches_opt -> catches .)
    SEMICOLON       reduce using rule 297 (catches_opt -> catches .)
    SWITCH          reduce using rule 297 (catches_opt -> catches .)
    DO              reduce using rule 297 (catches_opt -> catches .)
    BREAK           reduce using rule 297 (catches_opt -> catches .)
    CONTINUE        reduce using rule 297 (catches_opt -> catches .)
    RETURN          reduce using rule 297 (catches_opt -> catches .)
    SYNCHRONIZED    reduce using rule 297 (catches_opt -> catches .)
    THROW           reduce using rule 297 (catches_opt -> catches .)
    TRY             reduce using rule 297 (catches_opt -> catches .)
    IDENT           reduce using rule 297 (catches_opt -> catches .)
    BOOLEAN         reduce using rule 297 (catches_opt -> catches .)
    VOID            reduce using rule 297 (catches_opt -> catches .)
    BYTE            reduce using rule 297 (catches_opt -> catches .)
    SHORT           reduce using rule 297 (catches_opt -> catches .)
    INT             reduce using rule 297 (catches_opt -> catches .)
    LONG            reduce using rule 297 (catches_opt -> catches .)
    CHAR            reduce using rule 297 (catches_opt -> catches .)
    FLOAT           reduce using rule 297 (catches_opt -> catches .)
    DOUBLE          reduce using rule 297 (catches_opt -> catches .)
    PUBLIC          reduce using rule 297 (catches_opt -> catches .)
    PROTECTED       reduce using rule 297 (catches_opt -> catches .)
    PRIVATE         reduce using rule 297 (catches_opt -> catches .)
    STATIC          reduce using rule 297 (catches_opt -> catches .)
    ABSTRACT        reduce using rule 297 (catches_opt -> catches .)
    FINAL           reduce using rule 297 (catches_opt -> catches .)
    NATIVE          reduce using rule 297 (catches_opt -> catches .)
    TRANSIENT       reduce using rule 297 (catches_opt -> catches .)
    VOLATILE        reduce using rule 297 (catches_opt -> catches .)
    STRICTFP        reduce using rule 297 (catches_opt -> catches .)
    THIS            reduce using rule 297 (catches_opt -> catches .)
    SUPER           reduce using rule 297 (catches_opt -> catches .)
    INC             reduce using rule 297 (catches_opt -> catches .)
    DEC             reduce using rule 297 (catches_opt -> catches .)
    NEW             reduce using rule 297 (catches_opt -> catches .)
    LSS             reduce using rule 297 (catches_opt -> catches .)
    LPAREN          reduce using rule 297 (catches_opt -> catches .)
    ATRATE          reduce using rule 297 (catches_opt -> catches .)
    HEX_LIT         reduce using rule 297 (catches_opt -> catches .)
    OCTAL_LIT       reduce using rule 297 (catches_opt -> catches .)
    BINARY_LIT      reduce using rule 297 (catches_opt -> catches .)
    DECIMAL_LIT     reduce using rule 297 (catches_opt -> catches .)
    FLOAT_HEX_LIT   reduce using rule 297 (catches_opt -> catches .)
    FLOAT_DEC_LIT   reduce using rule 297 (catches_opt -> catches .)
    CHAR_LIT        reduce using rule 297 (catches_opt -> catches .)
    STRING_LIT      reduce using rule 297 (catches_opt -> catches .)
    BOOL_LIT        reduce using rule 297 (catches_opt -> catches .)
    NULL_LIT        reduce using rule 297 (catches_opt -> catches .)
    CLASS           reduce using rule 297 (catches_opt -> catches .)
    INTERFACE       reduce using rule 297 (catches_opt -> catches .)
    RBRACE          reduce using rule 297 (catches_opt -> catches .)
    CASE            reduce using rule 297 (catches_opt -> catches .)
    DEFAULT         reduce using rule 297 (catches_opt -> catches .)
    ELSE            reduce using rule 297 (catches_opt -> catches .)
    CATCH           shift and go to state 558

    catch_clause                   shift and go to state 725

state 731

    (306) resource_specification -> LPAREN resources semi_opt . RPAREN

    RPAREN          shift and go to state 849


state 732

    (310) resources -> resources trailing_semicolon . resource
    (312) resource -> . type variable_declarator_id ASSIGN variable_initializer
    (313) resource -> . modifiers type variable_declarator_id ASSIGN variable_initializer
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (548) annotation_name -> . ATRATE name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    IDENT           shift and go to state 196
    ATRATE          shift and go to state 47

    resource                       shift and go to state 850
    type                           shift and go to state 562
    modifiers                      shift and go to state 563
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45

state 733

    (307) semi_opt -> SEMICOLON .
    (311) trailing_semicolon -> SEMICOLON .

    RPAREN          reduce using rule 307 (semi_opt -> SEMICOLON .)
    BOOLEAN         reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    VOID            reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    BYTE            reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    SHORT           reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    INT             reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    LONG            reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    CHAR            reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    FLOAT           reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    DOUBLE          reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    PUBLIC          reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    PROTECTED       reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    PRIVATE         reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    STATIC          reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    ABSTRACT        reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    FINAL           reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    NATIVE          reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    SYNCHRONIZED    reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    TRANSIENT       reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    VOLATILE        reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    STRICTFP        reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    IDENT           reduce using rule 311 (trailing_semicolon -> SEMICOLON .)
    ATRATE          reduce using rule 311 (trailing_semicolon -> SEMICOLON .)


state 734

    (308) semi_opt -> empty .

    RPAREN          reduce using rule 308 (semi_opt -> empty .)


state 735

    (312) resource -> type variable_declarator_id . ASSIGN variable_initializer

    ASSIGN          shift and go to state 851


state 736

    (313) resource -> modifiers type . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarator_id         shift and go to state 852

state 737

    (259) enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .

    IF              reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    WHILE           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    FOR             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    LBRACE          reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    ASSERT          reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    SEMICOLON       reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    SWITCH          reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    DO              reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    BREAK           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    CONTINUE        reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    RETURN          reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    SYNCHRONIZED    reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    THROW           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    TRY             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    IDENT           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    THIS            reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    SUPER           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    INC             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    DEC             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    NEW             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    LSS             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    LPAREN          reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    HEX_LIT         reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    OCTAL_LIT       reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    BINARY_LIT      reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    DECIMAL_LIT     reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    FLOAT_HEX_LIT   reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    FLOAT_DEC_LIT   reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    CHAR_LIT        reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    STRING_LIT      reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    BOOL_LIT        reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    NULL_LIT        reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    BOOLEAN         reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    VOID            reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    BYTE            reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    SHORT           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    INT             reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    LONG            reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    CHAR            reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    FLOAT           reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)
    DOUBLE          reduce using rule 259 (enhanced_for_statement_header -> enhanced_for_statement_header_init COLON expression RPAREN .)


state 738

    (315) explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 853


state 739

    (316) explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 854


state 740

    (317) explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 855


state 741

    (318) explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 856


state 742

    (319) explicit_constructor_invocation -> primary PERIOD SUPER LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 857
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 743

    (321) explicit_constructor_invocation -> primary PERIOD THIS LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 858
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 744

    (323) explicit_constructor_invocation -> primary PERIOD type_arguments SUPER . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 859


state 745

    (325) explicit_constructor_invocation -> primary PERIOD type_arguments THIS . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 860


state 746

    (320) explicit_constructor_invocation -> name PERIOD SUPER LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    argument_list_opt              shift and go to state 861
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 747

    (322) explicit_constructor_invocation -> name PERIOD THIS LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    argument_list_opt              shift and go to state 862
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 748

    (324) explicit_constructor_invocation -> name PERIOD type_arguments SUPER . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 863


state 749

    (326) explicit_constructor_invocation -> name PERIOD type_arguments THIS . LPAREN argument_list_opt RPAREN SEMICOLON

    LPAREN          shift and go to state 864


state 750

    (402) array_type -> generic_type PERIOD name dims .

    IDENT           reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    GTR             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    COMMA           reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    INSTANCEOF      reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    EQL             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    NEQ             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    AND             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    XOR             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    OR              reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    LAND            reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    QUES            reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    LOR             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    $end            reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    SEMICOLON       reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    COLON           reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    RPAREN          reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    RBRACK          reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    RBRACE          reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    SHR             reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    ELLIPSIS        reduce using rule 402 (array_type -> generic_type PERIOD name dims .)
    SHR_UN          reduce using rule 402 (array_type -> generic_type PERIOD name dims .)


state 751

    (405) type_argument_list1 -> type_argument_list COMMA type_argument1 .

    SUPER           reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    THIS            reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    IDENT           reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    PERIOD          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    LBRACK          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    LPAREN          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    COMMA           reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    LBRACE          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    INSTANCEOF      reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    EQL             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    NEQ             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    AND             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    XOR             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    OR              reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    LAND            reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    QUES            reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    LOR             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    $end            reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    SEMICOLON       reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    COLON           reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    RPAREN          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    RBRACK          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    RBRACE          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    ELLIPSIS        reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    GTR             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    SHR             reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)
    SHR_UN          reduce using rule 405 (type_argument_list1 -> type_argument_list COMMA type_argument1 .)


state 752

    (407) type_argument_list -> type_argument_list COMMA type_argument .

    COMMA           reduce using rule 407 (type_argument_list -> type_argument_list COMMA type_argument .)


state 753

    (408) type_argument -> reference_type .
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 408 (type_argument -> reference_type .)
    GTR             shift and go to state 580


state 754

    (419) reference_type2 -> class_or_interface . LSS type_argument_list3
    (413) reference_type1 -> class_or_interface . LSS type_argument_list2
    (392) class_or_interface_type -> class_or_interface .
    (397) generic_type -> class_or_interface . type_arguments
    (398) generic_type -> class_or_interface . LSS GTR
    (403) type_arguments -> . LSS type_argument_list1

    LSS             shift and go to state 865
    SHR             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    GTR             reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    COMMA           reduce using rule 392 (class_or_interface_type -> class_or_interface .)
    SHR_UN          reduce using rule 392 (class_or_interface_type -> class_or_interface .)

    type_arguments                 shift and go to state 353

state 755

    (413) reference_type1 -> class_or_interface LSS type_argument_list2 .

    SUPER           reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    THIS            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    IDENT           reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    PERIOD          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    LBRACK          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    LPAREN          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    COMMA           reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    LBRACE          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    INSTANCEOF      reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    EQL             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    NEQ             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    AND             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    XOR             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    OR              reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    LAND            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    QUES            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    LOR             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    $end            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    SEMICOLON       reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    COLON           reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    RPAREN          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    RBRACK          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    RBRACE          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    ELLIPSIS        reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    GTR             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    EXTENDS         reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    BOOLEAN         reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    VOID            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    BYTE            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    SHORT           reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    INT             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    LONG            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    CHAR            reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    FLOAT           reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    DOUBLE          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    SHR             reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)
    SHR_UN          reduce using rule 413 (reference_type1 -> class_or_interface LSS type_argument_list2 .)


state 756

    (414) type_argument_list2 -> type_argument2 .

    SUPER           reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    THIS            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    IDENT           reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    PERIOD          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    LBRACK          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    LPAREN          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    COMMA           reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    LBRACE          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    INSTANCEOF      reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    EQL             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    NEQ             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    AND             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    XOR             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    OR              reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    LAND            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    QUES            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    LOR             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    $end            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    SEMICOLON       reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    COLON           reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    RPAREN          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    RBRACK          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    RBRACE          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    ELLIPSIS        reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    GTR             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    EXTENDS         reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    BOOLEAN         reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    VOID            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    BYTE            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    SHORT           reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    INT             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    LONG            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    CHAR            reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    FLOAT           reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    DOUBLE          reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    SHR             reduce using rule 414 (type_argument_list2 -> type_argument2 .)
    SHR_UN          reduce using rule 414 (type_argument_list2 -> type_argument2 .)


state 757

    (415) type_argument_list2 -> type_argument_list . COMMA type_argument2
    (405) type_argument_list1 -> type_argument_list . COMMA type_argument1
    (407) type_argument_list -> type_argument_list . COMMA type_argument

    COMMA           shift and go to state 866


state 758

    (416) type_argument2 -> reference_type2 .

    SUPER           reduce using rule 416 (type_argument2 -> reference_type2 .)
    THIS            reduce using rule 416 (type_argument2 -> reference_type2 .)
    IDENT           reduce using rule 416 (type_argument2 -> reference_type2 .)
    PERIOD          reduce using rule 416 (type_argument2 -> reference_type2 .)
    LBRACK          reduce using rule 416 (type_argument2 -> reference_type2 .)
    LPAREN          reduce using rule 416 (type_argument2 -> reference_type2 .)
    COMMA           reduce using rule 416 (type_argument2 -> reference_type2 .)
    LBRACE          reduce using rule 416 (type_argument2 -> reference_type2 .)
    INSTANCEOF      reduce using rule 416 (type_argument2 -> reference_type2 .)
    EQL             reduce using rule 416 (type_argument2 -> reference_type2 .)
    NEQ             reduce using rule 416 (type_argument2 -> reference_type2 .)
    AND             reduce using rule 416 (type_argument2 -> reference_type2 .)
    XOR             reduce using rule 416 (type_argument2 -> reference_type2 .)
    OR              reduce using rule 416 (type_argument2 -> reference_type2 .)
    LAND            reduce using rule 416 (type_argument2 -> reference_type2 .)
    QUES            reduce using rule 416 (type_argument2 -> reference_type2 .)
    LOR             reduce using rule 416 (type_argument2 -> reference_type2 .)
    $end            reduce using rule 416 (type_argument2 -> reference_type2 .)
    SEMICOLON       reduce using rule 416 (type_argument2 -> reference_type2 .)
    COLON           reduce using rule 416 (type_argument2 -> reference_type2 .)
    RPAREN          reduce using rule 416 (type_argument2 -> reference_type2 .)
    RBRACK          reduce using rule 416 (type_argument2 -> reference_type2 .)
    RBRACE          reduce using rule 416 (type_argument2 -> reference_type2 .)
    ELLIPSIS        reduce using rule 416 (type_argument2 -> reference_type2 .)
    GTR             reduce using rule 416 (type_argument2 -> reference_type2 .)
    EXTENDS         reduce using rule 416 (type_argument2 -> reference_type2 .)
    BOOLEAN         reduce using rule 416 (type_argument2 -> reference_type2 .)
    VOID            reduce using rule 416 (type_argument2 -> reference_type2 .)
    BYTE            reduce using rule 416 (type_argument2 -> reference_type2 .)
    SHORT           reduce using rule 416 (type_argument2 -> reference_type2 .)
    INT             reduce using rule 416 (type_argument2 -> reference_type2 .)
    LONG            reduce using rule 416 (type_argument2 -> reference_type2 .)
    CHAR            reduce using rule 416 (type_argument2 -> reference_type2 .)
    FLOAT           reduce using rule 416 (type_argument2 -> reference_type2 .)
    DOUBLE          reduce using rule 416 (type_argument2 -> reference_type2 .)
    SHR             reduce using rule 416 (type_argument2 -> reference_type2 .)
    SHR_UN          reduce using rule 416 (type_argument2 -> reference_type2 .)


state 759

    (417) type_argument2 -> wildcard2 .

    SUPER           reduce using rule 417 (type_argument2 -> wildcard2 .)
    THIS            reduce using rule 417 (type_argument2 -> wildcard2 .)
    IDENT           reduce using rule 417 (type_argument2 -> wildcard2 .)
    PERIOD          reduce using rule 417 (type_argument2 -> wildcard2 .)
    LBRACK          reduce using rule 417 (type_argument2 -> wildcard2 .)
    LPAREN          reduce using rule 417 (type_argument2 -> wildcard2 .)
    COMMA           reduce using rule 417 (type_argument2 -> wildcard2 .)
    LBRACE          reduce using rule 417 (type_argument2 -> wildcard2 .)
    INSTANCEOF      reduce using rule 417 (type_argument2 -> wildcard2 .)
    EQL             reduce using rule 417 (type_argument2 -> wildcard2 .)
    NEQ             reduce using rule 417 (type_argument2 -> wildcard2 .)
    AND             reduce using rule 417 (type_argument2 -> wildcard2 .)
    XOR             reduce using rule 417 (type_argument2 -> wildcard2 .)
    OR              reduce using rule 417 (type_argument2 -> wildcard2 .)
    LAND            reduce using rule 417 (type_argument2 -> wildcard2 .)
    QUES            reduce using rule 417 (type_argument2 -> wildcard2 .)
    LOR             reduce using rule 417 (type_argument2 -> wildcard2 .)
    $end            reduce using rule 417 (type_argument2 -> wildcard2 .)
    SEMICOLON       reduce using rule 417 (type_argument2 -> wildcard2 .)
    COLON           reduce using rule 417 (type_argument2 -> wildcard2 .)
    RPAREN          reduce using rule 417 (type_argument2 -> wildcard2 .)
    RBRACK          reduce using rule 417 (type_argument2 -> wildcard2 .)
    RBRACE          reduce using rule 417 (type_argument2 -> wildcard2 .)
    ELLIPSIS        reduce using rule 417 (type_argument2 -> wildcard2 .)
    GTR             reduce using rule 417 (type_argument2 -> wildcard2 .)
    EXTENDS         reduce using rule 417 (type_argument2 -> wildcard2 .)
    BOOLEAN         reduce using rule 417 (type_argument2 -> wildcard2 .)
    VOID            reduce using rule 417 (type_argument2 -> wildcard2 .)
    BYTE            reduce using rule 417 (type_argument2 -> wildcard2 .)
    SHORT           reduce using rule 417 (type_argument2 -> wildcard2 .)
    INT             reduce using rule 417 (type_argument2 -> wildcard2 .)
    LONG            reduce using rule 417 (type_argument2 -> wildcard2 .)
    CHAR            reduce using rule 417 (type_argument2 -> wildcard2 .)
    FLOAT           reduce using rule 417 (type_argument2 -> wildcard2 .)
    DOUBLE          reduce using rule 417 (type_argument2 -> wildcard2 .)
    SHR             reduce using rule 417 (type_argument2 -> wildcard2 .)
    SHR_UN          reduce using rule 417 (type_argument2 -> wildcard2 .)


state 760

    (418) reference_type2 -> reference_type . SHR
    (408) type_argument -> reference_type .
    (412) reference_type1 -> reference_type . GTR

    SHR             shift and go to state 867
    COMMA           reduce using rule 408 (type_argument -> reference_type .)
    GTR             shift and go to state 580


state 761

    (433) wildcard2 -> QUES . SHR
    (434) wildcard2 -> QUES . wildcard_bounds2
    (429) wildcard1 -> QUES . GTR
    (430) wildcard1 -> QUES . wildcard_bounds1
    (425) wildcard -> QUES .
    (426) wildcard -> QUES . wildcard_bounds
    (435) wildcard_bounds2 -> . EXTENDS reference_type2
    (436) wildcard_bounds2 -> . SUPER reference_type2
    (431) wildcard_bounds1 -> . EXTENDS reference_type1
    (432) wildcard_bounds1 -> . SUPER reference_type1
    (427) wildcard_bounds -> . EXTENDS reference_type
    (428) wildcard_bounds -> . SUPER reference_type

    SHR             shift and go to state 868
    GTR             shift and go to state 582
    COMMA           reduce using rule 425 (wildcard -> QUES .)
    EXTENDS         shift and go to state 870
    SUPER           shift and go to state 871

    wildcard_bounds2               shift and go to state 869
    wildcard_bounds1               shift and go to state 583
    wildcard_bounds                shift and go to state 584

state 762

    (431) wildcard_bounds1 -> EXTENDS reference_type1 .

    SUPER           reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    THIS            reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    IDENT           reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    PERIOD          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    LBRACK          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    LPAREN          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    COMMA           reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    LBRACE          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    INSTANCEOF      reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    EQL             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    NEQ             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    AND             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    XOR             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    OR              reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    LAND            reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    QUES            reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    LOR             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    $end            reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    SEMICOLON       reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    COLON           reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    RPAREN          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    RBRACK          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    RBRACE          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ELLIPSIS        reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    GTR             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    SHR             reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    SHR_UN          reduce using rule 431 (wildcard_bounds1 -> EXTENDS reference_type1 .)


state 763

    (427) wildcard_bounds -> EXTENDS reference_type .
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 427 (wildcard_bounds -> EXTENDS reference_type .)
    GTR             shift and go to state 580


state 764

    (432) wildcard_bounds1 -> SUPER reference_type1 .

    SUPER           reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    THIS            reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    IDENT           reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    PERIOD          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    LBRACK          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    LPAREN          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    COMMA           reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    LBRACE          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    INSTANCEOF      reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    EQL             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    NEQ             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    AND             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    XOR             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    OR              reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    LAND            reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    QUES            reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    LOR             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    $end            reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    SEMICOLON       reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    COLON           reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    RPAREN          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    RBRACK          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    RBRACE          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    ELLIPSIS        reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    GTR             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    SHR             reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)
    SHR_UN          reduce using rule 432 (wildcard_bounds1 -> SUPER reference_type1 .)


state 765

    (428) wildcard_bounds -> SUPER reference_type .
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 428 (wildcard_bounds -> SUPER reference_type .)
    GTR             shift and go to state 580


state 766

    (396) class_or_interface -> generic_type PERIOD name .
    (402) array_type -> generic_type PERIOD name . dims
    (352) qualified_name -> name . PERIOD simple_name
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LSS             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    GTR             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    COMMA           reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    SHR             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    AND             reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    SHR_UN          reduce using rule 396 (class_or_interface -> generic_type PERIOD name .)
    PERIOD          shift and go to state 372
    LBRACK          shift and go to state 279

    dims                           shift and go to state 750
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 767

    (575) type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .

    SEMICOLON       reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    IMPORT          reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    PUBLIC          reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    PROTECTED       reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    PRIVATE         reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    STATIC          reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    ABSTRACT        reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    FINAL           reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    NATIVE          reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    SYNCHRONIZED    reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    TRANSIENT       reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    VOLATILE        reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    STRICTFP        reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    ATRATE          reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    CLASS           reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    INTERFACE       reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)
    $end            reduce using rule 575 (type_import_on_demand_declaration -> IMPORT name PERIOD MUL SEMICOLON .)


state 768

    (577) static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL . SEMICOLON

    SEMICOLON       shift and go to state 872


state 769

    (470) class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope . RBRACE

    RBRACE          shift and go to state 873


state 770

    (474) class_body_declarations -> class_body_declarations class_body_declaration .

    SEMICOLON       reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    STATIC          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    LBRACE          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    PUBLIC          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    PROTECTED       reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    PRIVATE         reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    ABSTRACT        reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    FINAL           reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    NATIVE          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    SYNCHRONIZED    reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    TRANSIENT       reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    VOLATILE        reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    STRICTFP        reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    ATRATE          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    IDENT           reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    CLASS           reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    INTERFACE       reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    LSS             reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    BOOLEAN         reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    VOID            reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    BYTE            reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    SHORT           reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    INT             reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    LONG            reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    CHAR            reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    FLOAT           reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    DOUBLE          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)
    RBRACE          reduce using rule 474 (class_body_declarations -> class_body_declarations class_body_declaration .)


state 771

    (485) static_initializer -> STATIC block .

    SEMICOLON       reduce using rule 485 (static_initializer -> STATIC block .)
    STATIC          reduce using rule 485 (static_initializer -> STATIC block .)
    LBRACE          reduce using rule 485 (static_initializer -> STATIC block .)
    PUBLIC          reduce using rule 485 (static_initializer -> STATIC block .)
    PROTECTED       reduce using rule 485 (static_initializer -> STATIC block .)
    PRIVATE         reduce using rule 485 (static_initializer -> STATIC block .)
    ABSTRACT        reduce using rule 485 (static_initializer -> STATIC block .)
    FINAL           reduce using rule 485 (static_initializer -> STATIC block .)
    NATIVE          reduce using rule 485 (static_initializer -> STATIC block .)
    SYNCHRONIZED    reduce using rule 485 (static_initializer -> STATIC block .)
    TRANSIENT       reduce using rule 485 (static_initializer -> STATIC block .)
    VOLATILE        reduce using rule 485 (static_initializer -> STATIC block .)
    STRICTFP        reduce using rule 485 (static_initializer -> STATIC block .)
    ATRATE          reduce using rule 485 (static_initializer -> STATIC block .)
    IDENT           reduce using rule 485 (static_initializer -> STATIC block .)
    CLASS           reduce using rule 485 (static_initializer -> STATIC block .)
    INTERFACE       reduce using rule 485 (static_initializer -> STATIC block .)
    LSS             reduce using rule 485 (static_initializer -> STATIC block .)
    BOOLEAN         reduce using rule 485 (static_initializer -> STATIC block .)
    VOID            reduce using rule 485 (static_initializer -> STATIC block .)
    BYTE            reduce using rule 485 (static_initializer -> STATIC block .)
    SHORT           reduce using rule 485 (static_initializer -> STATIC block .)
    INT             reduce using rule 485 (static_initializer -> STATIC block .)
    LONG            reduce using rule 485 (static_initializer -> STATIC block .)
    CHAR            reduce using rule 485 (static_initializer -> STATIC block .)
    FLOAT           reduce using rule 485 (static_initializer -> STATIC block .)
    DOUBLE          reduce using rule 485 (static_initializer -> STATIC block .)
    RBRACE          reduce using rule 485 (static_initializer -> STATIC block .)


state 772

    (486) constructor_declaration -> constructor_header method_body .

    SEMICOLON       reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    STATIC          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    LBRACE          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    PUBLIC          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    PROTECTED       reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    PRIVATE         reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    ABSTRACT        reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    FINAL           reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    NATIVE          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    SYNCHRONIZED    reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    TRANSIENT       reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    VOLATILE        reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    STRICTFP        reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    ATRATE          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    IDENT           reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    CLASS           reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    INTERFACE       reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    LSS             reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    BOOLEAN         reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    VOID            reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    BYTE            reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    SHORT           reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    INT             reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    LONG            reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    CHAR            reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    FLOAT           reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    DOUBLE          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)
    RBRACE          reduce using rule 486 (constructor_declaration -> constructor_header method_body .)


state 773

    (502) method_body -> LBRACE . block_statements_opt dec_scope RBRACE
    (166) block_statements_opt -> . block_statements
    (167) block_statements_opt -> . empty
    (168) block_statements -> . block_statement
    (169) block_statements -> . block_statements block_statement
    (583) empty -> .
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    RBRACE          reduce using rule 583 (empty -> .)
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    block_statements_opt           shift and go to state 874
    block_statements               shift and go to state 542
    empty                          shift and go to state 543
    block_statement                shift and go to state 544
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 774

    (488) constructor_header_name -> modifiers_opt type_parameters . IDENT LPAREN
    (508) method_header_name -> modifiers_opt type_parameters . type IDENT LPAREN
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 875
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    type                           shift and go to state 781
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 775

    (489) constructor_header_name -> modifiers_opt IDENT . LPAREN
    (351) simple_name -> IDENT .

    LPAREN          shift and go to state 876
    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    IDENT           reduce using rule 351 (simple_name -> IDENT .)


state 776

    (504) method_declaration -> method_header method_body .

    SEMICOLON       reduce using rule 504 (method_declaration -> method_header method_body .)
    STATIC          reduce using rule 504 (method_declaration -> method_header method_body .)
    LBRACE          reduce using rule 504 (method_declaration -> method_header method_body .)
    PUBLIC          reduce using rule 504 (method_declaration -> method_header method_body .)
    PROTECTED       reduce using rule 504 (method_declaration -> method_header method_body .)
    PRIVATE         reduce using rule 504 (method_declaration -> method_header method_body .)
    ABSTRACT        reduce using rule 504 (method_declaration -> method_header method_body .)
    FINAL           reduce using rule 504 (method_declaration -> method_header method_body .)
    NATIVE          reduce using rule 504 (method_declaration -> method_header method_body .)
    SYNCHRONIZED    reduce using rule 504 (method_declaration -> method_header method_body .)
    TRANSIENT       reduce using rule 504 (method_declaration -> method_header method_body .)
    VOLATILE        reduce using rule 504 (method_declaration -> method_header method_body .)
    STRICTFP        reduce using rule 504 (method_declaration -> method_header method_body .)
    ATRATE          reduce using rule 504 (method_declaration -> method_header method_body .)
    IDENT           reduce using rule 504 (method_declaration -> method_header method_body .)
    CLASS           reduce using rule 504 (method_declaration -> method_header method_body .)
    INTERFACE       reduce using rule 504 (method_declaration -> method_header method_body .)
    LSS             reduce using rule 504 (method_declaration -> method_header method_body .)
    BOOLEAN         reduce using rule 504 (method_declaration -> method_header method_body .)
    VOID            reduce using rule 504 (method_declaration -> method_header method_body .)
    BYTE            reduce using rule 504 (method_declaration -> method_header method_body .)
    SHORT           reduce using rule 504 (method_declaration -> method_header method_body .)
    INT             reduce using rule 504 (method_declaration -> method_header method_body .)
    LONG            reduce using rule 504 (method_declaration -> method_header method_body .)
    CHAR            reduce using rule 504 (method_declaration -> method_header method_body .)
    FLOAT           reduce using rule 504 (method_declaration -> method_header method_body .)
    DOUBLE          reduce using rule 504 (method_declaration -> method_header method_body .)
    RBRACE          reduce using rule 504 (method_declaration -> method_header method_body .)


state 777

    (487) constructor_header -> constructor_header_name formal_parameter_list_opt . RPAREN method_header_throws_clause_opt

    RPAREN          shift and go to state 877


state 778

    (507) method_header -> method_header_name formal_parameter_list_opt . RPAREN method_header_extended_dims method_header_throws_clause_opt
    (506) method_header101 -> method_header_name formal_parameter_list_opt . RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope

    RPAREN          shift and go to state 878


state 779

    (484) field_declaration -> modifiers_opt type variable_declarators . SEMICOLON
    (178) variable_declarators -> variable_declarators . COMMA variable_declarator

    SEMICOLON       shift and go to state 879
    COMMA           shift and go to state 528


state 780

    (509) method_header_name -> modifiers_opt type IDENT . LPAREN
    (181) variable_declarator_id -> IDENT . dims_opt
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LPAREN          shift and go to state 880
    ASSIGN          reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 530
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 781

    (508) method_header_name -> modifiers_opt type_parameters type . IDENT LPAREN

    IDENT           shift and go to state 881


state 782

    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN . method_header_extended_dims method_header_throws_clause_opt dec_scope
    (510) method_header_extended_dims -> . dims_opt
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    THROWS          reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    method_header_extended_dims    shift and go to state 882
    dims_opt                       shift and go to state 883
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 783

    (493) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (494) formal_parameter -> . modifiers_opt type variable_declarator_id
    (495) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (583) empty -> .
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (548) annotation_name -> . ATRATE name

    BOOLEAN         reduce using rule 583 (empty -> .)
    VOID            reduce using rule 583 (empty -> .)
    BYTE            reduce using rule 583 (empty -> .)
    SHORT           reduce using rule 583 (empty -> .)
    INT             reduce using rule 583 (empty -> .)
    LONG            reduce using rule 583 (empty -> .)
    CHAR            reduce using rule 583 (empty -> .)
    FLOAT           reduce using rule 583 (empty -> .)
    DOUBLE          reduce using rule 583 (empty -> .)
    IDENT           reduce using rule 583 (empty -> .)
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    ATRATE          shift and go to state 47

    formal_parameter               shift and go to state 884
    modifiers_opt                  shift and go to state 620
    modifiers                      shift and go to state 188
    empty                          shift and go to state 150
    modifier                       shift and go to state 22
    annotation                     shift and go to state 37
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    annotation_name                shift and go to state 45

state 784

    (494) formal_parameter -> modifiers_opt type . variable_declarator_id
    (495) formal_parameter -> modifiers_opt type . ELLIPSIS variable_declarator_id
    (181) variable_declarator_id -> . IDENT dims_opt

    ELLIPSIS        shift and go to state 886
    IDENT           shift and go to state 313

    variable_declarator_id         shift and go to state 885

state 785

    (468) interface_type_list -> interface_type_list COMMA interface_type .

    COMMA           reduce using rule 468 (interface_type_list -> interface_type_list COMMA interface_type .)
    LBRACE          reduce using rule 468 (interface_type_list -> interface_type_list COMMA interface_type .)


state 786

    (452) type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .

    LBRACE          reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    EXTENDS         reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    BOOLEAN         reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    VOID            reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    BYTE            reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    SHORT           reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    INT             reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    LONG            reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    CHAR            reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    FLOAT           reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    DOUBLE          reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)
    IDENT           reduce using rule 452 (type_parameter_list1 -> type_parameter_list COMMA type_parameter1 .)


state 787

    (444) type_parameter_list -> type_parameter_list COMMA type_parameter .

    COMMA           reduce using rule 444 (type_parameter_list -> type_parameter_list COMMA type_parameter .)


state 788

    (454) type_parameter1 -> type_parameter_header EXTENDS reference_type1 .

    LBRACE          reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    EXTENDS         reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    BOOLEAN         reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    VOID            reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    BYTE            reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    SHORT           reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    INT             reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    LONG            reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    CHAR            reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    FLOAT           reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    DOUBLE          reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    IDENT           reduce using rule 454 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)


state 789

    (455) type_parameter1 -> type_parameter_header EXTENDS reference_type . additional_bound_list1
    (446) type_parameter -> type_parameter_header EXTENDS reference_type .
    (447) type_parameter -> type_parameter_header EXTENDS reference_type . additional_bound_list
    (412) reference_type1 -> reference_type . GTR
    (456) additional_bound_list1 -> . additional_bound1
    (457) additional_bound_list1 -> . additional_bound_list additional_bound1
    (448) additional_bound_list -> . additional_bound
    (449) additional_bound_list -> . additional_bound_list additional_bound
    (458) additional_bound1 -> . AND reference_type1
    (450) additional_bound -> . AND reference_type

    COMMA           reduce using rule 446 (type_parameter -> type_parameter_header EXTENDS reference_type .)
    GTR             shift and go to state 580
    AND             shift and go to state 891

    additional_bound_list1         shift and go to state 887
    additional_bound_list          shift and go to state 888
    additional_bound1              shift and go to state 889
    additional_bound               shift and go to state 890

state 790

    (552) member_value_pairs -> member_value_pairs COMMA member_value_pair .

    COMMA           reduce using rule 552 (member_value_pairs -> member_value_pairs COMMA member_value_pair .)
    RPAREN          reduce using rule 552 (member_value_pairs -> member_value_pairs COMMA member_value_pair .)


state 791

    (553) member_value_pair -> simple_name . ASSIGN member_value

    ASSIGN          shift and go to state 628


state 792

    (553) member_value_pair -> simple_name ASSIGN member_value .

    COMMA           reduce using rule 553 (member_value_pair -> simple_name ASSIGN member_value .)
    RPAREN          reduce using rule 553 (member_value_pair -> simple_name ASSIGN member_value .)


state 793

    (538) member_value_array_initializer -> LBRACE member_values COMMA . RBRACE
    (543) member_values -> member_values COMMA . member_value
    (534) member_value -> . conditional_expression_not_name
    (535) member_value -> . name
    (536) member_value -> . annotation
    (537) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name QUES expression COLON conditional_expression
    (24) conditional_expression_not_name -> . name QUES expression COLON conditional_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (538) member_value_array_initializer -> . LBRACE member_values COMMA RBRACE
    (539) member_value_array_initializer -> . LBRACE member_values RBRACE
    (540) member_value_array_initializer -> . LBRACE COMMA RBRACE
    (541) member_value_array_initializer -> . LBRACE RBRACE
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression
    (29) conditional_or_expression_not_name -> . name LOR marker_next_quad conditional_and_expression
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name LAND marker_next_quad inclusive_or_expression
    (548) annotation_name -> . ATRATE name
    (38) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (39) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name OR exclusive_or_expression
    (40) inclusive_or_expression_not_name -> . name OR exclusive_or_expression
    (43) exclusive_or_expression_not_name -> . and_expression_not_name
    (44) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name XOR and_expression
    (45) exclusive_or_expression_not_name -> . name XOR and_expression
    (48) and_expression_not_name -> . equality_expression_not_name
    (49) and_expression_not_name -> . and_expression_not_name AND equality_expression
    (50) and_expression_not_name -> . name AND equality_expression
    (54) equality_expression_not_name -> . instanceof_expression_not_name
    (55) equality_expression_not_name -> . equality_expression_not_name EQL instanceof_expression
    (56) equality_expression_not_name -> . name EQL instanceof_expression
    (57) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (58) equality_expression_not_name -> . name NEQ instanceof_expression
    (61) instanceof_expression_not_name -> . relational_expression_not_name
    (62) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (63) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (69) relational_expression_not_name -> . shift_expression_not_name
    (70) relational_expression_not_name -> . shift_expression_not_name LSS shift_expression
    (71) relational_expression_not_name -> . name LSS shift_expression
    (72) relational_expression_not_name -> . shift_expression_not_name GTR shift_expression
    (73) relational_expression_not_name -> . name GTR shift_expression
    (74) relational_expression_not_name -> . shift_expression_not_name GEQ shift_expression
    (75) relational_expression_not_name -> . name GEQ shift_expression
    (76) relational_expression_not_name -> . shift_expression_not_name LEQ shift_expression
    (77) relational_expression_not_name -> . name LEQ shift_expression
    (82) shift_expression_not_name -> . additive_expression_not_name
    (83) shift_expression_not_name -> . shift_expression_not_name SHL additive_expression
    (84) shift_expression_not_name -> . name SHL additive_expression
    (85) shift_expression_not_name -> . shift_expression_not_name SHR additive_expression
    (86) shift_expression_not_name -> . name SHR additive_expression
    (87) shift_expression_not_name -> . shift_expression_not_name SHR_UN additive_expression
    (88) shift_expression_not_name -> . name SHR_UN additive_expression
    (92) additive_expression_not_name -> . multiplicative_expression_not_name
    (93) additive_expression_not_name -> . additive_expression_not_name ADD multiplicative_expression
    (94) additive_expression_not_name -> . name ADD multiplicative_expression
    (95) additive_expression_not_name -> . additive_expression_not_name SUB multiplicative_expression
    (96) additive_expression_not_name -> . name SUB multiplicative_expression
    (101) multiplicative_expression_not_name -> . unary_expression_not_name
    (102) multiplicative_expression_not_name -> . multiplicative_expression_not_name MUL unary_expression
    (103) multiplicative_expression_not_name -> . name MUL unary_expression
    (104) multiplicative_expression_not_name -> . multiplicative_expression_not_name QUO unary_expression
    (105) multiplicative_expression_not_name -> . name QUO unary_expression
    (106) multiplicative_expression_not_name -> . multiplicative_expression_not_name REM unary_expression
    (107) multiplicative_expression_not_name -> . name REM unary_expression
    (113) unary_expression_not_name -> . pre_increment_expression
    (114) unary_expression_not_name -> . pre_decrement_expression
    (115) unary_expression_not_name -> . ADD unary_expression
    (116) unary_expression_not_name -> . SUB unary_expression
    (117) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (124) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (125) unary_expression_not_plus_minus_not_name -> . LNOT unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . NOT unary_expression
    (127) unary_expression_not_plus_minus_not_name -> . cast_expression
    (132) postfix_expression_not_name -> . primary
    (133) postfix_expression_not_name -> . post_increment_expression
    (134) postfix_expression_not_name -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    RBRACE          shift and go to state 892
    LBRACE          shift and go to state 411
    IDENT           shift and go to state 77
    ATRATE          shift and go to state 47
    ADD             shift and go to state 266
    SUB             shift and go to state 267
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 273
    NOT             shift and go to state 274
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    member_value                   shift and go to state 893
    conditional_expression_not_name shift and go to state 406
    name                           shift and go to state 407
    annotation                     shift and go to state 408
    member_value_array_initializer shift and go to state 409
    conditional_or_expression_not_name shift and go to state 252
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    conditional_and_expression_not_name shift and go to state 256
    annotation_name                shift and go to state 45
    inclusive_or_expression_not_name shift and go to state 257
    exclusive_or_expression_not_name shift and go to state 258
    and_expression_not_name        shift and go to state 259
    equality_expression_not_name   shift and go to state 260
    instanceof_expression_not_name shift and go to state 261
    relational_expression_not_name shift and go to state 262
    shift_expression_not_name      shift and go to state 263
    additive_expression_not_name   shift and go to state 264
    multiplicative_expression_not_name shift and go to state 265
    unary_expression_not_name      shift and go to state 268
    pre_increment_expression       shift and go to state 269
    pre_decrement_expression       shift and go to state 270
    unary_expression_not_plus_minus_not_name shift and go to state 271
    postfix_expression_not_name    shift and go to state 272
    cast_expression                shift and go to state 275
    primary                        shift and go to state 412
    post_increment_expression      shift and go to state 413
    post_decrement_expression      shift and go to state 414
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    postfix_expression             shift and go to state 415
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 794

    (539) member_value_array_initializer -> LBRACE member_values RBRACE .

    RPAREN          reduce using rule 539 (member_value_array_initializer -> LBRACE member_values RBRACE .)
    COMMA           reduce using rule 539 (member_value_array_initializer -> LBRACE member_values RBRACE .)
    RBRACE          reduce using rule 539 (member_value_array_initializer -> LBRACE member_values RBRACE .)


state 795

    (540) member_value_array_initializer -> LBRACE COMMA RBRACE .

    RPAREN          reduce using rule 540 (member_value_array_initializer -> LBRACE COMMA RBRACE .)
    COMMA           reduce using rule 540 (member_value_array_initializer -> LBRACE COMMA RBRACE .)
    RBRACE          reduce using rule 540 (member_value_array_initializer -> LBRACE COMMA RBRACE .)


state 796

    (21) conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .

    $end            reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)
    COLON           reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)
    RPAREN          reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)
    RBRACK          reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)
    COMMA           reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)
    RBRACE          reduce using rule 21 (conditional_expression -> conditional_or_expression QUES expression COLON conditional_expression .)


state 797

    (329) class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type . LPAREN argument_list_opt RPAREN class_body_opt

    LPAREN          shift and go to state 894


state 798

    (330) class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN . argument_list_opt RPAREN class_body_opt
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 895
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 799

    (222) method_invocation -> primary PERIOD type_arguments IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 896
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 800

    (225) method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 897


state 801

    (221) method_invocation -> name PERIOD type_arguments IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    argument_list_opt              shift and go to state 898
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 802

    (224) method_invocation -> name PERIOD IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 899


state 803

    (161) cast_expression -> LPAREN name type_arguments dims_opt RPAREN . unary_expression_not_plus_minus
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression_not_plus_minus shift and go to state 900
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 804

    (162) cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type . dims_opt RPAREN unary_expression_not_plus_minus
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    RPAREN          reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 901
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 805

    (164) cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .

    MUL             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    QUO             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    REM             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    ADD             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    SUB             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    SHL             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    SHR             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    SHR_UN          reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    GTR             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    LSS             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    GEQ             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    LEQ             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    EQL             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    NEQ             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    AND             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    XOR             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    OR              reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    LAND            reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    QUES            reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    LOR             reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    $end            reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    SEMICOLON       reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    COLON           reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    RBRACK          reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    COMMA           reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)
    RBRACE          reduce using rule 164 (cast_expression -> LPAREN name dims RPAREN unary_expression_not_plus_minus .)


state 806

    (24) conditional_expression_not_name -> name QUES expression COLON . conditional_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    conditional_expression         shift and go to state 902
    conditional_or_expression      shift and go to state 54
    conditional_and_expression     shift and go to state 59
    inclusive_or_expression        shift and go to state 66
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 807

    (29) conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . LAND marker_next_quad inclusive_or_expression

    QUES            reduce using rule 29 (conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression .)
    LOR             reduce using rule 29 (conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression .)
    RPAREN          reduce using rule 29 (conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression .)
    COMMA           reduce using rule 29 (conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression .)
    RBRACE          reduce using rule 29 (conditional_or_expression_not_name -> name LOR marker_next_quad conditional_and_expression .)
    LAND            shift and go to state 241


state 808

    (34) conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .
    (37) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 34 (conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .)
    QUES            reduce using rule 34 (conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .)
    LOR             reduce using rule 34 (conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .)
    RPAREN          reduce using rule 34 (conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .)
    COMMA           reduce using rule 34 (conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .)
    RBRACE          reduce using rule 34 (conditional_and_expression_not_name -> name LAND marker_next_quad inclusive_or_expression .)
    OR              shift and go to state 245


state 809

    (160) cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .

    MUL             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    QUO             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    REM             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    ADD             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    SUB             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    SHL             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    SHR             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    SHR_UN          reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    GTR             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    LSS             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    GEQ             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    LEQ             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    INSTANCEOF      reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    EQL             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    NEQ             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    AND             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    XOR             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    OR              reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    LAND            reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    QUES            reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    LOR             reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    $end            reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    SEMICOLON       reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    RPAREN          reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    COLON           reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    RBRACK          reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    COMMA           reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)
    RBRACE          reduce using rule 160 (cast_expression -> LPAREN primitive_type dims_opt RPAREN unary_expression .)


state 810

    (23) conditional_expression_not_name -> conditional_or_expression_not_name QUES expression COLON . conditional_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    conditional_expression         shift and go to state 903
    conditional_or_expression      shift and go to state 54
    conditional_and_expression     shift and go to state 59
    inclusive_or_expression        shift and go to state 66
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 811

    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . LAND marker_next_quad inclusive_or_expression

    QUES            reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression .)
    LOR             reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression .)
    RPAREN          reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression .)
    COMMA           reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression .)
    RBRACE          reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name LOR marker_next_quad conditional_and_expression .)
    LAND            shift and go to state 241


state 812

    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .
    (37) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .)
    QUES            reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .)
    LOR             reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .)
    RPAREN          reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .)
    COMMA           reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .)
    RBRACE          reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name LAND marker_next_quad inclusive_or_expression .)
    OR              shift and go to state 245


state 813

    (226) method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 904


state 814

    (223) method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN . argument_list_opt RPAREN
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    argument_list_opt              shift and go to state 905
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 815

    (215) array_initializer -> LBRACE comma_opt . RBRACE

    RBRACE          shift and go to state 906


state 816

    (216) array_initializer -> LBRACE variable_initializers . RBRACE
    (217) array_initializer -> LBRACE variable_initializers . COMMA RBRACE
    (219) variable_initializers -> variable_initializers . COMMA variable_initializer

    RBRACE          shift and go to state 907
    COMMA           shift and go to state 908


state 817

    (213) comma_opt -> COMMA .

    RBRACE          reduce using rule 213 (comma_opt -> COMMA .)


state 818

    (214) comma_opt -> empty .

    RBRACE          reduce using rule 214 (comma_opt -> empty .)


state 819

    (218) variable_initializers -> variable_initializer .

    RBRACE          reduce using rule 218 (variable_initializers -> variable_initializer .)
    COMMA           reduce using rule 218 (variable_initializers -> variable_initializer .)


state 820

    (345) dim_with_or_without_expr -> LBRACK expression RBRACK .

    LBRACE          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    LBRACK          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    PERIOD          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    INC             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    DEC             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    MUL_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    QUO_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    REM_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    ADD_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SUB_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SHL_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SHR_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SHR_UN_ASSIGN   reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    AND_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    OR_ASSIGN       reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    XOR_ASSIGN      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    MUL             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    QUO             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    REM             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    ADD             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SUB             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SHL             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SHR             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SHR_UN          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    GTR             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    LSS             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    GEQ             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    LEQ             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    INSTANCEOF      reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    EQL             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    NEQ             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    AND             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    XOR             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    OR              reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    LAND            reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    QUES            reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    LOR             reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    $end            reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    RPAREN          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    COLON           reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    RBRACK          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    COMMA           reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)
    RBRACE          reduce using rule 345 (dim_with_or_without_expr -> LBRACK expression RBRACK .)


state 821

    (327) class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt . RPAREN class_body_opt

    RPAREN          shift and go to state 909


state 822

    (328) class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN . class_body_opt
    (334) class_body_opt -> . class_body
    (335) class_body_opt -> . empty
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
    (583) empty -> .

    LBRACE          shift and go to state 200
    LBRACK          reduce using rule 583 (empty -> .)
    PERIOD          reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    MUL_ASSIGN      reduce using rule 583 (empty -> .)
    QUO_ASSIGN      reduce using rule 583 (empty -> .)
    REM_ASSIGN      reduce using rule 583 (empty -> .)
    ADD_ASSIGN      reduce using rule 583 (empty -> .)
    SUB_ASSIGN      reduce using rule 583 (empty -> .)
    SHL_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_UN_ASSIGN   reduce using rule 583 (empty -> .)
    AND_ASSIGN      reduce using rule 583 (empty -> .)
    OR_ASSIGN       reduce using rule 583 (empty -> .)
    XOR_ASSIGN      reduce using rule 583 (empty -> .)
    MUL             reduce using rule 583 (empty -> .)
    QUO             reduce using rule 583 (empty -> .)
    REM             reduce using rule 583 (empty -> .)
    ADD             reduce using rule 583 (empty -> .)
    SUB             reduce using rule 583 (empty -> .)
    SHL             reduce using rule 583 (empty -> .)
    SHR             reduce using rule 583 (empty -> .)
    SHR_UN          reduce using rule 583 (empty -> .)
    GTR             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    GEQ             reduce using rule 583 (empty -> .)
    LEQ             reduce using rule 583 (empty -> .)
    INSTANCEOF      reduce using rule 583 (empty -> .)
    EQL             reduce using rule 583 (empty -> .)
    NEQ             reduce using rule 583 (empty -> .)
    AND             reduce using rule 583 (empty -> .)
    XOR             reduce using rule 583 (empty -> .)
    OR              reduce using rule 583 (empty -> .)
    LAND            reduce using rule 583 (empty -> .)
    QUES            reduce using rule 583 (empty -> .)
    LOR             reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    COLON           reduce using rule 583 (empty -> .)
    RBRACK          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)

    class_body_opt                 shift and go to state 910
    class_body                     shift and go to state 911
    empty                          shift and go to state 912

state 823

    (533) argument_list -> argument_list COMMA expression .

    COMMA           reduce using rule 533 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 533 (argument_list -> argument_list COMMA expression .)


state 824

    (331) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt . RPAREN class_body_opt

    RPAREN          shift and go to state 913


state 825

    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN . argument_list_opt RPAREN class_body_opt
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    class_instance_creation_expression_name shift and go to state 89
    argument_list_opt              shift and go to state 914
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 826

    (230) if_then_statement -> IF LPAREN inc_scope expression RPAREN . label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN . label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (231) label_for_if1 -> .

    IF              reduce using rule 231 (label_for_if1 -> .)
    WHILE           reduce using rule 231 (label_for_if1 -> .)
    FOR             reduce using rule 231 (label_for_if1 -> .)
    LBRACE          reduce using rule 231 (label_for_if1 -> .)
    ASSERT          reduce using rule 231 (label_for_if1 -> .)
    SEMICOLON       reduce using rule 231 (label_for_if1 -> .)
    SWITCH          reduce using rule 231 (label_for_if1 -> .)
    DO              reduce using rule 231 (label_for_if1 -> .)
    BREAK           reduce using rule 231 (label_for_if1 -> .)
    CONTINUE        reduce using rule 231 (label_for_if1 -> .)
    RETURN          reduce using rule 231 (label_for_if1 -> .)
    SYNCHRONIZED    reduce using rule 231 (label_for_if1 -> .)
    THROW           reduce using rule 231 (label_for_if1 -> .)
    TRY             reduce using rule 231 (label_for_if1 -> .)
    IDENT           reduce using rule 231 (label_for_if1 -> .)
    THIS            reduce using rule 231 (label_for_if1 -> .)
    SUPER           reduce using rule 231 (label_for_if1 -> .)
    INC             reduce using rule 231 (label_for_if1 -> .)
    DEC             reduce using rule 231 (label_for_if1 -> .)
    NEW             reduce using rule 231 (label_for_if1 -> .)
    LSS             reduce using rule 231 (label_for_if1 -> .)
    LPAREN          reduce using rule 231 (label_for_if1 -> .)
    HEX_LIT         reduce using rule 231 (label_for_if1 -> .)
    OCTAL_LIT       reduce using rule 231 (label_for_if1 -> .)
    BINARY_LIT      reduce using rule 231 (label_for_if1 -> .)
    DECIMAL_LIT     reduce using rule 231 (label_for_if1 -> .)
    FLOAT_HEX_LIT   reduce using rule 231 (label_for_if1 -> .)
    FLOAT_DEC_LIT   reduce using rule 231 (label_for_if1 -> .)
    CHAR_LIT        reduce using rule 231 (label_for_if1 -> .)
    STRING_LIT      reduce using rule 231 (label_for_if1 -> .)
    BOOL_LIT        reduce using rule 231 (label_for_if1 -> .)
    NULL_LIT        reduce using rule 231 (label_for_if1 -> .)
    BOOLEAN         reduce using rule 231 (label_for_if1 -> .)
    VOID            reduce using rule 231 (label_for_if1 -> .)
    BYTE            reduce using rule 231 (label_for_if1 -> .)
    SHORT           reduce using rule 231 (label_for_if1 -> .)
    INT             reduce using rule 231 (label_for_if1 -> .)
    LONG            reduce using rule 231 (label_for_if1 -> .)
    CHAR            reduce using rule 231 (label_for_if1 -> .)
    FLOAT           reduce using rule 231 (label_for_if1 -> .)
    DOUBLE          reduce using rule 231 (label_for_if1 -> .)

    label_for_if1                  shift and go to state 915

state 827

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 . expression RPAREN label_for_while1 statement label_for_while2
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 916
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 828

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt . SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2

    SEMICOLON       shift and go to state 917


state 829

    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope type . IDENT dims_opt
    (175) local_variable_declaration -> type . variable_declarators
    (177) variable_declarators -> . variable_declarator
    (178) variable_declarators -> . variable_declarators COMMA variable_declarator
    (179) variable_declarator -> . variable_declarator_id
    (180) variable_declarator -> . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 918

    variable_declarators           shift and go to state 310
    variable_declarator            shift and go to state 311
    variable_declarator_id         shift and go to state 312

state 830

    (220) method_invocation -> IDENT . LPAREN argument_list_opt RPAREN
    (351) simple_name -> IDENT .

    LPAREN          shift and go to state 286
    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    IDENT           reduce using rule 351 (simple_name -> IDENT .)
    INC             reduce using rule 351 (simple_name -> IDENT .)
    DEC             reduce using rule 351 (simple_name -> IDENT .)
    ASSIGN          reduce using rule 351 (simple_name -> IDENT .)
    MUL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    QUO_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    REM_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    ADD_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SUB_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHL_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    SHR_UN_ASSIGN   reduce using rule 351 (simple_name -> IDENT .)
    AND_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)
    OR_ASSIGN       reduce using rule 351 (simple_name -> IDENT .)
    XOR_ASSIGN      reduce using rule 351 (simple_name -> IDENT .)


state 831

    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope modifiers . type IDENT dims_opt
    (366) modifiers -> modifiers . modifier
    (176) local_variable_declaration -> modifiers . type variable_declarators
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (548) annotation_name -> . ATRATE name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ATRATE          shift and go to state 47
    IDENT           shift and go to state 196

    type                           shift and go to state 919
    modifier                       shift and go to state 194
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    annotation                     shift and go to state 37
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    annotation_name                shift and go to state 45
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 832

    (246) for_init_opt -> for_init .

    SEMICOLON       reduce using rule 246 (for_init_opt -> for_init .)


state 833

    (247) for_init_opt -> empty .

    SEMICOLON       reduce using rule 247 (for_init_opt -> empty .)


state 834

    (248) for_init -> statement_expression_list .
    (251) statement_expression_list -> statement_expression_list . COMMA statement_expression

    SEMICOLON       reduce using rule 248 (for_init -> statement_expression_list .)
    COMMA           shift and go to state 920


state 835

    (249) for_init -> local_variable_declaration .

    SEMICOLON       reduce using rule 249 (for_init -> local_variable_declaration .)


state 836

    (250) statement_expression_list -> statement_expression .

    COMMA           reduce using rule 250 (statement_expression_list -> statement_expression .)
    SEMICOLON       reduce using rule 250 (statement_expression_list -> statement_expression .)
    RPAREN          reduce using rule 250 (statement_expression_list -> statement_expression .)


state 837

    (400) array_type -> name . dims
    (395) class_or_interface -> name .
    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (352) qualified_name -> name . PERIOD simple_name
    (129) postfix_expression -> name .
    (333) class_instance_creation_expression_name -> name . PERIOD
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (338) array_access -> name . LBRACK expression RBRACK
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    LSS             reduce using rule 395 (class_or_interface -> name .)
    IDENT           reduce using rule 395 (class_or_interface -> name .)
    PERIOD          shift and go to state 921
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LBRACK          shift and go to state 238

    dims                           shift and go to state 352
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 838

    (222) method_invocation -> primary . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (329) class_instance_creation_expression -> primary . PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary . PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (128) postfix_expression -> primary .
    (336) field_access -> primary . PERIOD IDENT

    PERIOD          shift and go to state 922
    INC             reduce using rule 128 (postfix_expression -> primary .)
    DEC             reduce using rule 128 (postfix_expression -> primary .)
    ASSIGN          reduce using rule 128 (postfix_expression -> primary .)
    MUL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    QUO_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    REM_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    ADD_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SUB_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHL_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    SHR_UN_ASSIGN   reduce using rule 128 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> primary .)


state 839

    (223) method_invocation -> SUPER . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> SUPER . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (337) field_access -> SUPER . PERIOD IDENT

    PERIOD          shift and go to state 347


state 840

    (165) block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .

    $end            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    WHILE           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    IF              reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    FOR             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    LBRACE          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    ASSERT          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    SEMICOLON       reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    SWITCH          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    DO              reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    BREAK           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    CONTINUE        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    RETURN          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    SYNCHRONIZED    reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    THROW           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    TRY             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    IDENT           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    BOOLEAN         reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    VOID            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    BYTE            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    SHORT           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    INT             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    LONG            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    CHAR            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    FLOAT           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    DOUBLE          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    PUBLIC          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    PROTECTED       reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    PRIVATE         reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    STATIC          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    ABSTRACT        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    FINAL           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    NATIVE          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    TRANSIENT       reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    VOLATILE        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    STRICTFP        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    THIS            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    SUPER           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    INC             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    DEC             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    NEW             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    LSS             reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    LPAREN          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    ATRATE          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    HEX_LIT         reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    OCTAL_LIT       reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    BINARY_LIT      reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    DECIMAL_LIT     reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    CHAR_LIT        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    STRING_LIT      reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    BOOL_LIT        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    NULL_LIT        reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    CLASS           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    INTERFACE       reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    RBRACE          reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    CASE            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    DEFAULT         reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    CATCH           reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    FINALLY         reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)
    ELSE            reduce using rule 165 (block -> LBRACE inc_scope block_statements_opt dec_scope RBRACE .)


state 841

    (269) assert_statement -> ASSERT expression COLON expression SEMICOLON .

    $end            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    WHILE           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    IF              reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    FOR             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    LBRACE          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    ASSERT          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    SEMICOLON       reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    SWITCH          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    DO              reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    BREAK           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    CONTINUE        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    RETURN          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    SYNCHRONIZED    reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    THROW           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    TRY             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    IDENT           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    BOOLEAN         reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    VOID            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    BYTE            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    SHORT           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    INT             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    LONG            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    CHAR            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    FLOAT           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    DOUBLE          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    PUBLIC          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    PROTECTED       reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    PRIVATE         reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    STATIC          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    ABSTRACT        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    FINAL           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    NATIVE          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    TRANSIENT       reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    VOLATILE        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    STRICTFP        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    THIS            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    SUPER           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    INC             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    DEC             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    NEW             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    LSS             reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    LPAREN          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    ATRATE          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    HEX_LIT         reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    OCTAL_LIT       reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    BINARY_LIT      reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    DECIMAL_LIT     reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    CHAR_LIT        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    STRING_LIT      reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    BOOL_LIT        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    NULL_LIT        reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    CLASS           reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    INTERFACE       reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    RBRACE          reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    CASE            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    DEFAULT         reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)
    ELSE            reduce using rule 269 (assert_statement -> ASSERT expression COLON expression SEMICOLON .)


state 842

    (271) switch_statement -> SWITCH LPAREN inc_scope expression RPAREN . switch_block
    (272) switch_block -> . LBRACE RBRACE
    (273) switch_block -> . LBRACE switch_block_statements dec_scope RBRACE
    (274) switch_block -> . LBRACE switch_labels dec_scope RBRACE
    (275) switch_block -> . LBRACE switch_block_statements switch_labels dec_scope RBRACE

    LBRACE          shift and go to state 924

    switch_block                   shift and go to state 923

state 843

    (284) do_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 925


state 844

    (290) synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .

    $end            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    WHILE           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    IF              reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    FOR             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    LBRACE          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    ASSERT          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    SEMICOLON       reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    SWITCH          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    DO              reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    BREAK           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    CONTINUE        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    RETURN          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    SYNCHRONIZED    reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    THROW           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    TRY             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    IDENT           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    BOOLEAN         reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    VOID            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    BYTE            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    SHORT           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    INT             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    LONG            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    CHAR            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    FLOAT           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    DOUBLE          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    PUBLIC          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    PROTECTED       reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    PRIVATE         reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    STATIC          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    ABSTRACT        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    FINAL           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    NATIVE          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    TRANSIENT       reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    VOLATILE        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    STRICTFP        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    THIS            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    SUPER           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    INC             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    DEC             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    NEW             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    LSS             reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    ATRATE          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    HEX_LIT         reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    OCTAL_LIT       reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    BINARY_LIT      reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    DECIMAL_LIT     reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    FLOAT_HEX_LIT   reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    FLOAT_DEC_LIT   reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    CHAR_LIT        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    STRING_LIT      reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    BOOL_LIT        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    NULL_LIT        reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    CLASS           reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    INTERFACE       reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    CASE            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    DEFAULT         reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)
    ELSE            reduce using rule 290 (synchronized_statement -> SYNCHRONIZED LPAREN expression RPAREN block .)


state 845

    (314) finally -> FINALLY block .

    $end            reduce using rule 314 (finally -> FINALLY block .)
    WHILE           reduce using rule 314 (finally -> FINALLY block .)
    IF              reduce using rule 314 (finally -> FINALLY block .)
    FOR             reduce using rule 314 (finally -> FINALLY block .)
    LBRACE          reduce using rule 314 (finally -> FINALLY block .)
    ASSERT          reduce using rule 314 (finally -> FINALLY block .)
    SEMICOLON       reduce using rule 314 (finally -> FINALLY block .)
    SWITCH          reduce using rule 314 (finally -> FINALLY block .)
    DO              reduce using rule 314 (finally -> FINALLY block .)
    BREAK           reduce using rule 314 (finally -> FINALLY block .)
    CONTINUE        reduce using rule 314 (finally -> FINALLY block .)
    RETURN          reduce using rule 314 (finally -> FINALLY block .)
    SYNCHRONIZED    reduce using rule 314 (finally -> FINALLY block .)
    THROW           reduce using rule 314 (finally -> FINALLY block .)
    TRY             reduce using rule 314 (finally -> FINALLY block .)
    IDENT           reduce using rule 314 (finally -> FINALLY block .)
    BOOLEAN         reduce using rule 314 (finally -> FINALLY block .)
    VOID            reduce using rule 314 (finally -> FINALLY block .)
    BYTE            reduce using rule 314 (finally -> FINALLY block .)
    SHORT           reduce using rule 314 (finally -> FINALLY block .)
    INT             reduce using rule 314 (finally -> FINALLY block .)
    LONG            reduce using rule 314 (finally -> FINALLY block .)
    CHAR            reduce using rule 314 (finally -> FINALLY block .)
    FLOAT           reduce using rule 314 (finally -> FINALLY block .)
    DOUBLE          reduce using rule 314 (finally -> FINALLY block .)
    PUBLIC          reduce using rule 314 (finally -> FINALLY block .)
    PROTECTED       reduce using rule 314 (finally -> FINALLY block .)
    PRIVATE         reduce using rule 314 (finally -> FINALLY block .)
    STATIC          reduce using rule 314 (finally -> FINALLY block .)
    ABSTRACT        reduce using rule 314 (finally -> FINALLY block .)
    FINAL           reduce using rule 314 (finally -> FINALLY block .)
    NATIVE          reduce using rule 314 (finally -> FINALLY block .)
    TRANSIENT       reduce using rule 314 (finally -> FINALLY block .)
    VOLATILE        reduce using rule 314 (finally -> FINALLY block .)
    STRICTFP        reduce using rule 314 (finally -> FINALLY block .)
    THIS            reduce using rule 314 (finally -> FINALLY block .)
    SUPER           reduce using rule 314 (finally -> FINALLY block .)
    INC             reduce using rule 314 (finally -> FINALLY block .)
    DEC             reduce using rule 314 (finally -> FINALLY block .)
    NEW             reduce using rule 314 (finally -> FINALLY block .)
    LSS             reduce using rule 314 (finally -> FINALLY block .)
    LPAREN          reduce using rule 314 (finally -> FINALLY block .)
    ATRATE          reduce using rule 314 (finally -> FINALLY block .)
    HEX_LIT         reduce using rule 314 (finally -> FINALLY block .)
    OCTAL_LIT       reduce using rule 314 (finally -> FINALLY block .)
    BINARY_LIT      reduce using rule 314 (finally -> FINALLY block .)
    DECIMAL_LIT     reduce using rule 314 (finally -> FINALLY block .)
    FLOAT_HEX_LIT   reduce using rule 314 (finally -> FINALLY block .)
    FLOAT_DEC_LIT   reduce using rule 314 (finally -> FINALLY block .)
    CHAR_LIT        reduce using rule 314 (finally -> FINALLY block .)
    STRING_LIT      reduce using rule 314 (finally -> FINALLY block .)
    BOOL_LIT        reduce using rule 314 (finally -> FINALLY block .)
    NULL_LIT        reduce using rule 314 (finally -> FINALLY block .)
    CLASS           reduce using rule 314 (finally -> FINALLY block .)
    INTERFACE       reduce using rule 314 (finally -> FINALLY block .)
    RBRACE          reduce using rule 314 (finally -> FINALLY block .)
    CASE            reduce using rule 314 (finally -> FINALLY block .)
    DEFAULT         reduce using rule 314 (finally -> FINALLY block .)
    ELSE            reduce using rule 314 (finally -> FINALLY block .)


state 846

    (299) catch_clause -> CATCH LPAREN catch_formal_parameter . RPAREN block

    RPAREN          shift and go to state 926


state 847

    (300) catch_formal_parameter -> modifiers_opt . catch_type variable_declarator_id
    (301) catch_type -> . union_type
    (302) union_type -> . type
    (303) union_type -> . union_type OR type
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    catch_type                     shift and go to state 927
    union_type                     shift and go to state 928
    type                           shift and go to state 929
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 848

    (305) try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .

    $end            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    WHILE           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    IF              reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FOR             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    LBRACE          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ASSERT          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SEMICOLON       reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SWITCH          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DO              reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BREAK           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CONTINUE        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    RETURN          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SYNCHRONIZED    reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    THROW           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    TRY             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    IDENT           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BOOLEAN         reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    VOID            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BYTE            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SHORT           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    INT             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    LONG            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CHAR            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FLOAT           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DOUBLE          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PUBLIC          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PROTECTED       reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PRIVATE         reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    STATIC          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ABSTRACT        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FINAL           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NATIVE          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    TRANSIENT       reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    VOLATILE        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    STRICTFP        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    THIS            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SUPER           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    INC             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DEC             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NEW             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    LSS             reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    LPAREN          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ATRATE          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    HEX_LIT         reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    OCTAL_LIT       reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BINARY_LIT      reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DECIMAL_LIT     reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FLOAT_HEX_LIT   reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FLOAT_DEC_LIT   reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CHAR_LIT        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    STRING_LIT      reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BOOL_LIT        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NULL_LIT        reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CLASS           reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    INTERFACE       reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    RBRACE          reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CASE            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DEFAULT         reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ELSE            reduce using rule 305 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)


state 849

    (306) resource_specification -> LPAREN resources semi_opt RPAREN .

    LBRACE          reduce using rule 306 (resource_specification -> LPAREN resources semi_opt RPAREN .)


state 850

    (310) resources -> resources trailing_semicolon resource .

    SEMICOLON       reduce using rule 310 (resources -> resources trailing_semicolon resource .)
    RPAREN          reduce using rule 310 (resources -> resources trailing_semicolon resource .)


state 851

    (312) resource -> type variable_declarator_id ASSIGN . variable_initializer
    (182) variable_initializer -> . expression
    (183) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    LBRACE          shift and go to state 701
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    variable_initializer           shift and go to state 930
    expression                     shift and go to state 714
    array_initializer              shift and go to state 715
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 852

    (313) resource -> modifiers type variable_declarator_id . ASSIGN variable_initializer

    ASSIGN          shift and go to state 931


state 853

    (315) explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 315 (explicit_constructor_invocation -> THIS LPAREN argument_list_opt RPAREN SEMICOLON .)


state 854

    (316) explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 316 (explicit_constructor_invocation -> SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)


state 855

    (317) explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 932


state 856

    (318) explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 933


state 857

    (319) explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 934


state 858

    (321) explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 935


state 859

    (323) explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 936
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 860

    (325) explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 937
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 861

    (320) explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 938


state 862

    (322) explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 939


state 863

    (324) explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    argument_list_opt              shift and go to state 940
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 864

    (326) explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN . argument_list_opt RPAREN SEMICOLON
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    name                           shift and go to state 56
    argument_list_opt              shift and go to state 941
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 865

    (419) reference_type2 -> class_or_interface LSS . type_argument_list3
    (413) reference_type1 -> class_or_interface LSS . type_argument_list2
    (398) generic_type -> class_or_interface LSS . GTR
    (403) type_arguments -> LSS . type_argument_list1
    (420) type_argument_list3 -> . type_argument3
    (421) type_argument_list3 -> . type_argument_list COMMA type_argument3
    (414) type_argument_list2 -> . type_argument2
    (415) type_argument_list2 -> . type_argument_list COMMA type_argument2
    (404) type_argument_list1 -> . type_argument1
    (405) type_argument_list1 -> . type_argument_list COMMA type_argument1
    (422) type_argument3 -> . reference_type3
    (423) type_argument3 -> . wildcard3
    (406) type_argument_list -> . type_argument
    (407) type_argument_list -> . type_argument_list COMMA type_argument
    (416) type_argument2 -> . reference_type2
    (417) type_argument2 -> . wildcard2
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (424) reference_type3 -> . reference_type SHR_UN
    (437) wildcard3 -> . QUES SHR_UN
    (438) wildcard3 -> . QUES wildcard_bounds3
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (433) wildcard2 -> . QUES SHR
    (434) wildcard2 -> . QUES wildcard_bounds2
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    GTR             shift and go to state 577
    QUES            shift and go to state 948
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    class_or_interface             shift and go to state 754
    type_argument_list3            shift and go to state 942
    type_argument_list2            shift and go to state 755
    type_argument_list1            shift and go to state 357
    type_argument3                 shift and go to state 943
    type_argument_list             shift and go to state 944
    type_argument2                 shift and go to state 756
    type_argument1                 shift and go to state 358
    reference_type3                shift and go to state 945
    wildcard3                      shift and go to state 946
    type_argument                  shift and go to state 362
    reference_type2                shift and go to state 758
    wildcard2                      shift and go to state 759
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    reference_type                 shift and go to state 947
    wildcard                       shift and go to state 366
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 866

    (415) type_argument_list2 -> type_argument_list COMMA . type_argument2
    (405) type_argument_list1 -> type_argument_list COMMA . type_argument1
    (407) type_argument_list -> type_argument_list COMMA . type_argument
    (416) type_argument2 -> . reference_type2
    (417) type_argument2 -> . wildcard2
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (433) wildcard2 -> . QUES SHR
    (434) wildcard2 -> . QUES wildcard_bounds2
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    QUES            shift and go to state 761
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type_argument2                 shift and go to state 949
    type_argument1                 shift and go to state 751
    type_argument                  shift and go to state 752
    reference_type2                shift and go to state 758
    wildcard2                      shift and go to state 759
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    reference_type                 shift and go to state 950
    wildcard                       shift and go to state 366
    class_or_interface             shift and go to state 754
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 867

    (418) reference_type2 -> reference_type SHR .

    SUPER           reduce using rule 418 (reference_type2 -> reference_type SHR .)
    THIS            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    IDENT           reduce using rule 418 (reference_type2 -> reference_type SHR .)
    PERIOD          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    LBRACK          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    LPAREN          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    COMMA           reduce using rule 418 (reference_type2 -> reference_type SHR .)
    LBRACE          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    INSTANCEOF      reduce using rule 418 (reference_type2 -> reference_type SHR .)
    EQL             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    NEQ             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    AND             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    XOR             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    OR              reduce using rule 418 (reference_type2 -> reference_type SHR .)
    LAND            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    QUES            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    LOR             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    $end            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    SEMICOLON       reduce using rule 418 (reference_type2 -> reference_type SHR .)
    COLON           reduce using rule 418 (reference_type2 -> reference_type SHR .)
    RPAREN          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    RBRACK          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    RBRACE          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    ELLIPSIS        reduce using rule 418 (reference_type2 -> reference_type SHR .)
    GTR             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    EXTENDS         reduce using rule 418 (reference_type2 -> reference_type SHR .)
    BOOLEAN         reduce using rule 418 (reference_type2 -> reference_type SHR .)
    VOID            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    BYTE            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    SHORT           reduce using rule 418 (reference_type2 -> reference_type SHR .)
    INT             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    LONG            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    CHAR            reduce using rule 418 (reference_type2 -> reference_type SHR .)
    FLOAT           reduce using rule 418 (reference_type2 -> reference_type SHR .)
    DOUBLE          reduce using rule 418 (reference_type2 -> reference_type SHR .)
    SHR             reduce using rule 418 (reference_type2 -> reference_type SHR .)
    SHR_UN          reduce using rule 418 (reference_type2 -> reference_type SHR .)


state 868

    (433) wildcard2 -> QUES SHR .

    SUPER           reduce using rule 433 (wildcard2 -> QUES SHR .)
    THIS            reduce using rule 433 (wildcard2 -> QUES SHR .)
    IDENT           reduce using rule 433 (wildcard2 -> QUES SHR .)
    PERIOD          reduce using rule 433 (wildcard2 -> QUES SHR .)
    LBRACK          reduce using rule 433 (wildcard2 -> QUES SHR .)
    LPAREN          reduce using rule 433 (wildcard2 -> QUES SHR .)
    COMMA           reduce using rule 433 (wildcard2 -> QUES SHR .)
    LBRACE          reduce using rule 433 (wildcard2 -> QUES SHR .)
    INSTANCEOF      reduce using rule 433 (wildcard2 -> QUES SHR .)
    EQL             reduce using rule 433 (wildcard2 -> QUES SHR .)
    NEQ             reduce using rule 433 (wildcard2 -> QUES SHR .)
    AND             reduce using rule 433 (wildcard2 -> QUES SHR .)
    XOR             reduce using rule 433 (wildcard2 -> QUES SHR .)
    OR              reduce using rule 433 (wildcard2 -> QUES SHR .)
    LAND            reduce using rule 433 (wildcard2 -> QUES SHR .)
    QUES            reduce using rule 433 (wildcard2 -> QUES SHR .)
    LOR             reduce using rule 433 (wildcard2 -> QUES SHR .)
    $end            reduce using rule 433 (wildcard2 -> QUES SHR .)
    SEMICOLON       reduce using rule 433 (wildcard2 -> QUES SHR .)
    COLON           reduce using rule 433 (wildcard2 -> QUES SHR .)
    RPAREN          reduce using rule 433 (wildcard2 -> QUES SHR .)
    RBRACK          reduce using rule 433 (wildcard2 -> QUES SHR .)
    RBRACE          reduce using rule 433 (wildcard2 -> QUES SHR .)
    ELLIPSIS        reduce using rule 433 (wildcard2 -> QUES SHR .)
    GTR             reduce using rule 433 (wildcard2 -> QUES SHR .)
    EXTENDS         reduce using rule 433 (wildcard2 -> QUES SHR .)
    BOOLEAN         reduce using rule 433 (wildcard2 -> QUES SHR .)
    VOID            reduce using rule 433 (wildcard2 -> QUES SHR .)
    BYTE            reduce using rule 433 (wildcard2 -> QUES SHR .)
    SHORT           reduce using rule 433 (wildcard2 -> QUES SHR .)
    INT             reduce using rule 433 (wildcard2 -> QUES SHR .)
    LONG            reduce using rule 433 (wildcard2 -> QUES SHR .)
    CHAR            reduce using rule 433 (wildcard2 -> QUES SHR .)
    FLOAT           reduce using rule 433 (wildcard2 -> QUES SHR .)
    DOUBLE          reduce using rule 433 (wildcard2 -> QUES SHR .)
    SHR             reduce using rule 433 (wildcard2 -> QUES SHR .)
    SHR_UN          reduce using rule 433 (wildcard2 -> QUES SHR .)


state 869

    (434) wildcard2 -> QUES wildcard_bounds2 .

    SUPER           reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    THIS            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    IDENT           reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    PERIOD          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    LBRACK          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    LPAREN          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    COMMA           reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    LBRACE          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    INSTANCEOF      reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    EQL             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    NEQ             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    AND             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    XOR             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    OR              reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    LAND            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    QUES            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    LOR             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    $end            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    SEMICOLON       reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    COLON           reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    RPAREN          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    RBRACK          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    RBRACE          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    ELLIPSIS        reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    GTR             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    EXTENDS         reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    BOOLEAN         reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    VOID            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    BYTE            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    SHORT           reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    INT             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    LONG            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    CHAR            reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    FLOAT           reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    DOUBLE          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    SHR             reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)
    SHR_UN          reduce using rule 434 (wildcard2 -> QUES wildcard_bounds2 .)


state 870

    (435) wildcard_bounds2 -> EXTENDS . reference_type2
    (431) wildcard_bounds1 -> EXTENDS . reference_type1
    (427) wildcard_bounds -> EXTENDS . reference_type
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type2                shift and go to state 951
    reference_type1                shift and go to state 762
    reference_type                 shift and go to state 952
    class_or_interface             shift and go to state 754
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 871

    (436) wildcard_bounds2 -> SUPER . reference_type2
    (432) wildcard_bounds1 -> SUPER . reference_type1
    (428) wildcard_bounds -> SUPER . reference_type
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type2                shift and go to state 953
    reference_type1                shift and go to state 764
    reference_type                 shift and go to state 954
    class_or_interface             shift and go to state 754
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 872

    (577) static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .

    SEMICOLON       reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    IMPORT          reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    PUBLIC          reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    PROTECTED       reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    PRIVATE         reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    STATIC          reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    ABSTRACT        reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    FINAL           reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    NATIVE          reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    SYNCHRONIZED    reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    TRANSIENT       reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    VOLATILE        reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    STRICTFP        reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    ATRATE          reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    CLASS           reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    INTERFACE       reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)
    $end            reduce using rule 577 (static_import_on_demand_declaration -> IMPORT STATIC name PERIOD MUL SEMICOLON .)


state 873

    (470) class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .

    SEMICOLON       reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    PUBLIC          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    PROTECTED       reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    PRIVATE         reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    STATIC          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    ABSTRACT        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    FINAL           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    NATIVE          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SYNCHRONIZED    reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    TRANSIENT       reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    VOLATILE        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    STRICTFP        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    ATRATE          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    CLASS           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    INTERFACE       reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    $end            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LSS             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    BOOLEAN         reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    VOID            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    BYTE            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHORT           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    INT             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LONG            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    CHAR            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    FLOAT           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    DOUBLE          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    IDENT           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    RBRACE          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    IF              reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    WHILE           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    FOR             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LBRACE          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    ASSERT          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SWITCH          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    DO              reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    BREAK           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    CONTINUE        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    RETURN          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    THROW           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    TRY             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    THIS            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SUPER           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    INC             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    DEC             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    NEW             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LPAREN          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    HEX_LIT         reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    OCTAL_LIT       reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    BINARY_LIT      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    DECIMAL_LIT     reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    CHAR_LIT        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    STRING_LIT      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    BOOL_LIT        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    NULL_LIT        reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    CASE            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    DEFAULT         reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LBRACK          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    PERIOD          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    ASSIGN          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    MUL_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    QUO_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    REM_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    ADD_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SUB_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHL_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHR_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHR_UN_ASSIGN   reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    AND_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    OR_ASSIGN       reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    XOR_ASSIGN      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    MUL             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    QUO             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    REM             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    ADD             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SUB             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHL             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHR             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    SHR_UN          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    GTR             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    GEQ             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LEQ             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    INSTANCEOF      reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    EQL             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    NEQ             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    AND             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    XOR             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    OR              reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LAND            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    QUES            reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    LOR             reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    RPAREN          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    COLON           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    RBRACK          reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)
    COMMA           reduce using rule 470 (class_body -> LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE .)


state 874

    (502) method_body -> LBRACE block_statements_opt . dec_scope RBRACE
    (585) dec_scope -> .

    RBRACE          reduce using rule 585 (dec_scope -> .)

    dec_scope                      shift and go to state 955

state 875

    (488) constructor_header_name -> modifiers_opt type_parameters IDENT . LPAREN
    (351) simple_name -> IDENT .

    LPAREN          shift and go to state 956
    PERIOD          reduce using rule 351 (simple_name -> IDENT .)
    LBRACK          reduce using rule 351 (simple_name -> IDENT .)
    LSS             reduce using rule 351 (simple_name -> IDENT .)
    IDENT           reduce using rule 351 (simple_name -> IDENT .)


state 876

    (489) constructor_header_name -> modifiers_opt IDENT LPAREN .

    PUBLIC          reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    PROTECTED       reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    PRIVATE         reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    STATIC          reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    ABSTRACT        reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    FINAL           reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    NATIVE          reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    SYNCHRONIZED    reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    TRANSIENT       reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    VOLATILE        reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    STRICTFP        reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    ATRATE          reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    RPAREN          reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    BOOLEAN         reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    VOID            reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    BYTE            reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    SHORT           reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    INT             reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    LONG            reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    CHAR            reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    FLOAT           reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    DOUBLE          reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)
    IDENT           reduce using rule 489 (constructor_header_name -> modifiers_opt IDENT LPAREN .)


state 877

    (487) constructor_header -> constructor_header_name formal_parameter_list_opt RPAREN . method_header_throws_clause_opt
    (496) method_header_throws_clause_opt -> . method_header_throws_clause
    (497) method_header_throws_clause_opt -> . empty
    (498) method_header_throws_clause -> . THROWS class_type_list
    (583) empty -> .

    THROWS          shift and go to state 960
    LBRACE          reduce using rule 583 (empty -> .)

    method_header_throws_clause_opt shift and go to state 957
    method_header_throws_clause    shift and go to state 958
    empty                          shift and go to state 959

state 878

    (507) method_header -> method_header_name formal_parameter_list_opt RPAREN . method_header_extended_dims method_header_throws_clause_opt
    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN . method_header_extended_dims method_header_throws_clause_opt dec_scope
    (510) method_header_extended_dims -> . dims_opt
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    THROWS          reduce using rule 583 (empty -> .)
    LBRACE          reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    method_header_extended_dims    shift and go to state 961
    dims_opt                       shift and go to state 883
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 879

    (484) field_declaration -> modifiers_opt type variable_declarators SEMICOLON .

    SEMICOLON       reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    PUBLIC          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    PROTECTED       reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    PRIVATE         reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    STATIC          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    ABSTRACT        reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    FINAL           reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    NATIVE          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    SYNCHRONIZED    reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    TRANSIENT       reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    VOLATILE        reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    STRICTFP        reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    ATRATE          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    CLASS           reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    INTERFACE       reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    LSS             reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    BOOLEAN         reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    VOID            reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    BYTE            reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    SHORT           reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    INT             reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    LONG            reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    CHAR            reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    FLOAT           reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    DOUBLE          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    IDENT           reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    RBRACE          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)
    LBRACE          reduce using rule 484 (field_declaration -> modifiers_opt type variable_declarators SEMICOLON .)


state 880

    (509) method_header_name -> modifiers_opt type IDENT LPAREN .

    PUBLIC          reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    PROTECTED       reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    PRIVATE         reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    STATIC          reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    ABSTRACT        reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    FINAL           reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    NATIVE          reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    SYNCHRONIZED    reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    TRANSIENT       reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    VOLATILE        reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    STRICTFP        reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    ATRATE          reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    RPAREN          reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    BOOLEAN         reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    VOID            reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    BYTE            reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    SHORT           reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    INT             reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    LONG            reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    CHAR            reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    FLOAT           reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    DOUBLE          reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)
    IDENT           reduce using rule 509 (method_header_name -> modifiers_opt type IDENT LPAREN .)


state 881

    (508) method_header_name -> modifiers_opt type_parameters type IDENT . LPAREN

    LPAREN          shift and go to state 962


state 882

    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims . method_header_throws_clause_opt dec_scope
    (496) method_header_throws_clause_opt -> . method_header_throws_clause
    (497) method_header_throws_clause_opt -> . empty
    (498) method_header_throws_clause -> . THROWS class_type_list
    (583) empty -> .

    THROWS          shift and go to state 960
    SEMICOLON       reduce using rule 583 (empty -> .)

    method_header_throws_clause_opt shift and go to state 963
    method_header_throws_clause    shift and go to state 958
    empty                          shift and go to state 959

state 883

    (510) method_header_extended_dims -> dims_opt .

    THROWS          reduce using rule 510 (method_header_extended_dims -> dims_opt .)
    SEMICOLON       reduce using rule 510 (method_header_extended_dims -> dims_opt .)
    LBRACE          reduce using rule 510 (method_header_extended_dims -> dims_opt .)


state 884

    (493) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    COMMA           reduce using rule 493 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    RPAREN          reduce using rule 493 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 885

    (494) formal_parameter -> modifiers_opt type variable_declarator_id .

    COMMA           reduce using rule 494 (formal_parameter -> modifiers_opt type variable_declarator_id .)
    RPAREN          reduce using rule 494 (formal_parameter -> modifiers_opt type variable_declarator_id .)


state 886

    (495) formal_parameter -> modifiers_opt type ELLIPSIS . variable_declarator_id
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarator_id         shift and go to state 964

state 887

    (455) type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .

    LBRACE          reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    EXTENDS         reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    BOOLEAN         reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    VOID            reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    BYTE            reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    SHORT           reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    INT             reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    LONG            reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    CHAR            reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    FLOAT           reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    DOUBLE          reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    IDENT           reduce using rule 455 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)


state 888

    (447) type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list .
    (457) additional_bound_list1 -> additional_bound_list . additional_bound1
    (449) additional_bound_list -> additional_bound_list . additional_bound
    (458) additional_bound1 -> . AND reference_type1
    (450) additional_bound -> . AND reference_type

    COMMA           reduce using rule 447 (type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list .)
    AND             shift and go to state 891

    additional_bound1              shift and go to state 965
    additional_bound               shift and go to state 966

state 889

    (456) additional_bound_list1 -> additional_bound1 .

    LBRACE          reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    EXTENDS         reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    BOOLEAN         reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    VOID            reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    BYTE            reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    SHORT           reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    INT             reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    LONG            reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    CHAR            reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    FLOAT           reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    DOUBLE          reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)
    IDENT           reduce using rule 456 (additional_bound_list1 -> additional_bound1 .)


state 890

    (448) additional_bound_list -> additional_bound .

    AND             reduce using rule 448 (additional_bound_list -> additional_bound .)
    COMMA           reduce using rule 448 (additional_bound_list -> additional_bound .)


state 891

    (458) additional_bound1 -> AND . reference_type1
    (450) additional_bound -> AND . reference_type
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type1                shift and go to state 967
    reference_type                 shift and go to state 968
    class_or_interface             shift and go to state 364
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 892

    (538) member_value_array_initializer -> LBRACE member_values COMMA RBRACE .

    RPAREN          reduce using rule 538 (member_value_array_initializer -> LBRACE member_values COMMA RBRACE .)
    COMMA           reduce using rule 538 (member_value_array_initializer -> LBRACE member_values COMMA RBRACE .)
    RBRACE          reduce using rule 538 (member_value_array_initializer -> LBRACE member_values COMMA RBRACE .)


state 893

    (543) member_values -> member_values COMMA member_value .

    COMMA           reduce using rule 543 (member_values -> member_values COMMA member_value .)
    RBRACE          reduce using rule 543 (member_values -> member_values COMMA member_value .)


state 894

    (329) class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN . argument_list_opt RPAREN class_body_opt
    (530) argument_list_opt -> . argument_list
    (531) argument_list_opt -> . empty
    (532) argument_list -> . expression
    (533) argument_list -> . argument_list COMMA expression
    (583) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RPAREN          reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    primary                        shift and go to state 55
    argument_list_opt              shift and go to state 969
    argument_list                  shift and go to state 506
    empty                          shift and go to state 507
    expression                     shift and go to state 508
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 895

    (330) class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt . RPAREN class_body_opt

    RPAREN          shift and go to state 970


state 896

    (222) method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 971


state 897

    (225) method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 225 (method_invocation -> primary PERIOD IDENT LPAREN argument_list_opt RPAREN .)


state 898

    (221) method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 972


state 899

    (224) method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 224 (method_invocation -> name PERIOD IDENT LPAREN argument_list_opt RPAREN .)


state 900

    (161) cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .

    MUL             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    QUO             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    REM             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    ADD             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    SUB             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    SHL             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    SHR             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    SHR_UN          reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    GTR             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    LSS             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    GEQ             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    LEQ             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    EQL             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    NEQ             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    AND             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    XOR             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    OR              reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    LAND            reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    QUES            reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    LOR             reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    $end            reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    SEMICOLON       reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    COLON           reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    RBRACK          reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    COMMA           reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)
    RBRACE          reduce using rule 161 (cast_expression -> LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus .)


state 901

    (162) cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt . RPAREN unary_expression_not_plus_minus

    RPAREN          shift and go to state 973


state 902

    (24) conditional_expression_not_name -> name QUES expression COLON conditional_expression .

    RPAREN          reduce using rule 24 (conditional_expression_not_name -> name QUES expression COLON conditional_expression .)
    COMMA           reduce using rule 24 (conditional_expression_not_name -> name QUES expression COLON conditional_expression .)
    RBRACE          reduce using rule 24 (conditional_expression_not_name -> name QUES expression COLON conditional_expression .)


state 903

    (23) conditional_expression_not_name -> conditional_or_expression_not_name QUES expression COLON conditional_expression .

    RPAREN          reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name QUES expression COLON conditional_expression .)
    COMMA           reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name QUES expression COLON conditional_expression .)
    RBRACE          reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name QUES expression COLON conditional_expression .)


state 904

    (226) method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 226 (method_invocation -> SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN .)


state 905

    (223) method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 974


state 906

    (215) array_initializer -> LBRACE comma_opt RBRACE .

    LBRACK          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    PERIOD          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    INC             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    DEC             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    ASSIGN          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    MUL_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    QUO_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    REM_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    ADD_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SUB_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SHL_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SHR_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SHR_UN_ASSIGN   reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    AND_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    OR_ASSIGN       reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    XOR_ASSIGN      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    MUL             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    QUO             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    REM             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    ADD             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SUB             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SHL             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SHR             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SHR_UN          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    GTR             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    LSS             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    GEQ             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    LEQ             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    INSTANCEOF      reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    EQL             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    NEQ             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    AND             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    XOR             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    OR              reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    LAND            reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    QUES            reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    LOR             reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    $end            reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    SEMICOLON       reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    RPAREN          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    COLON           reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    RBRACK          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    COMMA           reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)
    RBRACE          reduce using rule 215 (array_initializer -> LBRACE comma_opt RBRACE .)


state 907

    (216) array_initializer -> LBRACE variable_initializers RBRACE .

    LBRACK          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    PERIOD          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    INC             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    DEC             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    ASSIGN          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    MUL_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    QUO_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    REM_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    ADD_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SUB_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SHL_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SHR_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SHR_UN_ASSIGN   reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    AND_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    OR_ASSIGN       reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    XOR_ASSIGN      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    MUL             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    QUO             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    REM             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    ADD             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SUB             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SHL             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SHR             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SHR_UN          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    GTR             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    LSS             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    GEQ             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    LEQ             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    INSTANCEOF      reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    EQL             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    NEQ             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    AND             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    XOR             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    OR              reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    LAND            reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    QUES            reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    LOR             reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    $end            reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    SEMICOLON       reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    RPAREN          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    COLON           reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    RBRACK          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    COMMA           reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)
    RBRACE          reduce using rule 216 (array_initializer -> LBRACE variable_initializers RBRACE .)


state 908

    (217) array_initializer -> LBRACE variable_initializers COMMA . RBRACE
    (219) variable_initializers -> variable_initializers COMMA . variable_initializer
    (182) variable_initializer -> . expression
    (183) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    RBRACE          shift and go to state 975
    LBRACE          shift and go to state 701
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    variable_initializer           shift and go to state 976
    expression                     shift and go to state 714
    array_initializer              shift and go to state 715
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 909

    (327) class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN . class_body_opt
    (334) class_body_opt -> . class_body
    (335) class_body_opt -> . empty
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
    (583) empty -> .

    LBRACE          shift and go to state 200
    LBRACK          reduce using rule 583 (empty -> .)
    PERIOD          reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    MUL_ASSIGN      reduce using rule 583 (empty -> .)
    QUO_ASSIGN      reduce using rule 583 (empty -> .)
    REM_ASSIGN      reduce using rule 583 (empty -> .)
    ADD_ASSIGN      reduce using rule 583 (empty -> .)
    SUB_ASSIGN      reduce using rule 583 (empty -> .)
    SHL_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_UN_ASSIGN   reduce using rule 583 (empty -> .)
    AND_ASSIGN      reduce using rule 583 (empty -> .)
    OR_ASSIGN       reduce using rule 583 (empty -> .)
    XOR_ASSIGN      reduce using rule 583 (empty -> .)
    MUL             reduce using rule 583 (empty -> .)
    QUO             reduce using rule 583 (empty -> .)
    REM             reduce using rule 583 (empty -> .)
    ADD             reduce using rule 583 (empty -> .)
    SUB             reduce using rule 583 (empty -> .)
    SHL             reduce using rule 583 (empty -> .)
    SHR             reduce using rule 583 (empty -> .)
    SHR_UN          reduce using rule 583 (empty -> .)
    GTR             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    GEQ             reduce using rule 583 (empty -> .)
    LEQ             reduce using rule 583 (empty -> .)
    INSTANCEOF      reduce using rule 583 (empty -> .)
    EQL             reduce using rule 583 (empty -> .)
    NEQ             reduce using rule 583 (empty -> .)
    AND             reduce using rule 583 (empty -> .)
    XOR             reduce using rule 583 (empty -> .)
    OR              reduce using rule 583 (empty -> .)
    LAND            reduce using rule 583 (empty -> .)
    QUES            reduce using rule 583 (empty -> .)
    LOR             reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    COLON           reduce using rule 583 (empty -> .)
    RBRACK          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)

    class_body_opt                 shift and go to state 977
    class_body                     shift and go to state 911
    empty                          shift and go to state 912

state 910

    (328) class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .

    LBRACK          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    PERIOD          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INC             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    DEC             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ASSIGN          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN_ASSIGN   reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR_ASSIGN       reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR_ASSIGN      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GTR             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LSS             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GEQ             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LEQ             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INSTANCEOF      reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    EQL             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    NEQ             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR              reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LAND            reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUES            reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LOR             reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    $end            reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SEMICOLON       reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RPAREN          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COLON           reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACK          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COMMA           reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACE          reduce using rule 328 (class_instance_creation_expression -> NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)


state 911

    (334) class_body_opt -> class_body .

    LBRACK          reduce using rule 334 (class_body_opt -> class_body .)
    PERIOD          reduce using rule 334 (class_body_opt -> class_body .)
    INC             reduce using rule 334 (class_body_opt -> class_body .)
    DEC             reduce using rule 334 (class_body_opt -> class_body .)
    ASSIGN          reduce using rule 334 (class_body_opt -> class_body .)
    MUL_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    QUO_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    REM_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    ADD_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    SUB_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    SHL_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    SHR_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    SHR_UN_ASSIGN   reduce using rule 334 (class_body_opt -> class_body .)
    AND_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    OR_ASSIGN       reduce using rule 334 (class_body_opt -> class_body .)
    XOR_ASSIGN      reduce using rule 334 (class_body_opt -> class_body .)
    MUL             reduce using rule 334 (class_body_opt -> class_body .)
    QUO             reduce using rule 334 (class_body_opt -> class_body .)
    REM             reduce using rule 334 (class_body_opt -> class_body .)
    ADD             reduce using rule 334 (class_body_opt -> class_body .)
    SUB             reduce using rule 334 (class_body_opt -> class_body .)
    SHL             reduce using rule 334 (class_body_opt -> class_body .)
    SHR             reduce using rule 334 (class_body_opt -> class_body .)
    SHR_UN          reduce using rule 334 (class_body_opt -> class_body .)
    GTR             reduce using rule 334 (class_body_opt -> class_body .)
    LSS             reduce using rule 334 (class_body_opt -> class_body .)
    GEQ             reduce using rule 334 (class_body_opt -> class_body .)
    LEQ             reduce using rule 334 (class_body_opt -> class_body .)
    INSTANCEOF      reduce using rule 334 (class_body_opt -> class_body .)
    EQL             reduce using rule 334 (class_body_opt -> class_body .)
    NEQ             reduce using rule 334 (class_body_opt -> class_body .)
    AND             reduce using rule 334 (class_body_opt -> class_body .)
    XOR             reduce using rule 334 (class_body_opt -> class_body .)
    OR              reduce using rule 334 (class_body_opt -> class_body .)
    LAND            reduce using rule 334 (class_body_opt -> class_body .)
    QUES            reduce using rule 334 (class_body_opt -> class_body .)
    LOR             reduce using rule 334 (class_body_opt -> class_body .)
    $end            reduce using rule 334 (class_body_opt -> class_body .)
    SEMICOLON       reduce using rule 334 (class_body_opt -> class_body .)
    RPAREN          reduce using rule 334 (class_body_opt -> class_body .)
    COLON           reduce using rule 334 (class_body_opt -> class_body .)
    RBRACK          reduce using rule 334 (class_body_opt -> class_body .)
    COMMA           reduce using rule 334 (class_body_opt -> class_body .)
    RBRACE          reduce using rule 334 (class_body_opt -> class_body .)


state 912

    (335) class_body_opt -> empty .

    LBRACK          reduce using rule 335 (class_body_opt -> empty .)
    PERIOD          reduce using rule 335 (class_body_opt -> empty .)
    INC             reduce using rule 335 (class_body_opt -> empty .)
    DEC             reduce using rule 335 (class_body_opt -> empty .)
    ASSIGN          reduce using rule 335 (class_body_opt -> empty .)
    MUL_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    QUO_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    REM_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    ADD_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    SUB_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    SHL_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    SHR_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    SHR_UN_ASSIGN   reduce using rule 335 (class_body_opt -> empty .)
    AND_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    OR_ASSIGN       reduce using rule 335 (class_body_opt -> empty .)
    XOR_ASSIGN      reduce using rule 335 (class_body_opt -> empty .)
    MUL             reduce using rule 335 (class_body_opt -> empty .)
    QUO             reduce using rule 335 (class_body_opt -> empty .)
    REM             reduce using rule 335 (class_body_opt -> empty .)
    ADD             reduce using rule 335 (class_body_opt -> empty .)
    SUB             reduce using rule 335 (class_body_opt -> empty .)
    SHL             reduce using rule 335 (class_body_opt -> empty .)
    SHR             reduce using rule 335 (class_body_opt -> empty .)
    SHR_UN          reduce using rule 335 (class_body_opt -> empty .)
    GTR             reduce using rule 335 (class_body_opt -> empty .)
    LSS             reduce using rule 335 (class_body_opt -> empty .)
    GEQ             reduce using rule 335 (class_body_opt -> empty .)
    LEQ             reduce using rule 335 (class_body_opt -> empty .)
    INSTANCEOF      reduce using rule 335 (class_body_opt -> empty .)
    EQL             reduce using rule 335 (class_body_opt -> empty .)
    NEQ             reduce using rule 335 (class_body_opt -> empty .)
    AND             reduce using rule 335 (class_body_opt -> empty .)
    XOR             reduce using rule 335 (class_body_opt -> empty .)
    OR              reduce using rule 335 (class_body_opt -> empty .)
    LAND            reduce using rule 335 (class_body_opt -> empty .)
    QUES            reduce using rule 335 (class_body_opt -> empty .)
    LOR             reduce using rule 335 (class_body_opt -> empty .)
    $end            reduce using rule 335 (class_body_opt -> empty .)
    SEMICOLON       reduce using rule 335 (class_body_opt -> empty .)
    RPAREN          reduce using rule 335 (class_body_opt -> empty .)
    COLON           reduce using rule 335 (class_body_opt -> empty .)
    RBRACK          reduce using rule 335 (class_body_opt -> empty .)
    COMMA           reduce using rule 335 (class_body_opt -> empty .)
    RBRACE          reduce using rule 335 (class_body_opt -> empty .)


state 913

    (331) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN . class_body_opt
    (334) class_body_opt -> . class_body
    (335) class_body_opt -> . empty
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
    (583) empty -> .

    LBRACE          shift and go to state 200
    LBRACK          reduce using rule 583 (empty -> .)
    PERIOD          reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    MUL_ASSIGN      reduce using rule 583 (empty -> .)
    QUO_ASSIGN      reduce using rule 583 (empty -> .)
    REM_ASSIGN      reduce using rule 583 (empty -> .)
    ADD_ASSIGN      reduce using rule 583 (empty -> .)
    SUB_ASSIGN      reduce using rule 583 (empty -> .)
    SHL_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_UN_ASSIGN   reduce using rule 583 (empty -> .)
    AND_ASSIGN      reduce using rule 583 (empty -> .)
    OR_ASSIGN       reduce using rule 583 (empty -> .)
    XOR_ASSIGN      reduce using rule 583 (empty -> .)
    MUL             reduce using rule 583 (empty -> .)
    QUO             reduce using rule 583 (empty -> .)
    REM             reduce using rule 583 (empty -> .)
    ADD             reduce using rule 583 (empty -> .)
    SUB             reduce using rule 583 (empty -> .)
    SHL             reduce using rule 583 (empty -> .)
    SHR             reduce using rule 583 (empty -> .)
    SHR_UN          reduce using rule 583 (empty -> .)
    GTR             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    GEQ             reduce using rule 583 (empty -> .)
    LEQ             reduce using rule 583 (empty -> .)
    INSTANCEOF      reduce using rule 583 (empty -> .)
    EQL             reduce using rule 583 (empty -> .)
    NEQ             reduce using rule 583 (empty -> .)
    AND             reduce using rule 583 (empty -> .)
    XOR             reduce using rule 583 (empty -> .)
    OR              reduce using rule 583 (empty -> .)
    LAND            reduce using rule 583 (empty -> .)
    QUES            reduce using rule 583 (empty -> .)
    LOR             reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    COLON           reduce using rule 583 (empty -> .)
    RBRACK          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)

    class_body_opt                 shift and go to state 978
    class_body                     shift and go to state 911
    empty                          shift and go to state 912

state 914

    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt . RPAREN class_body_opt

    RPAREN          shift and go to state 979


state 915

    (230) if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 . statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 . statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 981
    statement_no_short_if          shift and go to state 982
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 989
    enhanced_for_statement_header  shift and go to state 992
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 916

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression . RPAREN label_for_while1 statement label_for_while2

    RPAREN          shift and go to state 993


state 917

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON . label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (243) label_for_for1 -> .

    THIS            reduce using rule 243 (label_for_for1 -> .)
    LPAREN          reduce using rule 243 (label_for_for1 -> .)
    NEW             reduce using rule 243 (label_for_for1 -> .)
    IDENT           reduce using rule 243 (label_for_for1 -> .)
    HEX_LIT         reduce using rule 243 (label_for_for1 -> .)
    OCTAL_LIT       reduce using rule 243 (label_for_for1 -> .)
    BINARY_LIT      reduce using rule 243 (label_for_for1 -> .)
    DECIMAL_LIT     reduce using rule 243 (label_for_for1 -> .)
    FLOAT_HEX_LIT   reduce using rule 243 (label_for_for1 -> .)
    FLOAT_DEC_LIT   reduce using rule 243 (label_for_for1 -> .)
    CHAR_LIT        reduce using rule 243 (label_for_for1 -> .)
    STRING_LIT      reduce using rule 243 (label_for_for1 -> .)
    BOOL_LIT        reduce using rule 243 (label_for_for1 -> .)
    NULL_LIT        reduce using rule 243 (label_for_for1 -> .)
    SUPER           reduce using rule 243 (label_for_for1 -> .)
    BOOLEAN         reduce using rule 243 (label_for_for1 -> .)
    VOID            reduce using rule 243 (label_for_for1 -> .)
    BYTE            reduce using rule 243 (label_for_for1 -> .)
    SHORT           reduce using rule 243 (label_for_for1 -> .)
    INT             reduce using rule 243 (label_for_for1 -> .)
    LONG            reduce using rule 243 (label_for_for1 -> .)
    CHAR            reduce using rule 243 (label_for_for1 -> .)
    FLOAT           reduce using rule 243 (label_for_for1 -> .)
    DOUBLE          reduce using rule 243 (label_for_for1 -> .)
    ADD             reduce using rule 243 (label_for_for1 -> .)
    SUB             reduce using rule 243 (label_for_for1 -> .)
    INC             reduce using rule 243 (label_for_for1 -> .)
    DEC             reduce using rule 243 (label_for_for1 -> .)
    LNOT            reduce using rule 243 (label_for_for1 -> .)
    NOT             reduce using rule 243 (label_for_for1 -> .)
    SEMICOLON       reduce using rule 243 (label_for_for1 -> .)

    label_for_for1                 shift and go to state 994

state 918

    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope type IDENT . dims_opt
    (181) variable_declarator_id -> IDENT . dims_opt
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    COLON           reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 995
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 919

    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope modifiers type . IDENT dims_opt
    (176) local_variable_declaration -> modifiers type . variable_declarators
    (177) variable_declarators -> . variable_declarator
    (178) variable_declarators -> . variable_declarators COMMA variable_declarator
    (179) variable_declarator -> . variable_declarator_id
    (180) variable_declarator -> . variable_declarator_id ASSIGN variable_initializer
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 996

    variable_declarators           shift and go to state 532
    variable_declarator            shift and go to state 311
    variable_declarator_id         shift and go to state 312

state 920

    (251) statement_expression_list -> statement_expression_list COMMA . statement_expression
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (333) class_instance_creation_expression_name -> . name PERIOD
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    INC             shift and go to state 65
    DEC             shift and go to state 48
    IDENT           shift and go to state 830
    SUPER           shift and go to state 839
    NEW             shift and go to state 184
    THIS            shift and go to state 68
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement_expression           shift and go to state 997
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    postfix_expression             shift and go to state 183
    name                           shift and go to state 998
    primary                        shift and go to state 838
    class_instance_creation_expression_name shift and go to state 89
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 921

    (221) method_invocation -> name PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (352) qualified_name -> name PERIOD . simple_name
    (333) class_instance_creation_expression_name -> name PERIOD .
    (148) primary_no_new_array -> name PERIOD . THIS
    (149) primary_no_new_array -> name PERIOD . SUPER
    (150) primary_no_new_array -> name PERIOD . CLASS
    (403) type_arguments -> . LSS type_argument_list1
    (351) simple_name -> . IDENT

    IDENT           shift and go to state 430
    NEW             reduce using rule 333 (class_instance_creation_expression_name -> name PERIOD .)
    THIS            shift and go to state 425
    SUPER           shift and go to state 426
    CLASS           shift and go to state 427
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 429
    simple_name                    shift and go to state 428

state 922

    (222) method_invocation -> primary PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> primary PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (329) class_instance_creation_expression -> primary PERIOD . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> primary PERIOD . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> primary PERIOD . IDENT
    (403) type_arguments -> . LSS type_argument_list1

    IDENT           shift and go to state 573
    NEW             shift and go to state 422
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 423

state 923

    (271) switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .

    $end            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    WHILE           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    IF              reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    FOR             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    LBRACE          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    ASSERT          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    SEMICOLON       reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    SWITCH          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    DO              reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    BREAK           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    CONTINUE        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    RETURN          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    SYNCHRONIZED    reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    THROW           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    TRY             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    IDENT           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    BOOLEAN         reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    VOID            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    BYTE            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    SHORT           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    INT             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    LONG            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    CHAR            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    FLOAT           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    DOUBLE          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    PUBLIC          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    PROTECTED       reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    PRIVATE         reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    STATIC          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    ABSTRACT        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    FINAL           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    NATIVE          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    TRANSIENT       reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    VOLATILE        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    STRICTFP        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    THIS            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    SUPER           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    INC             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    DEC             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    NEW             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    LSS             reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    LPAREN          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    ATRATE          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    HEX_LIT         reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    OCTAL_LIT       reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    BINARY_LIT      reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    DECIMAL_LIT     reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    FLOAT_HEX_LIT   reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    FLOAT_DEC_LIT   reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    CHAR_LIT        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    STRING_LIT      reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    BOOL_LIT        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    NULL_LIT        reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    CLASS           reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    INTERFACE       reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    RBRACE          reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    CASE            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    DEFAULT         reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)
    ELSE            reduce using rule 271 (switch_statement -> SWITCH LPAREN inc_scope expression RPAREN switch_block .)


state 924

    (272) switch_block -> LBRACE . RBRACE
    (273) switch_block -> LBRACE . switch_block_statements dec_scope RBRACE
    (274) switch_block -> LBRACE . switch_labels dec_scope RBRACE
    (275) switch_block -> LBRACE . switch_block_statements switch_labels dec_scope RBRACE
    (276) switch_block_statements -> . switch_block_statement
    (277) switch_block_statements -> . switch_block_statements switch_block_statement
    (279) switch_labels -> . switch_label
    (280) switch_labels -> . switch_labels switch_label
    (278) switch_block_statement -> . switch_labels block_statements
    (281) switch_label -> . CASE constant_expression COLON
    (282) switch_label -> . DEFAULT COLON

    RBRACE          shift and go to state 999
    CASE            shift and go to state 1004
    DEFAULT         shift and go to state 1005

    switch_block_statements        shift and go to state 1000
    switch_labels                  shift and go to state 1001
    switch_block_statement         shift and go to state 1002
    switch_label                   shift and go to state 1003

state 925

    (284) do_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1006


state 926

    (299) catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN . block
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE

    LBRACE          shift and go to state 153

    block                          shift and go to state 1007

state 927

    (300) catch_formal_parameter -> modifiers_opt catch_type . variable_declarator_id
    (181) variable_declarator_id -> . IDENT dims_opt

    IDENT           shift and go to state 313

    variable_declarator_id         shift and go to state 1008

state 928

    (301) catch_type -> union_type .
    (303) union_type -> union_type . OR type

    IDENT           reduce using rule 301 (catch_type -> union_type .)
    OR              shift and go to state 1009


state 929

    (302) union_type -> type .

    OR              reduce using rule 302 (union_type -> type .)
    IDENT           reduce using rule 302 (union_type -> type .)


state 930

    (312) resource -> type variable_declarator_id ASSIGN variable_initializer .

    SEMICOLON       reduce using rule 312 (resource -> type variable_declarator_id ASSIGN variable_initializer .)
    RPAREN          reduce using rule 312 (resource -> type variable_declarator_id ASSIGN variable_initializer .)


state 931

    (313) resource -> modifiers type variable_declarator_id ASSIGN . variable_initializer
    (182) variable_initializer -> . expression
    (183) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (215) array_initializer -> . LBRACE comma_opt RBRACE
    (216) array_initializer -> . LBRACE variable_initializers RBRACE
    (217) array_initializer -> . LBRACE variable_initializers COMMA RBRACE
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    LBRACE          shift and go to state 701
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    variable_initializer           shift and go to state 1010
    expression                     shift and go to state 714
    array_initializer              shift and go to state 715
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 932

    (317) explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 317 (explicit_constructor_invocation -> type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)


state 933

    (318) explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 318 (explicit_constructor_invocation -> type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)


state 934

    (319) explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1011


state 935

    (321) explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1012


state 936

    (323) explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 1013


state 937

    (325) explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 1014


state 938

    (320) explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1015


state 939

    (322) explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1016


state 940

    (324) explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 1017


state 941

    (326) explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 1018


state 942

    (419) reference_type2 -> class_or_interface LSS type_argument_list3 .

    SUPER           reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    THIS            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    IDENT           reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    PERIOD          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    LBRACK          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    LPAREN          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    COMMA           reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    LBRACE          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    INSTANCEOF      reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    EQL             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    NEQ             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    AND             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    XOR             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    OR              reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    LAND            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    QUES            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    LOR             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    $end            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    SEMICOLON       reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    COLON           reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    RPAREN          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    RBRACK          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    RBRACE          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    ELLIPSIS        reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    GTR             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    EXTENDS         reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    BOOLEAN         reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    VOID            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    BYTE            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    SHORT           reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    INT             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    LONG            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    CHAR            reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    FLOAT           reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    DOUBLE          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    SHR             reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)
    SHR_UN          reduce using rule 419 (reference_type2 -> class_or_interface LSS type_argument_list3 .)


state 943

    (420) type_argument_list3 -> type_argument3 .

    SUPER           reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    THIS            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    IDENT           reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    PERIOD          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    LBRACK          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    LPAREN          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    COMMA           reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    LBRACE          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    INSTANCEOF      reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    EQL             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    NEQ             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    AND             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    XOR             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    OR              reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    LAND            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    QUES            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    LOR             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    $end            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    SEMICOLON       reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    COLON           reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    RPAREN          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    RBRACK          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    RBRACE          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    ELLIPSIS        reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    GTR             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    EXTENDS         reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    BOOLEAN         reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    VOID            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    BYTE            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    SHORT           reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    INT             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    LONG            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    CHAR            reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    FLOAT           reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    DOUBLE          reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    SHR             reduce using rule 420 (type_argument_list3 -> type_argument3 .)
    SHR_UN          reduce using rule 420 (type_argument_list3 -> type_argument3 .)


state 944

    (421) type_argument_list3 -> type_argument_list . COMMA type_argument3
    (415) type_argument_list2 -> type_argument_list . COMMA type_argument2
    (405) type_argument_list1 -> type_argument_list . COMMA type_argument1
    (407) type_argument_list -> type_argument_list . COMMA type_argument

    COMMA           shift and go to state 1019


state 945

    (422) type_argument3 -> reference_type3 .

    SUPER           reduce using rule 422 (type_argument3 -> reference_type3 .)
    THIS            reduce using rule 422 (type_argument3 -> reference_type3 .)
    IDENT           reduce using rule 422 (type_argument3 -> reference_type3 .)
    PERIOD          reduce using rule 422 (type_argument3 -> reference_type3 .)
    LBRACK          reduce using rule 422 (type_argument3 -> reference_type3 .)
    LPAREN          reduce using rule 422 (type_argument3 -> reference_type3 .)
    COMMA           reduce using rule 422 (type_argument3 -> reference_type3 .)
    LBRACE          reduce using rule 422 (type_argument3 -> reference_type3 .)
    INSTANCEOF      reduce using rule 422 (type_argument3 -> reference_type3 .)
    EQL             reduce using rule 422 (type_argument3 -> reference_type3 .)
    NEQ             reduce using rule 422 (type_argument3 -> reference_type3 .)
    AND             reduce using rule 422 (type_argument3 -> reference_type3 .)
    XOR             reduce using rule 422 (type_argument3 -> reference_type3 .)
    OR              reduce using rule 422 (type_argument3 -> reference_type3 .)
    LAND            reduce using rule 422 (type_argument3 -> reference_type3 .)
    QUES            reduce using rule 422 (type_argument3 -> reference_type3 .)
    LOR             reduce using rule 422 (type_argument3 -> reference_type3 .)
    $end            reduce using rule 422 (type_argument3 -> reference_type3 .)
    SEMICOLON       reduce using rule 422 (type_argument3 -> reference_type3 .)
    COLON           reduce using rule 422 (type_argument3 -> reference_type3 .)
    RPAREN          reduce using rule 422 (type_argument3 -> reference_type3 .)
    RBRACK          reduce using rule 422 (type_argument3 -> reference_type3 .)
    RBRACE          reduce using rule 422 (type_argument3 -> reference_type3 .)
    ELLIPSIS        reduce using rule 422 (type_argument3 -> reference_type3 .)
    GTR             reduce using rule 422 (type_argument3 -> reference_type3 .)
    EXTENDS         reduce using rule 422 (type_argument3 -> reference_type3 .)
    BOOLEAN         reduce using rule 422 (type_argument3 -> reference_type3 .)
    VOID            reduce using rule 422 (type_argument3 -> reference_type3 .)
    BYTE            reduce using rule 422 (type_argument3 -> reference_type3 .)
    SHORT           reduce using rule 422 (type_argument3 -> reference_type3 .)
    INT             reduce using rule 422 (type_argument3 -> reference_type3 .)
    LONG            reduce using rule 422 (type_argument3 -> reference_type3 .)
    CHAR            reduce using rule 422 (type_argument3 -> reference_type3 .)
    FLOAT           reduce using rule 422 (type_argument3 -> reference_type3 .)
    DOUBLE          reduce using rule 422 (type_argument3 -> reference_type3 .)
    SHR             reduce using rule 422 (type_argument3 -> reference_type3 .)
    SHR_UN          reduce using rule 422 (type_argument3 -> reference_type3 .)


state 946

    (423) type_argument3 -> wildcard3 .

    SUPER           reduce using rule 423 (type_argument3 -> wildcard3 .)
    THIS            reduce using rule 423 (type_argument3 -> wildcard3 .)
    IDENT           reduce using rule 423 (type_argument3 -> wildcard3 .)
    PERIOD          reduce using rule 423 (type_argument3 -> wildcard3 .)
    LBRACK          reduce using rule 423 (type_argument3 -> wildcard3 .)
    LPAREN          reduce using rule 423 (type_argument3 -> wildcard3 .)
    COMMA           reduce using rule 423 (type_argument3 -> wildcard3 .)
    LBRACE          reduce using rule 423 (type_argument3 -> wildcard3 .)
    INSTANCEOF      reduce using rule 423 (type_argument3 -> wildcard3 .)
    EQL             reduce using rule 423 (type_argument3 -> wildcard3 .)
    NEQ             reduce using rule 423 (type_argument3 -> wildcard3 .)
    AND             reduce using rule 423 (type_argument3 -> wildcard3 .)
    XOR             reduce using rule 423 (type_argument3 -> wildcard3 .)
    OR              reduce using rule 423 (type_argument3 -> wildcard3 .)
    LAND            reduce using rule 423 (type_argument3 -> wildcard3 .)
    QUES            reduce using rule 423 (type_argument3 -> wildcard3 .)
    LOR             reduce using rule 423 (type_argument3 -> wildcard3 .)
    $end            reduce using rule 423 (type_argument3 -> wildcard3 .)
    SEMICOLON       reduce using rule 423 (type_argument3 -> wildcard3 .)
    COLON           reduce using rule 423 (type_argument3 -> wildcard3 .)
    RPAREN          reduce using rule 423 (type_argument3 -> wildcard3 .)
    RBRACK          reduce using rule 423 (type_argument3 -> wildcard3 .)
    RBRACE          reduce using rule 423 (type_argument3 -> wildcard3 .)
    ELLIPSIS        reduce using rule 423 (type_argument3 -> wildcard3 .)
    GTR             reduce using rule 423 (type_argument3 -> wildcard3 .)
    EXTENDS         reduce using rule 423 (type_argument3 -> wildcard3 .)
    BOOLEAN         reduce using rule 423 (type_argument3 -> wildcard3 .)
    VOID            reduce using rule 423 (type_argument3 -> wildcard3 .)
    BYTE            reduce using rule 423 (type_argument3 -> wildcard3 .)
    SHORT           reduce using rule 423 (type_argument3 -> wildcard3 .)
    INT             reduce using rule 423 (type_argument3 -> wildcard3 .)
    LONG            reduce using rule 423 (type_argument3 -> wildcard3 .)
    CHAR            reduce using rule 423 (type_argument3 -> wildcard3 .)
    FLOAT           reduce using rule 423 (type_argument3 -> wildcard3 .)
    DOUBLE          reduce using rule 423 (type_argument3 -> wildcard3 .)
    SHR             reduce using rule 423 (type_argument3 -> wildcard3 .)
    SHR_UN          reduce using rule 423 (type_argument3 -> wildcard3 .)


state 947

    (424) reference_type3 -> reference_type . SHR_UN
    (408) type_argument -> reference_type .
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    SHR_UN          shift and go to state 1020
    COMMA           reduce using rule 408 (type_argument -> reference_type .)
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 948

    (437) wildcard3 -> QUES . SHR_UN
    (438) wildcard3 -> QUES . wildcard_bounds3
    (433) wildcard2 -> QUES . SHR
    (434) wildcard2 -> QUES . wildcard_bounds2
    (429) wildcard1 -> QUES . GTR
    (430) wildcard1 -> QUES . wildcard_bounds1
    (425) wildcard -> QUES .
    (426) wildcard -> QUES . wildcard_bounds
    (439) wildcard_bounds3 -> . EXTENDS reference_type3
    (440) wildcard_bounds3 -> . SUPER reference_type3
    (435) wildcard_bounds2 -> . EXTENDS reference_type2
    (436) wildcard_bounds2 -> . SUPER reference_type2
    (431) wildcard_bounds1 -> . EXTENDS reference_type1
    (432) wildcard_bounds1 -> . SUPER reference_type1
    (427) wildcard_bounds -> . EXTENDS reference_type
    (428) wildcard_bounds -> . SUPER reference_type

    SHR_UN          shift and go to state 1021
    SHR             shift and go to state 868
    GTR             shift and go to state 582
    COMMA           reduce using rule 425 (wildcard -> QUES .)
    EXTENDS         shift and go to state 1023
    SUPER           shift and go to state 1024

    wildcard_bounds3               shift and go to state 1022
    wildcard_bounds2               shift and go to state 869
    wildcard_bounds1               shift and go to state 583
    wildcard_bounds                shift and go to state 584

state 949

    (415) type_argument_list2 -> type_argument_list COMMA type_argument2 .

    SUPER           reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    THIS            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    IDENT           reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    PERIOD          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    LBRACK          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    LPAREN          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    COMMA           reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    LBRACE          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    INSTANCEOF      reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    EQL             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    NEQ             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    AND             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    XOR             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    OR              reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    LAND            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    QUES            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    LOR             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    $end            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    SEMICOLON       reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    COLON           reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    RPAREN          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    RBRACK          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    RBRACE          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    ELLIPSIS        reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    GTR             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    EXTENDS         reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    BOOLEAN         reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    VOID            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    BYTE            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    SHORT           reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    INT             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    LONG            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    CHAR            reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    FLOAT           reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    DOUBLE          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    SHR             reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)
    SHR_UN          reduce using rule 415 (type_argument_list2 -> type_argument_list COMMA type_argument2 .)


state 950

    (408) type_argument -> reference_type .
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 408 (type_argument -> reference_type .)
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 951

    (435) wildcard_bounds2 -> EXTENDS reference_type2 .

    SUPER           reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    THIS            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    IDENT           reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    PERIOD          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LBRACK          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LPAREN          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    COMMA           reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LBRACE          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    INSTANCEOF      reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    EQL             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    NEQ             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    AND             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    XOR             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    OR              reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LAND            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    QUES            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LOR             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    $end            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    SEMICOLON       reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    COLON           reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    RPAREN          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    RBRACK          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    RBRACE          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ELLIPSIS        reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    GTR             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    EXTENDS         reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    BOOLEAN         reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    VOID            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    BYTE            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    SHORT           reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    INT             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LONG            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    CHAR            reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    FLOAT           reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    DOUBLE          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    SHR             reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    SHR_UN          reduce using rule 435 (wildcard_bounds2 -> EXTENDS reference_type2 .)


state 952

    (427) wildcard_bounds -> EXTENDS reference_type .
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 427 (wildcard_bounds -> EXTENDS reference_type .)
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 953

    (436) wildcard_bounds2 -> SUPER reference_type2 .

    SUPER           reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    THIS            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    IDENT           reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    PERIOD          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    LBRACK          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    LPAREN          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    COMMA           reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    LBRACE          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    INSTANCEOF      reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    EQL             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    NEQ             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    AND             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    XOR             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    OR              reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    LAND            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    QUES            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    LOR             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    $end            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    SEMICOLON       reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    COLON           reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    RPAREN          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    RBRACK          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    RBRACE          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    ELLIPSIS        reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    GTR             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    EXTENDS         reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    BOOLEAN         reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    VOID            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    BYTE            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    SHORT           reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    INT             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    LONG            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    CHAR            reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    FLOAT           reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    DOUBLE          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    SHR             reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)
    SHR_UN          reduce using rule 436 (wildcard_bounds2 -> SUPER reference_type2 .)


state 954

    (428) wildcard_bounds -> SUPER reference_type .
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 428 (wildcard_bounds -> SUPER reference_type .)
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 955

    (502) method_body -> LBRACE block_statements_opt dec_scope . RBRACE

    RBRACE          shift and go to state 1025


state 956

    (488) constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .

    PUBLIC          reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    PROTECTED       reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    PRIVATE         reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    STATIC          reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    ABSTRACT        reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    FINAL           reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    NATIVE          reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    SYNCHRONIZED    reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    TRANSIENT       reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    VOLATILE        reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    STRICTFP        reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    ATRATE          reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    RPAREN          reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    BOOLEAN         reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    VOID            reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    BYTE            reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    SHORT           reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    INT             reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    LONG            reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    CHAR            reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    FLOAT           reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    DOUBLE          reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)
    IDENT           reduce using rule 488 (constructor_header_name -> modifiers_opt type_parameters IDENT LPAREN .)


state 957

    (487) constructor_header -> constructor_header_name formal_parameter_list_opt RPAREN method_header_throws_clause_opt .

    LBRACE          reduce using rule 487 (constructor_header -> constructor_header_name formal_parameter_list_opt RPAREN method_header_throws_clause_opt .)


state 958

    (496) method_header_throws_clause_opt -> method_header_throws_clause .

    LBRACE          reduce using rule 496 (method_header_throws_clause_opt -> method_header_throws_clause .)
    SEMICOLON       reduce using rule 496 (method_header_throws_clause_opt -> method_header_throws_clause .)


state 959

    (497) method_header_throws_clause_opt -> empty .

    LBRACE          reduce using rule 497 (method_header_throws_clause_opt -> empty .)
    SEMICOLON       reduce using rule 497 (method_header_throws_clause_opt -> empty .)


state 960

    (498) method_header_throws_clause -> THROWS . class_type_list
    (499) class_type_list -> . class_type_elt
    (500) class_type_list -> . class_type_list COMMA class_type_elt
    (501) class_type_elt -> . class_type
    (394) class_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    class_type_list                shift and go to state 1026
    class_type_elt                 shift and go to state 1027
    class_type                     shift and go to state 1028
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 961

    (507) method_header -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims . method_header_throws_clause_opt
    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims . method_header_throws_clause_opt dec_scope
    (496) method_header_throws_clause_opt -> . method_header_throws_clause
    (497) method_header_throws_clause_opt -> . empty
    (498) method_header_throws_clause -> . THROWS class_type_list
    (583) empty -> .

    THROWS          shift and go to state 960
    LBRACE          reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)

    method_header_throws_clause_opt shift and go to state 1029
    method_header_throws_clause    shift and go to state 958
    empty                          shift and go to state 959

state 962

    (508) method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .

    PUBLIC          reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    PROTECTED       reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    PRIVATE         reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    STATIC          reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    ABSTRACT        reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    FINAL           reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    NATIVE          reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    SYNCHRONIZED    reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    TRANSIENT       reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    VOLATILE        reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    STRICTFP        reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    ATRATE          reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    RPAREN          reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    BOOLEAN         reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    VOID            reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    BYTE            reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    SHORT           reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    INT             reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    LONG            reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    CHAR            reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    FLOAT           reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    DOUBLE          reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)
    IDENT           reduce using rule 508 (method_header_name -> modifiers_opt type_parameters type IDENT LPAREN .)


state 963

    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt . dec_scope
    (585) dec_scope -> .

    SEMICOLON       reduce using rule 585 (dec_scope -> .)

    dec_scope                      shift and go to state 1030

state 964

    (495) formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id .

    COMMA           reduce using rule 495 (formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id .)
    RPAREN          reduce using rule 495 (formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id .)


state 965

    (457) additional_bound_list1 -> additional_bound_list additional_bound1 .

    LBRACE          reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    EXTENDS         reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    BOOLEAN         reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    VOID            reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    BYTE            reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    SHORT           reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    INT             reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    LONG            reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    CHAR            reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    FLOAT           reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    DOUBLE          reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    IDENT           reduce using rule 457 (additional_bound_list1 -> additional_bound_list additional_bound1 .)


state 966

    (449) additional_bound_list -> additional_bound_list additional_bound .

    AND             reduce using rule 449 (additional_bound_list -> additional_bound_list additional_bound .)
    COMMA           reduce using rule 449 (additional_bound_list -> additional_bound_list additional_bound .)


state 967

    (458) additional_bound1 -> AND reference_type1 .

    LBRACE          reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    EXTENDS         reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    BOOLEAN         reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    VOID            reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    BYTE            reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    SHORT           reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    INT             reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    LONG            reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    CHAR            reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    FLOAT           reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    DOUBLE          reduce using rule 458 (additional_bound1 -> AND reference_type1 .)
    IDENT           reduce using rule 458 (additional_bound1 -> AND reference_type1 .)


state 968

    (450) additional_bound -> AND reference_type .
    (412) reference_type1 -> reference_type . GTR

    AND             reduce using rule 450 (additional_bound -> AND reference_type .)
    COMMA           reduce using rule 450 (additional_bound -> AND reference_type .)
    GTR             shift and go to state 580


state 969

    (329) class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt . RPAREN class_body_opt

    RPAREN          shift and go to state 1031


state 970

    (330) class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN . class_body_opt
    (334) class_body_opt -> . class_body
    (335) class_body_opt -> . empty
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
    (583) empty -> .

    LBRACE          shift and go to state 200
    LBRACK          reduce using rule 583 (empty -> .)
    PERIOD          reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    MUL_ASSIGN      reduce using rule 583 (empty -> .)
    QUO_ASSIGN      reduce using rule 583 (empty -> .)
    REM_ASSIGN      reduce using rule 583 (empty -> .)
    ADD_ASSIGN      reduce using rule 583 (empty -> .)
    SUB_ASSIGN      reduce using rule 583 (empty -> .)
    SHL_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_UN_ASSIGN   reduce using rule 583 (empty -> .)
    AND_ASSIGN      reduce using rule 583 (empty -> .)
    OR_ASSIGN       reduce using rule 583 (empty -> .)
    XOR_ASSIGN      reduce using rule 583 (empty -> .)
    MUL             reduce using rule 583 (empty -> .)
    QUO             reduce using rule 583 (empty -> .)
    REM             reduce using rule 583 (empty -> .)
    ADD             reduce using rule 583 (empty -> .)
    SUB             reduce using rule 583 (empty -> .)
    SHL             reduce using rule 583 (empty -> .)
    SHR             reduce using rule 583 (empty -> .)
    SHR_UN          reduce using rule 583 (empty -> .)
    GTR             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    GEQ             reduce using rule 583 (empty -> .)
    LEQ             reduce using rule 583 (empty -> .)
    INSTANCEOF      reduce using rule 583 (empty -> .)
    EQL             reduce using rule 583 (empty -> .)
    NEQ             reduce using rule 583 (empty -> .)
    AND             reduce using rule 583 (empty -> .)
    XOR             reduce using rule 583 (empty -> .)
    OR              reduce using rule 583 (empty -> .)
    LAND            reduce using rule 583 (empty -> .)
    QUES            reduce using rule 583 (empty -> .)
    LOR             reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    COLON           reduce using rule 583 (empty -> .)
    RBRACK          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)

    class_body_opt                 shift and go to state 1032
    class_body                     shift and go to state 911
    empty                          shift and go to state 912

state 971

    (222) method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 222 (method_invocation -> primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)


state 972

    (221) method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 221 (method_invocation -> name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)


state 973

    (162) cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN . unary_expression_not_plus_minus
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (333) class_instance_creation_expression_name -> . name PERIOD

    LNOT            shift and go to state 112
    NOT             shift and go to state 113
    LPAREN          shift and go to state 217
    THIS            shift and go to state 68
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    name                           shift and go to state 56
    unary_expression_not_plus_minus shift and go to state 1033
    postfix_expression             shift and go to state 216
    cast_expression                shift and go to state 114
    primary                        shift and go to state 55
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    primitive_type                 shift and go to state 75
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    class_instance_creation_expression_name shift and go to state 89

state 974

    (223) method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .

    LBRACK          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    PERIOD          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    INC             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    DEC             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    MUL_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUO_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    REM_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ADD_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SUB_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHL_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN_ASSIGN   reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    AND_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    OR_ASSIGN       reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    XOR_ASSIGN      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    MUL             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUO             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    REM             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    ADD             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SUB             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHL             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SHR_UN          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    GTR             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LSS             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    INSTANCEOF      reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    EQL             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    XOR             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LAND            reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    QUES            reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    LOR             reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    $end            reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    COLON           reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RBRACK          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 223 (method_invocation -> SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN .)


state 975

    (217) array_initializer -> LBRACE variable_initializers COMMA RBRACE .

    LBRACK          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    PERIOD          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    INC             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    DEC             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    ASSIGN          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    MUL_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    QUO_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    REM_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    ADD_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SUB_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SHL_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SHR_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SHR_UN_ASSIGN   reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    AND_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    OR_ASSIGN       reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    XOR_ASSIGN      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    MUL             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    QUO             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    REM             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    ADD             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SUB             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SHL             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SHR             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SHR_UN          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    GTR             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    LSS             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    GEQ             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    LEQ             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    INSTANCEOF      reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    EQL             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    NEQ             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    AND             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    XOR             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    OR              reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    LAND            reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    QUES            reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    LOR             reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    $end            reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    SEMICOLON       reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    RPAREN          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    COLON           reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    RBRACK          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    COMMA           reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)
    RBRACE          reduce using rule 217 (array_initializer -> LBRACE variable_initializers COMMA RBRACE .)


state 976

    (219) variable_initializers -> variable_initializers COMMA variable_initializer .

    RBRACE          reduce using rule 219 (variable_initializers -> variable_initializers COMMA variable_initializer .)
    COMMA           reduce using rule 219 (variable_initializers -> variable_initializers COMMA variable_initializer .)


state 977

    (327) class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .

    LBRACK          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    PERIOD          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INC             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    DEC             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ASSIGN          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN_ASSIGN   reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR_ASSIGN       reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR_ASSIGN      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GTR             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LSS             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GEQ             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LEQ             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INSTANCEOF      reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    EQL             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    NEQ             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR              reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LAND            reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUES            reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LOR             reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    $end            reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SEMICOLON       reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RPAREN          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COLON           reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACK          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COMMA           reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACE          reduce using rule 327 (class_instance_creation_expression -> NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)


state 978

    (331) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .

    LBRACK          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    PERIOD          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INC             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    DEC             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ASSIGN          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN_ASSIGN   reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR_ASSIGN       reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR_ASSIGN      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GTR             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LSS             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GEQ             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LEQ             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INSTANCEOF      reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    EQL             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    NEQ             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR              reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LAND            reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUES            reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LOR             reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    $end            reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SEMICOLON       reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RPAREN          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COLON           reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACK          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COMMA           reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACE          reduce using rule 331 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)


state 979

    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN . class_body_opt
    (334) class_body_opt -> . class_body
    (335) class_body_opt -> . empty
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
    (583) empty -> .

    LBRACE          shift and go to state 200
    LBRACK          reduce using rule 583 (empty -> .)
    PERIOD          reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    MUL_ASSIGN      reduce using rule 583 (empty -> .)
    QUO_ASSIGN      reduce using rule 583 (empty -> .)
    REM_ASSIGN      reduce using rule 583 (empty -> .)
    ADD_ASSIGN      reduce using rule 583 (empty -> .)
    SUB_ASSIGN      reduce using rule 583 (empty -> .)
    SHL_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_UN_ASSIGN   reduce using rule 583 (empty -> .)
    AND_ASSIGN      reduce using rule 583 (empty -> .)
    OR_ASSIGN       reduce using rule 583 (empty -> .)
    XOR_ASSIGN      reduce using rule 583 (empty -> .)
    MUL             reduce using rule 583 (empty -> .)
    QUO             reduce using rule 583 (empty -> .)
    REM             reduce using rule 583 (empty -> .)
    ADD             reduce using rule 583 (empty -> .)
    SUB             reduce using rule 583 (empty -> .)
    SHL             reduce using rule 583 (empty -> .)
    SHR             reduce using rule 583 (empty -> .)
    SHR_UN          reduce using rule 583 (empty -> .)
    GTR             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    GEQ             reduce using rule 583 (empty -> .)
    LEQ             reduce using rule 583 (empty -> .)
    INSTANCEOF      reduce using rule 583 (empty -> .)
    EQL             reduce using rule 583 (empty -> .)
    NEQ             reduce using rule 583 (empty -> .)
    AND             reduce using rule 583 (empty -> .)
    XOR             reduce using rule 583 (empty -> .)
    OR              reduce using rule 583 (empty -> .)
    LAND            reduce using rule 583 (empty -> .)
    QUES            reduce using rule 583 (empty -> .)
    LOR             reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    COLON           reduce using rule 583 (empty -> .)
    RBRACK          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)

    class_body_opt                 shift and go to state 1034
    class_body                     shift and go to state 911
    empty                          shift and go to state 912

state 980

    (230) if_then_statement -> IF . LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF . LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF . LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2

    LPAREN          shift and go to state 1035


state 981

    (230) if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement . label_for_if1
    (231) label_for_if1 -> .

    $end            reduce using rule 231 (label_for_if1 -> .)
    WHILE           reduce using rule 231 (label_for_if1 -> .)
    IF              reduce using rule 231 (label_for_if1 -> .)
    FOR             reduce using rule 231 (label_for_if1 -> .)
    LBRACE          reduce using rule 231 (label_for_if1 -> .)
    ASSERT          reduce using rule 231 (label_for_if1 -> .)
    SEMICOLON       reduce using rule 231 (label_for_if1 -> .)
    SWITCH          reduce using rule 231 (label_for_if1 -> .)
    DO              reduce using rule 231 (label_for_if1 -> .)
    BREAK           reduce using rule 231 (label_for_if1 -> .)
    CONTINUE        reduce using rule 231 (label_for_if1 -> .)
    RETURN          reduce using rule 231 (label_for_if1 -> .)
    SYNCHRONIZED    reduce using rule 231 (label_for_if1 -> .)
    THROW           reduce using rule 231 (label_for_if1 -> .)
    TRY             reduce using rule 231 (label_for_if1 -> .)
    IDENT           reduce using rule 231 (label_for_if1 -> .)
    BOOLEAN         reduce using rule 231 (label_for_if1 -> .)
    VOID            reduce using rule 231 (label_for_if1 -> .)
    BYTE            reduce using rule 231 (label_for_if1 -> .)
    SHORT           reduce using rule 231 (label_for_if1 -> .)
    INT             reduce using rule 231 (label_for_if1 -> .)
    LONG            reduce using rule 231 (label_for_if1 -> .)
    CHAR            reduce using rule 231 (label_for_if1 -> .)
    FLOAT           reduce using rule 231 (label_for_if1 -> .)
    DOUBLE          reduce using rule 231 (label_for_if1 -> .)
    PUBLIC          reduce using rule 231 (label_for_if1 -> .)
    PROTECTED       reduce using rule 231 (label_for_if1 -> .)
    PRIVATE         reduce using rule 231 (label_for_if1 -> .)
    STATIC          reduce using rule 231 (label_for_if1 -> .)
    ABSTRACT        reduce using rule 231 (label_for_if1 -> .)
    FINAL           reduce using rule 231 (label_for_if1 -> .)
    NATIVE          reduce using rule 231 (label_for_if1 -> .)
    TRANSIENT       reduce using rule 231 (label_for_if1 -> .)
    VOLATILE        reduce using rule 231 (label_for_if1 -> .)
    STRICTFP        reduce using rule 231 (label_for_if1 -> .)
    THIS            reduce using rule 231 (label_for_if1 -> .)
    SUPER           reduce using rule 231 (label_for_if1 -> .)
    INC             reduce using rule 231 (label_for_if1 -> .)
    DEC             reduce using rule 231 (label_for_if1 -> .)
    NEW             reduce using rule 231 (label_for_if1 -> .)
    LSS             reduce using rule 231 (label_for_if1 -> .)
    LPAREN          reduce using rule 231 (label_for_if1 -> .)
    ATRATE          reduce using rule 231 (label_for_if1 -> .)
    HEX_LIT         reduce using rule 231 (label_for_if1 -> .)
    OCTAL_LIT       reduce using rule 231 (label_for_if1 -> .)
    BINARY_LIT      reduce using rule 231 (label_for_if1 -> .)
    DECIMAL_LIT     reduce using rule 231 (label_for_if1 -> .)
    FLOAT_HEX_LIT   reduce using rule 231 (label_for_if1 -> .)
    FLOAT_DEC_LIT   reduce using rule 231 (label_for_if1 -> .)
    CHAR_LIT        reduce using rule 231 (label_for_if1 -> .)
    STRING_LIT      reduce using rule 231 (label_for_if1 -> .)
    BOOL_LIT        reduce using rule 231 (label_for_if1 -> .)
    NULL_LIT        reduce using rule 231 (label_for_if1 -> .)
    CLASS           reduce using rule 231 (label_for_if1 -> .)
    INTERFACE       reduce using rule 231 (label_for_if1 -> .)
    RBRACE          reduce using rule 231 (label_for_if1 -> .)
    CASE            reduce using rule 231 (label_for_if1 -> .)
    DEFAULT         reduce using rule 231 (label_for_if1 -> .)

    label_for_if1                  shift and go to state 1036

state 982

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if . ELSE label_for_if3 statement label_for_if2

    ELSE            shift and go to state 1037


state 983

    (184) statement -> statement_without_trailing_substatement .
    (262) statement_no_short_if -> statement_without_trailing_substatement .

    $end            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    WHILE           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    IF              reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FOR             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LBRACE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ASSERT          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SEMICOLON       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SWITCH          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DO              reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BREAK           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CONTINUE        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    RETURN          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SYNCHRONIZED    reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    THROW           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    TRY             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    IDENT           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BOOLEAN         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    VOID            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BYTE            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SHORT           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    INT             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LONG            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CHAR            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FLOAT           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DOUBLE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    PUBLIC          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    PROTECTED       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    PRIVATE         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    STATIC          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ABSTRACT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FINAL           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    NATIVE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    TRANSIENT       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    VOLATILE        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    STRICTFP        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    THIS            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    SUPER           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    INC             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DEC             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    NEW             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LSS             reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    LPAREN          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ATRATE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    HEX_LIT         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    OCTAL_LIT       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BINARY_LIT      reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DECIMAL_LIT     reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FLOAT_HEX_LIT   reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    FLOAT_DEC_LIT   reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CHAR_LIT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    STRING_LIT      reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    BOOL_LIT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    NULL_LIT        reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CLASS           reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    INTERFACE       reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    RBRACE          reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    CASE            reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    DEFAULT         reduce using rule 184 (statement -> statement_without_trailing_substatement .)
    ELSE            reduce using rule 262 (statement_no_short_if -> statement_without_trailing_substatement .)


state 984

    (263) statement_no_short_if -> labeled_statement_no_short_if .

    ELSE            reduce using rule 263 (statement_no_short_if -> labeled_statement_no_short_if .)


state 985

    (264) statement_no_short_if -> if_then_else_statement_no_short_if .

    ELSE            reduce using rule 264 (statement_no_short_if -> if_then_else_statement_no_short_if .)


state 986

    (265) statement_no_short_if -> while_statement_no_short_if .

    ELSE            reduce using rule 265 (statement_no_short_if -> while_statement_no_short_if .)


state 987

    (266) statement_no_short_if -> for_statement_no_short_if .

    ELSE            reduce using rule 266 (statement_no_short_if -> for_statement_no_short_if .)


state 988

    (267) statement_no_short_if -> enhanced_for_statement_no_short_if .

    ELSE            reduce using rule 267 (statement_no_short_if -> enhanced_for_statement_no_short_if .)


state 989

    (227) labeled_statement -> label . COLON statement
    (228) labeled_statement_no_short_if -> label . COLON statement_no_short_if

    COLON           shift and go to state 1038


state 990

    (236) while_statement -> WHILE . inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE . inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (238) inc_for_while_stack -> .

    LPAREN          reduce using rule 238 (inc_for_while_stack -> .)

    inc_for_while_stack            shift and go to state 1039

state 991

    (241) for_statement -> FOR . inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR . inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (260) enhanced_for_statement_header_init -> FOR . inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR . inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (238) inc_for_while_stack -> .

    LPAREN          reduce using rule 238 (inc_for_while_stack -> .)

    inc_for_while_stack            shift and go to state 1040

state 992

    (257) enhanced_for_statement -> enhanced_for_statement_header . statement
    (258) enhanced_for_statement_no_short_if -> enhanced_for_statement_header . statement_no_short_if
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    enhanced_for_statement_header  shift and go to state 992
    statement                      shift and go to state 322
    statement_no_short_if          shift and go to state 1041
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 989
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 993

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN . label_for_while1 statement label_for_while2
    (239) label_for_while1 -> .

    IF              reduce using rule 239 (label_for_while1 -> .)
    WHILE           reduce using rule 239 (label_for_while1 -> .)
    FOR             reduce using rule 239 (label_for_while1 -> .)
    LBRACE          reduce using rule 239 (label_for_while1 -> .)
    ASSERT          reduce using rule 239 (label_for_while1 -> .)
    SEMICOLON       reduce using rule 239 (label_for_while1 -> .)
    SWITCH          reduce using rule 239 (label_for_while1 -> .)
    DO              reduce using rule 239 (label_for_while1 -> .)
    BREAK           reduce using rule 239 (label_for_while1 -> .)
    CONTINUE        reduce using rule 239 (label_for_while1 -> .)
    RETURN          reduce using rule 239 (label_for_while1 -> .)
    SYNCHRONIZED    reduce using rule 239 (label_for_while1 -> .)
    THROW           reduce using rule 239 (label_for_while1 -> .)
    TRY             reduce using rule 239 (label_for_while1 -> .)
    IDENT           reduce using rule 239 (label_for_while1 -> .)
    THIS            reduce using rule 239 (label_for_while1 -> .)
    SUPER           reduce using rule 239 (label_for_while1 -> .)
    INC             reduce using rule 239 (label_for_while1 -> .)
    DEC             reduce using rule 239 (label_for_while1 -> .)
    NEW             reduce using rule 239 (label_for_while1 -> .)
    LSS             reduce using rule 239 (label_for_while1 -> .)
    LPAREN          reduce using rule 239 (label_for_while1 -> .)
    HEX_LIT         reduce using rule 239 (label_for_while1 -> .)
    OCTAL_LIT       reduce using rule 239 (label_for_while1 -> .)
    BINARY_LIT      reduce using rule 239 (label_for_while1 -> .)
    DECIMAL_LIT     reduce using rule 239 (label_for_while1 -> .)
    FLOAT_HEX_LIT   reduce using rule 239 (label_for_while1 -> .)
    FLOAT_DEC_LIT   reduce using rule 239 (label_for_while1 -> .)
    CHAR_LIT        reduce using rule 239 (label_for_while1 -> .)
    STRING_LIT      reduce using rule 239 (label_for_while1 -> .)
    BOOL_LIT        reduce using rule 239 (label_for_while1 -> .)
    NULL_LIT        reduce using rule 239 (label_for_while1 -> .)
    BOOLEAN         reduce using rule 239 (label_for_while1 -> .)
    VOID            reduce using rule 239 (label_for_while1 -> .)
    BYTE            reduce using rule 239 (label_for_while1 -> .)
    SHORT           reduce using rule 239 (label_for_while1 -> .)
    INT             reduce using rule 239 (label_for_while1 -> .)
    LONG            reduce using rule 239 (label_for_while1 -> .)
    CHAR            reduce using rule 239 (label_for_while1 -> .)
    FLOAT           reduce using rule 239 (label_for_while1 -> .)
    DOUBLE          reduce using rule 239 (label_for_while1 -> .)

    label_for_while1               shift and go to state 1042

state 994

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 . expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (252) expression_opt -> . expression
    (253) expression_opt -> . empty
    (1) expression -> . assignment_expression
    (583) empty -> .
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    SEMICOLON       reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression_opt                 shift and go to state 1043
    expression                     shift and go to state 336
    empty                          shift and go to state 337
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 995

    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt .
    (181) variable_declarator_id -> IDENT dims_opt .

    COLON           reduce using rule 260 (enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt .)
    ASSIGN          reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    COMMA           reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    SEMICOLON       reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)


state 996

    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT . dims_opt
    (181) variable_declarator_id -> IDENT . dims_opt
    (154) dims_opt -> . dims
    (155) dims_opt -> . empty
    (156) dims -> . dims_loop
    (583) empty -> .
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    COLON           reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    LBRACK          shift and go to state 279

    dims_opt                       shift and go to state 1044
    dims                           shift and go to state 531
    empty                          shift and go to state 467
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 997

    (251) statement_expression_list -> statement_expression_list COMMA statement_expression .

    COMMA           reduce using rule 251 (statement_expression_list -> statement_expression_list COMMA statement_expression .)
    SEMICOLON       reduce using rule 251 (statement_expression_list -> statement_expression_list COMMA statement_expression .)
    RPAREN          reduce using rule 251 (statement_expression_list -> statement_expression_list COMMA statement_expression .)


state 998

    (221) method_invocation -> name . PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name . PERIOD IDENT LPAREN argument_list_opt RPAREN
    (129) postfix_expression -> name .
    (333) class_instance_creation_expression_name -> name . PERIOD
    (352) qualified_name -> name . PERIOD simple_name
    (148) primary_no_new_array -> name . PERIOD THIS
    (149) primary_no_new_array -> name . PERIOD SUPER
    (150) primary_no_new_array -> name . PERIOD CLASS
    (151) primary_no_new_array -> name . dims PERIOD CLASS
    (338) array_access -> name . LBRACK expression RBRACK
    (156) dims -> . dims_loop
    (157) dims_loop -> . one_dim_loop
    (158) dims_loop -> . dims_loop one_dim_loop
    (159) one_dim_loop -> . LBRACK RBRACK

    PERIOD          shift and go to state 1045
    INC             reduce using rule 129 (postfix_expression -> name .)
    DEC             reduce using rule 129 (postfix_expression -> name .)
    ASSIGN          reduce using rule 129 (postfix_expression -> name .)
    MUL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    QUO_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    REM_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    ADD_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SUB_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHL_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    SHR_UN_ASSIGN   reduce using rule 129 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> name .)
    LBRACK          shift and go to state 238

    dims                           shift and go to state 237
    dims_loop                      shift and go to state 239
    one_dim_loop                   shift and go to state 240

state 999

    (272) switch_block -> LBRACE RBRACE .

    $end            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    WHILE           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    IF              reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    FOR             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    ASSERT          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    DO              reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    BREAK           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    RETURN          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    SYNCHRONIZED    reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    THROW           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    TRY             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    IDENT           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    VOID            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    BYTE            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    SHORT           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    INT             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    LONG            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    CHAR            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    FLOAT           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    STATIC          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    ABSTRACT        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    FINAL           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    NATIVE          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    TRANSIENT       reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    STRICTFP        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    THIS            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    SUPER           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    INC             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    DEC             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    NEW             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    LSS             reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    ATRATE          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    HEX_LIT         reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    OCTAL_LIT       reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    BINARY_LIT      reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    DECIMAL_LIT     reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    CHAR_LIT        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    STRING_LIT      reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    BOOL_LIT        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    NULL_LIT        reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    CLASS           reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    INTERFACE       reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    CASE            reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 272 (switch_block -> LBRACE RBRACE .)
    ELSE            reduce using rule 272 (switch_block -> LBRACE RBRACE .)


state 1000

    (273) switch_block -> LBRACE switch_block_statements . dec_scope RBRACE
    (275) switch_block -> LBRACE switch_block_statements . switch_labels dec_scope RBRACE
    (277) switch_block_statements -> switch_block_statements . switch_block_statement
    (585) dec_scope -> .
    (279) switch_labels -> . switch_label
    (280) switch_labels -> . switch_labels switch_label
    (278) switch_block_statement -> . switch_labels block_statements
    (281) switch_label -> . CASE constant_expression COLON
    (282) switch_label -> . DEFAULT COLON

    RBRACE          reduce using rule 585 (dec_scope -> .)
    CASE            shift and go to state 1004
    DEFAULT         shift and go to state 1005

    dec_scope                      shift and go to state 1046
    switch_labels                  shift and go to state 1047
    switch_block_statement         shift and go to state 1048
    switch_label                   shift and go to state 1003

state 1001

    (274) switch_block -> LBRACE switch_labels . dec_scope RBRACE
    (280) switch_labels -> switch_labels . switch_label
    (278) switch_block_statement -> switch_labels . block_statements
    (585) dec_scope -> .
    (281) switch_label -> . CASE constant_expression COLON
    (282) switch_label -> . DEFAULT COLON
    (168) block_statements -> . block_statement
    (169) block_statements -> . block_statements block_statement
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (583) empty -> .
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    RBRACE          reduce using rule 585 (dec_scope -> .)
    CASE            shift and go to state 1004
    DEFAULT         shift and go to state 1005
    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    dec_scope                      shift and go to state 1049
    switch_label                   shift and go to state 1050
    block_statements               shift and go to state 1051
    block_statement                shift and go to state 544
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 1002

    (276) switch_block_statements -> switch_block_statement .

    CASE            reduce using rule 276 (switch_block_statements -> switch_block_statement .)
    DEFAULT         reduce using rule 276 (switch_block_statements -> switch_block_statement .)
    RBRACE          reduce using rule 276 (switch_block_statements -> switch_block_statement .)


state 1003

    (279) switch_labels -> switch_label .

    CASE            reduce using rule 279 (switch_labels -> switch_label .)
    DEFAULT         reduce using rule 279 (switch_labels -> switch_label .)
    IF              reduce using rule 279 (switch_labels -> switch_label .)
    WHILE           reduce using rule 279 (switch_labels -> switch_label .)
    FOR             reduce using rule 279 (switch_labels -> switch_label .)
    LBRACE          reduce using rule 279 (switch_labels -> switch_label .)
    ASSERT          reduce using rule 279 (switch_labels -> switch_label .)
    SEMICOLON       reduce using rule 279 (switch_labels -> switch_label .)
    SWITCH          reduce using rule 279 (switch_labels -> switch_label .)
    DO              reduce using rule 279 (switch_labels -> switch_label .)
    BREAK           reduce using rule 279 (switch_labels -> switch_label .)
    CONTINUE        reduce using rule 279 (switch_labels -> switch_label .)
    RETURN          reduce using rule 279 (switch_labels -> switch_label .)
    SYNCHRONIZED    reduce using rule 279 (switch_labels -> switch_label .)
    THROW           reduce using rule 279 (switch_labels -> switch_label .)
    TRY             reduce using rule 279 (switch_labels -> switch_label .)
    IDENT           reduce using rule 279 (switch_labels -> switch_label .)
    BOOLEAN         reduce using rule 279 (switch_labels -> switch_label .)
    VOID            reduce using rule 279 (switch_labels -> switch_label .)
    BYTE            reduce using rule 279 (switch_labels -> switch_label .)
    SHORT           reduce using rule 279 (switch_labels -> switch_label .)
    INT             reduce using rule 279 (switch_labels -> switch_label .)
    LONG            reduce using rule 279 (switch_labels -> switch_label .)
    CHAR            reduce using rule 279 (switch_labels -> switch_label .)
    FLOAT           reduce using rule 279 (switch_labels -> switch_label .)
    DOUBLE          reduce using rule 279 (switch_labels -> switch_label .)
    PUBLIC          reduce using rule 279 (switch_labels -> switch_label .)
    PROTECTED       reduce using rule 279 (switch_labels -> switch_label .)
    PRIVATE         reduce using rule 279 (switch_labels -> switch_label .)
    STATIC          reduce using rule 279 (switch_labels -> switch_label .)
    ABSTRACT        reduce using rule 279 (switch_labels -> switch_label .)
    FINAL           reduce using rule 279 (switch_labels -> switch_label .)
    NATIVE          reduce using rule 279 (switch_labels -> switch_label .)
    TRANSIENT       reduce using rule 279 (switch_labels -> switch_label .)
    VOLATILE        reduce using rule 279 (switch_labels -> switch_label .)
    STRICTFP        reduce using rule 279 (switch_labels -> switch_label .)
    THIS            reduce using rule 279 (switch_labels -> switch_label .)
    SUPER           reduce using rule 279 (switch_labels -> switch_label .)
    INC             reduce using rule 279 (switch_labels -> switch_label .)
    DEC             reduce using rule 279 (switch_labels -> switch_label .)
    NEW             reduce using rule 279 (switch_labels -> switch_label .)
    LSS             reduce using rule 279 (switch_labels -> switch_label .)
    LPAREN          reduce using rule 279 (switch_labels -> switch_label .)
    ATRATE          reduce using rule 279 (switch_labels -> switch_label .)
    HEX_LIT         reduce using rule 279 (switch_labels -> switch_label .)
    OCTAL_LIT       reduce using rule 279 (switch_labels -> switch_label .)
    BINARY_LIT      reduce using rule 279 (switch_labels -> switch_label .)
    DECIMAL_LIT     reduce using rule 279 (switch_labels -> switch_label .)
    FLOAT_HEX_LIT   reduce using rule 279 (switch_labels -> switch_label .)
    FLOAT_DEC_LIT   reduce using rule 279 (switch_labels -> switch_label .)
    CHAR_LIT        reduce using rule 279 (switch_labels -> switch_label .)
    STRING_LIT      reduce using rule 279 (switch_labels -> switch_label .)
    BOOL_LIT        reduce using rule 279 (switch_labels -> switch_label .)
    NULL_LIT        reduce using rule 279 (switch_labels -> switch_label .)
    RBRACE          reduce using rule 279 (switch_labels -> switch_label .)
    CLASS           reduce using rule 279 (switch_labels -> switch_label .)
    INTERFACE       reduce using rule 279 (switch_labels -> switch_label .)


state 1004

    (281) switch_label -> CASE . constant_expression COLON
    (283) constant_expression -> . expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    constant_expression            shift and go to state 1052
    expression                     shift and go to state 1053
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 1005

    (282) switch_label -> DEFAULT . COLON

    COLON           shift and go to state 1054


state 1006

    (284) do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    $end            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASSERT          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THROW           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENT           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BYTE            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FINAL           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NATIVE          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SUPER           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INC             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEC             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LSS             reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ATRATE          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 284 (do_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 1007

    (299) catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .

    CATCH           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    $end            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    WHILE           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    IF              reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    FOR             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    LBRACE          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    ASSERT          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    SEMICOLON       reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    SWITCH          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    DO              reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    BREAK           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    CONTINUE        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    RETURN          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    SYNCHRONIZED    reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    THROW           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    TRY             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    IDENT           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    BOOLEAN         reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    VOID            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    BYTE            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    SHORT           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    INT             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    LONG            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    CHAR            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    FLOAT           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    DOUBLE          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    PUBLIC          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    PROTECTED       reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    PRIVATE         reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    STATIC          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    ABSTRACT        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    FINAL           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    NATIVE          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    TRANSIENT       reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    VOLATILE        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    STRICTFP        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    THIS            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    SUPER           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    INC             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    DEC             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    NEW             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    LSS             reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    LPAREN          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    ATRATE          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    HEX_LIT         reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    OCTAL_LIT       reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    BINARY_LIT      reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    DECIMAL_LIT     reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    FLOAT_HEX_LIT   reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    FLOAT_DEC_LIT   reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    CHAR_LIT        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    STRING_LIT      reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    BOOL_LIT        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    NULL_LIT        reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    CLASS           reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    INTERFACE       reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    RBRACE          reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    CASE            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    DEFAULT         reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    FINALLY         reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)
    ELSE            reduce using rule 299 (catch_clause -> CATCH LPAREN catch_formal_parameter RPAREN block .)


state 1008

    (300) catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id .

    RPAREN          reduce using rule 300 (catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id .)


state 1009

    (303) union_type -> union_type OR . type
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type                           shift and go to state 1055
    primitive_type                 shift and go to state 315
    reference_type                 shift and go to state 152
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 316
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 1010

    (313) resource -> modifiers type variable_declarator_id ASSIGN variable_initializer .

    SEMICOLON       reduce using rule 313 (resource -> modifiers type variable_declarator_id ASSIGN variable_initializer .)
    RPAREN          reduce using rule 313 (resource -> modifiers type variable_declarator_id ASSIGN variable_initializer .)


state 1011

    (319) explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 319 (explicit_constructor_invocation -> primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1012

    (321) explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 321 (explicit_constructor_invocation -> primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1013

    (323) explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1056


state 1014

    (325) explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1057


state 1015

    (320) explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 320 (explicit_constructor_invocation -> name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1016

    (322) explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 322 (explicit_constructor_invocation -> name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1017

    (324) explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1058


state 1018

    (326) explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 1059


state 1019

    (421) type_argument_list3 -> type_argument_list COMMA . type_argument3
    (415) type_argument_list2 -> type_argument_list COMMA . type_argument2
    (405) type_argument_list1 -> type_argument_list COMMA . type_argument1
    (407) type_argument_list -> type_argument_list COMMA . type_argument
    (422) type_argument3 -> . reference_type3
    (423) type_argument3 -> . wildcard3
    (416) type_argument2 -> . reference_type2
    (417) type_argument2 -> . wildcard2
    (410) type_argument1 -> . reference_type1
    (411) type_argument1 -> . wildcard1
    (408) type_argument -> . reference_type
    (409) type_argument -> . wildcard
    (424) reference_type3 -> . reference_type SHR_UN
    (437) wildcard3 -> . QUES SHR_UN
    (438) wildcard3 -> . QUES wildcard_bounds3
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (433) wildcard2 -> . QUES SHR
    (434) wildcard2 -> . QUES wildcard_bounds2
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (429) wildcard1 -> . QUES GTR
    (430) wildcard1 -> . QUES wildcard_bounds1
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (425) wildcard -> . QUES
    (426) wildcard -> . QUES wildcard_bounds
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    QUES            shift and go to state 948
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    type_argument3                 shift and go to state 1060
    type_argument2                 shift and go to state 949
    type_argument1                 shift and go to state 751
    type_argument                  shift and go to state 752
    reference_type3                shift and go to state 945
    wildcard3                      shift and go to state 946
    reference_type2                shift and go to state 758
    wildcard2                      shift and go to state 759
    reference_type1                shift and go to state 360
    wildcard1                      shift and go to state 361
    reference_type                 shift and go to state 1061
    wildcard                       shift and go to state 366
    class_or_interface             shift and go to state 754
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 1020

    (424) reference_type3 -> reference_type SHR_UN .

    SUPER           reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    THIS            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    IDENT           reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    PERIOD          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    LBRACK          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    LPAREN          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    COMMA           reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    LBRACE          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    INSTANCEOF      reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    EQL             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    NEQ             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    AND             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    XOR             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    OR              reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    LAND            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    QUES            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    LOR             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    $end            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    SEMICOLON       reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    COLON           reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    RPAREN          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    RBRACK          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    RBRACE          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    ELLIPSIS        reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    GTR             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    EXTENDS         reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    BOOLEAN         reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    VOID            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    BYTE            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    SHORT           reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    INT             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    LONG            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    CHAR            reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    FLOAT           reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    DOUBLE          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    SHR             reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)
    SHR_UN          reduce using rule 424 (reference_type3 -> reference_type SHR_UN .)


state 1021

    (437) wildcard3 -> QUES SHR_UN .

    SUPER           reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    THIS            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    IDENT           reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    PERIOD          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    LBRACK          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    LPAREN          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    COMMA           reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    LBRACE          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    INSTANCEOF      reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    EQL             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    NEQ             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    AND             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    XOR             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    OR              reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    LAND            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    QUES            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    LOR             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    $end            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    SEMICOLON       reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    COLON           reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    RPAREN          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    RBRACK          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    RBRACE          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    ELLIPSIS        reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    GTR             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    EXTENDS         reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    BOOLEAN         reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    VOID            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    BYTE            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    SHORT           reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    INT             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    LONG            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    CHAR            reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    FLOAT           reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    DOUBLE          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    SHR             reduce using rule 437 (wildcard3 -> QUES SHR_UN .)
    SHR_UN          reduce using rule 437 (wildcard3 -> QUES SHR_UN .)


state 1022

    (438) wildcard3 -> QUES wildcard_bounds3 .

    SUPER           reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    THIS            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    IDENT           reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    PERIOD          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    LBRACK          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    LPAREN          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    COMMA           reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    LBRACE          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    INSTANCEOF      reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    EQL             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    NEQ             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    AND             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    XOR             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    OR              reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    LAND            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    QUES            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    LOR             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    $end            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    SEMICOLON       reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    COLON           reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    RPAREN          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    RBRACK          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    RBRACE          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    ELLIPSIS        reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    GTR             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    EXTENDS         reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    BOOLEAN         reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    VOID            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    BYTE            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    SHORT           reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    INT             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    LONG            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    CHAR            reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    FLOAT           reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    DOUBLE          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    SHR             reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)
    SHR_UN          reduce using rule 438 (wildcard3 -> QUES wildcard_bounds3 .)


state 1023

    (439) wildcard_bounds3 -> EXTENDS . reference_type3
    (435) wildcard_bounds2 -> EXTENDS . reference_type2
    (431) wildcard_bounds1 -> EXTENDS . reference_type1
    (427) wildcard_bounds -> EXTENDS . reference_type
    (424) reference_type3 -> . reference_type SHR_UN
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type3                shift and go to state 1062
    reference_type2                shift and go to state 951
    reference_type1                shift and go to state 762
    reference_type                 shift and go to state 1063
    class_or_interface             shift and go to state 754
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 1024

    (440) wildcard_bounds3 -> SUPER . reference_type3
    (436) wildcard_bounds2 -> SUPER . reference_type2
    (432) wildcard_bounds1 -> SUPER . reference_type1
    (428) wildcard_bounds -> SUPER . reference_type
    (424) reference_type3 -> . reference_type SHR_UN
    (418) reference_type2 -> . reference_type SHR
    (419) reference_type2 -> . class_or_interface LSS type_argument_list3
    (412) reference_type1 -> . reference_type GTR
    (413) reference_type1 -> . class_or_interface LSS type_argument_list2
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    IDENT           shift and go to state 196

    reference_type3                shift and go to state 1064
    reference_type2                shift and go to state 953
    reference_type1                shift and go to state 764
    reference_type                 shift and go to state 1065
    class_or_interface             shift and go to state 754
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    name                           shift and go to state 367
    generic_type                   shift and go to state 368
    primitive_type                 shift and go to state 369
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 1025

    (502) method_body -> LBRACE block_statements_opt dec_scope RBRACE .

    SEMICOLON       reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    STATIC          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    LBRACE          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    PUBLIC          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    PROTECTED       reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    PRIVATE         reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    ABSTRACT        reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    FINAL           reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    NATIVE          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    SYNCHRONIZED    reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    TRANSIENT       reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    VOLATILE        reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    STRICTFP        reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    ATRATE          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    IDENT           reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    CLASS           reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    INTERFACE       reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    LSS             reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    BOOLEAN         reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    VOID            reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    BYTE            reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    SHORT           reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    INT             reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    LONG            reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    CHAR            reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    FLOAT           reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    DOUBLE          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)
    RBRACE          reduce using rule 502 (method_body -> LBRACE block_statements_opt dec_scope RBRACE .)


state 1026

    (498) method_header_throws_clause -> THROWS class_type_list .
    (500) class_type_list -> class_type_list . COMMA class_type_elt

    LBRACE          reduce using rule 498 (method_header_throws_clause -> THROWS class_type_list .)
    SEMICOLON       reduce using rule 498 (method_header_throws_clause -> THROWS class_type_list .)
    COMMA           shift and go to state 1066


state 1027

    (499) class_type_list -> class_type_elt .

    COMMA           reduce using rule 499 (class_type_list -> class_type_elt .)
    LBRACE          reduce using rule 499 (class_type_list -> class_type_elt .)
    SEMICOLON       reduce using rule 499 (class_type_list -> class_type_elt .)


state 1028

    (501) class_type_elt -> class_type .

    COMMA           reduce using rule 501 (class_type_elt -> class_type .)
    LBRACE          reduce using rule 501 (class_type_elt -> class_type .)
    SEMICOLON       reduce using rule 501 (class_type_elt -> class_type .)


state 1029

    (507) method_header -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt .
    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt . dec_scope
    (585) dec_scope -> .

    LBRACE          reduce using rule 507 (method_header -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt .)
    SEMICOLON       reduce using rule 585 (dec_scope -> .)

    dec_scope                      shift and go to state 1030

state 1030

    (506) method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope .

    SEMICOLON       reduce using rule 506 (method_header101 -> method_header_name formal_parameter_list_opt RPAREN method_header_extended_dims method_header_throws_clause_opt dec_scope .)


state 1031

    (329) class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN . class_body_opt
    (334) class_body_opt -> . class_body
    (335) class_body_opt -> . empty
    (470) class_body -> . LBRACE inc_scope class_body_declarations_opt dec_scope RBRACE
    (583) empty -> .

    LBRACE          shift and go to state 200
    LBRACK          reduce using rule 583 (empty -> .)
    PERIOD          reduce using rule 583 (empty -> .)
    INC             reduce using rule 583 (empty -> .)
    DEC             reduce using rule 583 (empty -> .)
    ASSIGN          reduce using rule 583 (empty -> .)
    MUL_ASSIGN      reduce using rule 583 (empty -> .)
    QUO_ASSIGN      reduce using rule 583 (empty -> .)
    REM_ASSIGN      reduce using rule 583 (empty -> .)
    ADD_ASSIGN      reduce using rule 583 (empty -> .)
    SUB_ASSIGN      reduce using rule 583 (empty -> .)
    SHL_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_ASSIGN      reduce using rule 583 (empty -> .)
    SHR_UN_ASSIGN   reduce using rule 583 (empty -> .)
    AND_ASSIGN      reduce using rule 583 (empty -> .)
    OR_ASSIGN       reduce using rule 583 (empty -> .)
    XOR_ASSIGN      reduce using rule 583 (empty -> .)
    MUL             reduce using rule 583 (empty -> .)
    QUO             reduce using rule 583 (empty -> .)
    REM             reduce using rule 583 (empty -> .)
    ADD             reduce using rule 583 (empty -> .)
    SUB             reduce using rule 583 (empty -> .)
    SHL             reduce using rule 583 (empty -> .)
    SHR             reduce using rule 583 (empty -> .)
    SHR_UN          reduce using rule 583 (empty -> .)
    GTR             reduce using rule 583 (empty -> .)
    LSS             reduce using rule 583 (empty -> .)
    GEQ             reduce using rule 583 (empty -> .)
    LEQ             reduce using rule 583 (empty -> .)
    INSTANCEOF      reduce using rule 583 (empty -> .)
    EQL             reduce using rule 583 (empty -> .)
    NEQ             reduce using rule 583 (empty -> .)
    AND             reduce using rule 583 (empty -> .)
    XOR             reduce using rule 583 (empty -> .)
    OR              reduce using rule 583 (empty -> .)
    LAND            reduce using rule 583 (empty -> .)
    QUES            reduce using rule 583 (empty -> .)
    LOR             reduce using rule 583 (empty -> .)
    $end            reduce using rule 583 (empty -> .)
    SEMICOLON       reduce using rule 583 (empty -> .)
    RPAREN          reduce using rule 583 (empty -> .)
    COLON           reduce using rule 583 (empty -> .)
    RBRACK          reduce using rule 583 (empty -> .)
    COMMA           reduce using rule 583 (empty -> .)
    RBRACE          reduce using rule 583 (empty -> .)

    class_body_opt                 shift and go to state 1067
    class_body                     shift and go to state 911
    empty                          shift and go to state 912

state 1032

    (330) class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .

    LBRACK          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    PERIOD          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INC             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    DEC             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ASSIGN          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN_ASSIGN   reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR_ASSIGN       reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR_ASSIGN      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GTR             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LSS             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GEQ             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LEQ             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INSTANCEOF      reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    EQL             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    NEQ             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR              reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LAND            reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUES            reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LOR             reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    $end            reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SEMICOLON       reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RPAREN          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COLON           reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACK          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COMMA           reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACE          reduce using rule 330 (class_instance_creation_expression -> primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt .)


state 1033

    (162) cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .

    MUL             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    QUO             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    REM             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    ADD             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    SUB             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    SHL             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    SHR             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    SHR_UN          reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    GTR             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    LSS             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    GEQ             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    LEQ             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    EQL             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    NEQ             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    AND             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    XOR             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    OR              reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    LAND            reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    QUES            reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    LOR             reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    $end            reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    SEMICOLON       reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    RPAREN          reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    COLON           reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    RBRACK          reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    COMMA           reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)
    RBRACE          reduce using rule 162 (cast_expression -> LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus .)


state 1034

    (332) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .

    LBRACK          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    PERIOD          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INC             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    DEC             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ASSIGN          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN_ASSIGN   reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR_ASSIGN       reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR_ASSIGN      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GTR             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LSS             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GEQ             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LEQ             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INSTANCEOF      reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    EQL             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    NEQ             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR              reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LAND            reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUES            reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LOR             reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    $end            reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SEMICOLON       reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RPAREN          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COLON           reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACK          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COMMA           reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACE          reduce using rule 332 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)


state 1035

    (230) if_then_statement -> IF LPAREN . inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN . inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN . inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (584) inc_scope -> .

    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    ADD             reduce using rule 584 (inc_scope -> .)
    SUB             reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    LNOT            reduce using rule 584 (inc_scope -> .)
    NOT             reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 1068

state 1036

    (230) if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .

    $end            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    WHILE           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    IF              reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    FOR             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    LBRACE          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    ASSERT          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    SEMICOLON       reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    SWITCH          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    DO              reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    BREAK           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    CONTINUE        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    RETURN          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    SYNCHRONIZED    reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    THROW           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    TRY             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    IDENT           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    BOOLEAN         reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    VOID            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    BYTE            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    SHORT           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    INT             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    LONG            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    CHAR            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    FLOAT           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    DOUBLE          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    PUBLIC          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    PROTECTED       reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    PRIVATE         reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    STATIC          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    ABSTRACT        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    FINAL           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    NATIVE          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    TRANSIENT       reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    VOLATILE        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    STRICTFP        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    THIS            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    SUPER           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    INC             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    DEC             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    NEW             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    LSS             reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    LPAREN          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    ATRATE          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    HEX_LIT         reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    OCTAL_LIT       reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    BINARY_LIT      reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    DECIMAL_LIT     reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    FLOAT_HEX_LIT   reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    FLOAT_DEC_LIT   reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    CHAR_LIT        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    STRING_LIT      reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    BOOL_LIT        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    NULL_LIT        reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    CLASS           reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    INTERFACE       reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    RBRACE          reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    CASE            reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)
    DEFAULT         reduce using rule 230 (if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1 .)


state 1037

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE . label_for_if3 statement label_for_if2
    (233) label_for_if3 -> .

    IF              reduce using rule 233 (label_for_if3 -> .)
    WHILE           reduce using rule 233 (label_for_if3 -> .)
    FOR             reduce using rule 233 (label_for_if3 -> .)
    LBRACE          reduce using rule 233 (label_for_if3 -> .)
    ASSERT          reduce using rule 233 (label_for_if3 -> .)
    SEMICOLON       reduce using rule 233 (label_for_if3 -> .)
    SWITCH          reduce using rule 233 (label_for_if3 -> .)
    DO              reduce using rule 233 (label_for_if3 -> .)
    BREAK           reduce using rule 233 (label_for_if3 -> .)
    CONTINUE        reduce using rule 233 (label_for_if3 -> .)
    RETURN          reduce using rule 233 (label_for_if3 -> .)
    SYNCHRONIZED    reduce using rule 233 (label_for_if3 -> .)
    THROW           reduce using rule 233 (label_for_if3 -> .)
    TRY             reduce using rule 233 (label_for_if3 -> .)
    IDENT           reduce using rule 233 (label_for_if3 -> .)
    THIS            reduce using rule 233 (label_for_if3 -> .)
    SUPER           reduce using rule 233 (label_for_if3 -> .)
    INC             reduce using rule 233 (label_for_if3 -> .)
    DEC             reduce using rule 233 (label_for_if3 -> .)
    NEW             reduce using rule 233 (label_for_if3 -> .)
    LSS             reduce using rule 233 (label_for_if3 -> .)
    LPAREN          reduce using rule 233 (label_for_if3 -> .)
    HEX_LIT         reduce using rule 233 (label_for_if3 -> .)
    OCTAL_LIT       reduce using rule 233 (label_for_if3 -> .)
    BINARY_LIT      reduce using rule 233 (label_for_if3 -> .)
    DECIMAL_LIT     reduce using rule 233 (label_for_if3 -> .)
    FLOAT_HEX_LIT   reduce using rule 233 (label_for_if3 -> .)
    FLOAT_DEC_LIT   reduce using rule 233 (label_for_if3 -> .)
    CHAR_LIT        reduce using rule 233 (label_for_if3 -> .)
    STRING_LIT      reduce using rule 233 (label_for_if3 -> .)
    BOOL_LIT        reduce using rule 233 (label_for_if3 -> .)
    NULL_LIT        reduce using rule 233 (label_for_if3 -> .)
    BOOLEAN         reduce using rule 233 (label_for_if3 -> .)
    VOID            reduce using rule 233 (label_for_if3 -> .)
    BYTE            reduce using rule 233 (label_for_if3 -> .)
    SHORT           reduce using rule 233 (label_for_if3 -> .)
    INT             reduce using rule 233 (label_for_if3 -> .)
    LONG            reduce using rule 233 (label_for_if3 -> .)
    CHAR            reduce using rule 233 (label_for_if3 -> .)
    FLOAT           reduce using rule 233 (label_for_if3 -> .)
    DOUBLE          reduce using rule 233 (label_for_if3 -> .)

    label_for_if3                  shift and go to state 1069

state 1038

    (227) labeled_statement -> label COLON . statement
    (228) labeled_statement_no_short_if -> label COLON . statement_no_short_if
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    label                          shift and go to state 989
    statement                      shift and go to state 535
    statement_no_short_if          shift and go to state 1070
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    enhanced_for_statement_header  shift and go to state 992
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1039

    (236) while_statement -> WHILE inc_for_while_stack . LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack . LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2

    LPAREN          shift and go to state 1071


state 1040

    (241) for_statement -> FOR inc_for_while_stack . LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack . LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack . LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack . LPAREN inc_scope modifiers type IDENT dims_opt

    LPAREN          shift and go to state 1072


state 1041

    (258) enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if .

    ELSE            reduce using rule 258 (enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if .)


state 1042

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 . statement label_for_while2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 1073
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1043

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt . SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2

    SEMICOLON       shift and go to state 1074


state 1044

    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt .
    (181) variable_declarator_id -> IDENT dims_opt .

    COLON           reduce using rule 261 (enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt .)
    ASSIGN          reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    COMMA           reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)
    SEMICOLON       reduce using rule 181 (variable_declarator_id -> IDENT dims_opt .)


state 1045

    (221) method_invocation -> name PERIOD . type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> name PERIOD . IDENT LPAREN argument_list_opt RPAREN
    (333) class_instance_creation_expression_name -> name PERIOD .
    (352) qualified_name -> name PERIOD . simple_name
    (148) primary_no_new_array -> name PERIOD . THIS
    (149) primary_no_new_array -> name PERIOD . SUPER
    (150) primary_no_new_array -> name PERIOD . CLASS
    (403) type_arguments -> . LSS type_argument_list1
    (351) simple_name -> . IDENT

    IDENT           shift and go to state 430
    NEW             reduce using rule 333 (class_instance_creation_expression_name -> name PERIOD .)
    THIS            shift and go to state 425
    SUPER           shift and go to state 426
    CLASS           shift and go to state 427
    LSS             shift and go to state 185

    type_arguments                 shift and go to state 429
    simple_name                    shift and go to state 428

state 1046

    (273) switch_block -> LBRACE switch_block_statements dec_scope . RBRACE

    RBRACE          shift and go to state 1075


state 1047

    (275) switch_block -> LBRACE switch_block_statements switch_labels . dec_scope RBRACE
    (280) switch_labels -> switch_labels . switch_label
    (278) switch_block_statement -> switch_labels . block_statements
    (585) dec_scope -> .
    (281) switch_label -> . CASE constant_expression COLON
    (282) switch_label -> . DEFAULT COLON
    (168) block_statements -> . block_statement
    (169) block_statements -> . block_statements block_statement
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (583) empty -> .
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    RBRACE          reduce using rule 585 (dec_scope -> .)
    CASE            shift and go to state 1004
    DEFAULT         shift and go to state 1005
    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    dec_scope                      shift and go to state 1076
    switch_label                   shift and go to state 1050
    block_statements               shift and go to state 1051
    block_statement                shift and go to state 544
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 1048

    (277) switch_block_statements -> switch_block_statements switch_block_statement .

    CASE            reduce using rule 277 (switch_block_statements -> switch_block_statements switch_block_statement .)
    DEFAULT         reduce using rule 277 (switch_block_statements -> switch_block_statements switch_block_statement .)
    RBRACE          reduce using rule 277 (switch_block_statements -> switch_block_statements switch_block_statement .)


state 1049

    (274) switch_block -> LBRACE switch_labels dec_scope . RBRACE

    RBRACE          shift and go to state 1077


state 1050

    (280) switch_labels -> switch_labels switch_label .

    CASE            reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    DEFAULT         reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    IF              reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    WHILE           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    FOR             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    LBRACE          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    ASSERT          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    SEMICOLON       reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    SWITCH          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    DO              reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    BREAK           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    CONTINUE        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    RETURN          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    SYNCHRONIZED    reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    THROW           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    TRY             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    IDENT           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    BOOLEAN         reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    VOID            reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    BYTE            reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    SHORT           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    INT             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    LONG            reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    CHAR            reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    FLOAT           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    DOUBLE          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    PUBLIC          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    PROTECTED       reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    PRIVATE         reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    STATIC          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    ABSTRACT        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    FINAL           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    NATIVE          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    TRANSIENT       reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    VOLATILE        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    STRICTFP        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    THIS            reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    SUPER           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    INC             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    DEC             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    NEW             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    LSS             reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    LPAREN          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    ATRATE          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    HEX_LIT         reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    OCTAL_LIT       reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    BINARY_LIT      reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    DECIMAL_LIT     reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    FLOAT_HEX_LIT   reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    FLOAT_DEC_LIT   reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    CHAR_LIT        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    STRING_LIT      reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    BOOL_LIT        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    NULL_LIT        reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    RBRACE          reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    CLASS           reduce using rule 280 (switch_labels -> switch_labels switch_label .)
    INTERFACE       reduce using rule 280 (switch_labels -> switch_labels switch_label .)


state 1051

    (278) switch_block_statement -> switch_labels block_statements .
    (169) block_statements -> block_statements . block_statement
    (170) block_statement -> . local_variable_declaration_statement
    (171) block_statement -> . statement
    (172) block_statement -> . class_declaration
    (173) block_statement -> . interface_declaration
    (174) local_variable_declaration_statement -> . local_variable_declaration SEMICOLON
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (462) class_declaration -> . class_header class_body
    (511) interface_declaration -> . interface_header interface_body
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (463) class_header -> . class_header_name empty empty
    (512) interface_header -> . interface_header_name interface_header_extends_opt
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (464) class_header_name -> . class_header_name1 type_parameters
    (465) class_header_name -> . class_header_name1
    (513) interface_header_name -> . interface_header_name1 type_parameters
    (514) interface_header_name -> . interface_header_name1
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (466) class_header_name1 -> . modifiers_opt CLASS IDENT
    (515) interface_header_name1 -> . modifiers_opt INTERFACE IDENT
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (363) modifiers_opt -> . modifiers
    (364) modifiers_opt -> . empty
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (583) empty -> .
    (548) annotation_name -> . ATRATE name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    CASE            reduce using rule 278 (switch_block_statement -> switch_labels block_statements .)
    DEFAULT         reduce using rule 278 (switch_block_statement -> switch_labels block_statements .)
    RBRACE          reduce using rule 278 (switch_block_statement -> switch_labels block_statements .)
    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 163
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    CLASS           reduce using rule 583 (empty -> .)
    INTERFACE       reduce using rule 583 (empty -> .)
    ATRATE          shift and go to state 47
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    block_statement                shift and go to state 720
    local_variable_declaration_statement shift and go to state 116
    statement                      shift and go to state 117
    class_declaration              shift and go to state 118
    interface_declaration          shift and go to state 119
    local_variable_declaration     shift and go to state 120
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    class_header                   shift and go to state 25
    interface_header               shift and go to state 26
    type                           shift and go to state 129
    modifiers                      shift and go to state 130
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    class_header_name              shift and go to state 38
    empty                          shift and go to state 150
    interface_header_name          shift and go to state 39
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    class_header_name1             shift and go to state 43
    interface_header_name1         shift and go to state 44
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 180
    modifiers_opt                  shift and go to state 46
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 1052

    (281) switch_label -> CASE constant_expression . COLON

    COLON           shift and go to state 1078


state 1053

    (283) constant_expression -> expression .

    COLON           reduce using rule 283 (constant_expression -> expression .)


state 1054

    (282) switch_label -> DEFAULT COLON .

    CASE            reduce using rule 282 (switch_label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 282 (switch_label -> DEFAULT COLON .)
    IF              reduce using rule 282 (switch_label -> DEFAULT COLON .)
    WHILE           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    FOR             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    LBRACE          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    ASSERT          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    SEMICOLON       reduce using rule 282 (switch_label -> DEFAULT COLON .)
    SWITCH          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    DO              reduce using rule 282 (switch_label -> DEFAULT COLON .)
    BREAK           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    RETURN          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    SYNCHRONIZED    reduce using rule 282 (switch_label -> DEFAULT COLON .)
    THROW           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    TRY             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    IDENT           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 282 (switch_label -> DEFAULT COLON .)
    VOID            reduce using rule 282 (switch_label -> DEFAULT COLON .)
    BYTE            reduce using rule 282 (switch_label -> DEFAULT COLON .)
    SHORT           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    INT             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    LONG            reduce using rule 282 (switch_label -> DEFAULT COLON .)
    CHAR            reduce using rule 282 (switch_label -> DEFAULT COLON .)
    FLOAT           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    DOUBLE          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    PUBLIC          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    PROTECTED       reduce using rule 282 (switch_label -> DEFAULT COLON .)
    PRIVATE         reduce using rule 282 (switch_label -> DEFAULT COLON .)
    STATIC          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    ABSTRACT        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    FINAL           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    NATIVE          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    TRANSIENT       reduce using rule 282 (switch_label -> DEFAULT COLON .)
    VOLATILE        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    STRICTFP        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    THIS            reduce using rule 282 (switch_label -> DEFAULT COLON .)
    SUPER           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    INC             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    DEC             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    NEW             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    LSS             reduce using rule 282 (switch_label -> DEFAULT COLON .)
    LPAREN          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    ATRATE          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    HEX_LIT         reduce using rule 282 (switch_label -> DEFAULT COLON .)
    OCTAL_LIT       reduce using rule 282 (switch_label -> DEFAULT COLON .)
    BINARY_LIT      reduce using rule 282 (switch_label -> DEFAULT COLON .)
    DECIMAL_LIT     reduce using rule 282 (switch_label -> DEFAULT COLON .)
    FLOAT_HEX_LIT   reduce using rule 282 (switch_label -> DEFAULT COLON .)
    FLOAT_DEC_LIT   reduce using rule 282 (switch_label -> DEFAULT COLON .)
    CHAR_LIT        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    STRING_LIT      reduce using rule 282 (switch_label -> DEFAULT COLON .)
    BOOL_LIT        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    NULL_LIT        reduce using rule 282 (switch_label -> DEFAULT COLON .)
    RBRACE          reduce using rule 282 (switch_label -> DEFAULT COLON .)
    CLASS           reduce using rule 282 (switch_label -> DEFAULT COLON .)
    INTERFACE       reduce using rule 282 (switch_label -> DEFAULT COLON .)


state 1055

    (303) union_type -> union_type OR type .

    OR              reduce using rule 303 (union_type -> union_type OR type .)
    IDENT           reduce using rule 303 (union_type -> union_type OR type .)


state 1056

    (323) explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 323 (explicit_constructor_invocation -> primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1057

    (325) explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 325 (explicit_constructor_invocation -> primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1058

    (324) explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 324 (explicit_constructor_invocation -> name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1059

    (326) explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .

    $end            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    WHILE           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IF              reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FOR             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LBRACE          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ASSERT          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SWITCH          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DO              reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BREAK           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RETURN          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SYNCHRONIZED    reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THROW           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRY             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    IDENT           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOID            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BYTE            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SHORT           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INT             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LONG            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STATIC          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FINAL           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NATIVE          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    TRANSIENT       reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRICTFP        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    THIS            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    SUPER           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INC             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEC             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NEW             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LSS             reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    LPAREN          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ATRATE          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    HEX_LIT         reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    OCTAL_LIT       reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BINARY_LIT      reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DECIMAL_LIT     reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_HEX_LIT   reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    FLOAT_DEC_LIT   reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CHAR_LIT        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    STRING_LIT      reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    BOOL_LIT        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    NULL_LIT        reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CLASS           reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    CASE            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)
    ELSE            reduce using rule 326 (explicit_constructor_invocation -> name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON .)


state 1060

    (421) type_argument_list3 -> type_argument_list COMMA type_argument3 .

    SUPER           reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    THIS            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    IDENT           reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    PERIOD          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    LBRACK          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    LPAREN          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    COMMA           reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    LBRACE          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    INSTANCEOF      reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    EQL             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    NEQ             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    AND             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    XOR             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    OR              reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    LAND            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    QUES            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    LOR             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    $end            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    SEMICOLON       reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    COLON           reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    RPAREN          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    RBRACK          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    RBRACE          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    ELLIPSIS        reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    GTR             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    EXTENDS         reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    BOOLEAN         reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    VOID            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    BYTE            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    SHORT           reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    INT             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    LONG            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    CHAR            reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    FLOAT           reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    DOUBLE          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    SHR             reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)
    SHR_UN          reduce using rule 421 (type_argument_list3 -> type_argument_list COMMA type_argument3 .)


state 1061

    (408) type_argument -> reference_type .
    (424) reference_type3 -> reference_type . SHR_UN
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 408 (type_argument -> reference_type .)
    SHR_UN          shift and go to state 1020
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 1062

    (439) wildcard_bounds3 -> EXTENDS reference_type3 .

    SUPER           reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    THIS            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    IDENT           reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    PERIOD          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LBRACK          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LPAREN          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    COMMA           reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LBRACE          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    INSTANCEOF      reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    EQL             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    NEQ             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    AND             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    XOR             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    OR              reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LAND            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    QUES            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LOR             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    $end            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    SEMICOLON       reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    COLON           reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    RPAREN          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    RBRACK          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    RBRACE          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ELLIPSIS        reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    GTR             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    EXTENDS         reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    BOOLEAN         reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    VOID            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    BYTE            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    SHORT           reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    INT             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LONG            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    CHAR            reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    FLOAT           reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    DOUBLE          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    SHR             reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    SHR_UN          reduce using rule 439 (wildcard_bounds3 -> EXTENDS reference_type3 .)


state 1063

    (427) wildcard_bounds -> EXTENDS reference_type .
    (424) reference_type3 -> reference_type . SHR_UN
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 427 (wildcard_bounds -> EXTENDS reference_type .)
    SHR_UN          shift and go to state 1020
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 1064

    (440) wildcard_bounds3 -> SUPER reference_type3 .

    SUPER           reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    THIS            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    IDENT           reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    PERIOD          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    LBRACK          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    LPAREN          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    COMMA           reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    LBRACE          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    INSTANCEOF      reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    EQL             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    NEQ             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    AND             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    XOR             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    OR              reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    LAND            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    QUES            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    LOR             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    $end            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    SEMICOLON       reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    COLON           reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    RPAREN          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    RBRACK          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    RBRACE          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    ELLIPSIS        reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    GTR             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    EXTENDS         reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    BOOLEAN         reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    VOID            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    BYTE            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    SHORT           reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    INT             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    LONG            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    CHAR            reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    FLOAT           reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    DOUBLE          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    SHR             reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)
    SHR_UN          reduce using rule 440 (wildcard_bounds3 -> SUPER reference_type3 .)


state 1065

    (428) wildcard_bounds -> SUPER reference_type .
    (424) reference_type3 -> reference_type . SHR_UN
    (418) reference_type2 -> reference_type . SHR
    (412) reference_type1 -> reference_type . GTR

    COMMA           reduce using rule 428 (wildcard_bounds -> SUPER reference_type .)
    SHR_UN          shift and go to state 1020
    SHR             shift and go to state 867
    GTR             shift and go to state 580


state 1066

    (500) class_type_list -> class_type_list COMMA . class_type_elt
    (501) class_type_elt -> . class_type
    (394) class_type -> . class_or_interface_type
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name

    IDENT           shift and go to state 196

    class_type_elt                 shift and go to state 1079
    class_type                     shift and go to state 1028
    class_or_interface_type        shift and go to state 502
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 284
    name                           shift and go to state 285
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64

state 1067

    (329) class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .

    LBRACK          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    PERIOD          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INC             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    DEC             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ASSIGN          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN_ASSIGN   reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR_ASSIGN       reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR_ASSIGN      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    MUL             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUO             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    REM             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    ADD             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SUB             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHL             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SHR_UN          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GTR             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LSS             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    GEQ             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LEQ             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    INSTANCEOF      reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    EQL             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    NEQ             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    AND             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    XOR             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    OR              reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LAND            reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    QUES            reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    LOR             reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    $end            reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    SEMICOLON       reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RPAREN          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COLON           reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACK          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    COMMA           reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)
    RBRACE          reduce using rule 329 (class_instance_creation_expression -> primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt .)


state 1068

    (230) if_then_statement -> IF LPAREN inc_scope . expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope . expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope . expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 1080
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 1069

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 . statement label_for_if2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 1081
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1070

    (228) labeled_statement_no_short_if -> label COLON statement_no_short_if .

    ELSE            reduce using rule 228 (labeled_statement_no_short_if -> label COLON statement_no_short_if .)


state 1071

    (236) while_statement -> WHILE inc_for_while_stack LPAREN . inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN . inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (584) inc_scope -> .

    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    ADD             reduce using rule 584 (inc_scope -> .)
    SUB             reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    LNOT            reduce using rule 584 (inc_scope -> .)
    NOT             reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 1082

state 1072

    (241) for_statement -> FOR inc_for_while_stack LPAREN . inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN . inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN . inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN . inc_scope modifiers type IDENT dims_opt
    (584) inc_scope -> .

    BOOLEAN         reduce using rule 584 (inc_scope -> .)
    VOID            reduce using rule 584 (inc_scope -> .)
    BYTE            reduce using rule 584 (inc_scope -> .)
    SHORT           reduce using rule 584 (inc_scope -> .)
    INT             reduce using rule 584 (inc_scope -> .)
    LONG            reduce using rule 584 (inc_scope -> .)
    CHAR            reduce using rule 584 (inc_scope -> .)
    FLOAT           reduce using rule 584 (inc_scope -> .)
    DOUBLE          reduce using rule 584 (inc_scope -> .)
    PUBLIC          reduce using rule 584 (inc_scope -> .)
    PROTECTED       reduce using rule 584 (inc_scope -> .)
    PRIVATE         reduce using rule 584 (inc_scope -> .)
    STATIC          reduce using rule 584 (inc_scope -> .)
    ABSTRACT        reduce using rule 584 (inc_scope -> .)
    FINAL           reduce using rule 584 (inc_scope -> .)
    NATIVE          reduce using rule 584 (inc_scope -> .)
    SYNCHRONIZED    reduce using rule 584 (inc_scope -> .)
    TRANSIENT       reduce using rule 584 (inc_scope -> .)
    VOLATILE        reduce using rule 584 (inc_scope -> .)
    STRICTFP        reduce using rule 584 (inc_scope -> .)
    INC             reduce using rule 584 (inc_scope -> .)
    DEC             reduce using rule 584 (inc_scope -> .)
    IDENT           reduce using rule 584 (inc_scope -> .)
    SUPER           reduce using rule 584 (inc_scope -> .)
    NEW             reduce using rule 584 (inc_scope -> .)
    ATRATE          reduce using rule 584 (inc_scope -> .)
    THIS            reduce using rule 584 (inc_scope -> .)
    LPAREN          reduce using rule 584 (inc_scope -> .)
    HEX_LIT         reduce using rule 584 (inc_scope -> .)
    OCTAL_LIT       reduce using rule 584 (inc_scope -> .)
    BINARY_LIT      reduce using rule 584 (inc_scope -> .)
    DECIMAL_LIT     reduce using rule 584 (inc_scope -> .)
    FLOAT_HEX_LIT   reduce using rule 584 (inc_scope -> .)
    FLOAT_DEC_LIT   reduce using rule 584 (inc_scope -> .)
    CHAR_LIT        reduce using rule 584 (inc_scope -> .)
    STRING_LIT      reduce using rule 584 (inc_scope -> .)
    BOOL_LIT        reduce using rule 584 (inc_scope -> .)
    NULL_LIT        reduce using rule 584 (inc_scope -> .)
    SEMICOLON       reduce using rule 584 (inc_scope -> .)

    inc_scope                      shift and go to state 1083

state 1073

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement . label_for_while2
    (240) label_for_while2 -> .

    $end            reduce using rule 240 (label_for_while2 -> .)
    WHILE           reduce using rule 240 (label_for_while2 -> .)
    IF              reduce using rule 240 (label_for_while2 -> .)
    FOR             reduce using rule 240 (label_for_while2 -> .)
    LBRACE          reduce using rule 240 (label_for_while2 -> .)
    ASSERT          reduce using rule 240 (label_for_while2 -> .)
    SEMICOLON       reduce using rule 240 (label_for_while2 -> .)
    SWITCH          reduce using rule 240 (label_for_while2 -> .)
    DO              reduce using rule 240 (label_for_while2 -> .)
    BREAK           reduce using rule 240 (label_for_while2 -> .)
    CONTINUE        reduce using rule 240 (label_for_while2 -> .)
    RETURN          reduce using rule 240 (label_for_while2 -> .)
    SYNCHRONIZED    reduce using rule 240 (label_for_while2 -> .)
    THROW           reduce using rule 240 (label_for_while2 -> .)
    TRY             reduce using rule 240 (label_for_while2 -> .)
    IDENT           reduce using rule 240 (label_for_while2 -> .)
    BOOLEAN         reduce using rule 240 (label_for_while2 -> .)
    VOID            reduce using rule 240 (label_for_while2 -> .)
    BYTE            reduce using rule 240 (label_for_while2 -> .)
    SHORT           reduce using rule 240 (label_for_while2 -> .)
    INT             reduce using rule 240 (label_for_while2 -> .)
    LONG            reduce using rule 240 (label_for_while2 -> .)
    CHAR            reduce using rule 240 (label_for_while2 -> .)
    FLOAT           reduce using rule 240 (label_for_while2 -> .)
    DOUBLE          reduce using rule 240 (label_for_while2 -> .)
    PUBLIC          reduce using rule 240 (label_for_while2 -> .)
    PROTECTED       reduce using rule 240 (label_for_while2 -> .)
    PRIVATE         reduce using rule 240 (label_for_while2 -> .)
    STATIC          reduce using rule 240 (label_for_while2 -> .)
    ABSTRACT        reduce using rule 240 (label_for_while2 -> .)
    FINAL           reduce using rule 240 (label_for_while2 -> .)
    NATIVE          reduce using rule 240 (label_for_while2 -> .)
    TRANSIENT       reduce using rule 240 (label_for_while2 -> .)
    VOLATILE        reduce using rule 240 (label_for_while2 -> .)
    STRICTFP        reduce using rule 240 (label_for_while2 -> .)
    THIS            reduce using rule 240 (label_for_while2 -> .)
    SUPER           reduce using rule 240 (label_for_while2 -> .)
    INC             reduce using rule 240 (label_for_while2 -> .)
    DEC             reduce using rule 240 (label_for_while2 -> .)
    NEW             reduce using rule 240 (label_for_while2 -> .)
    LSS             reduce using rule 240 (label_for_while2 -> .)
    LPAREN          reduce using rule 240 (label_for_while2 -> .)
    ATRATE          reduce using rule 240 (label_for_while2 -> .)
    HEX_LIT         reduce using rule 240 (label_for_while2 -> .)
    OCTAL_LIT       reduce using rule 240 (label_for_while2 -> .)
    BINARY_LIT      reduce using rule 240 (label_for_while2 -> .)
    DECIMAL_LIT     reduce using rule 240 (label_for_while2 -> .)
    FLOAT_HEX_LIT   reduce using rule 240 (label_for_while2 -> .)
    FLOAT_DEC_LIT   reduce using rule 240 (label_for_while2 -> .)
    CHAR_LIT        reduce using rule 240 (label_for_while2 -> .)
    STRING_LIT      reduce using rule 240 (label_for_while2 -> .)
    BOOL_LIT        reduce using rule 240 (label_for_while2 -> .)
    NULL_LIT        reduce using rule 240 (label_for_while2 -> .)
    CLASS           reduce using rule 240 (label_for_while2 -> .)
    INTERFACE       reduce using rule 240 (label_for_while2 -> .)
    RBRACE          reduce using rule 240 (label_for_while2 -> .)
    CASE            reduce using rule 240 (label_for_while2 -> .)
    DEFAULT         reduce using rule 240 (label_for_while2 -> .)

    label_for_while2               shift and go to state 1084

state 1074

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON . label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (243) label_for_for1 -> .

    INC             reduce using rule 243 (label_for_for1 -> .)
    DEC             reduce using rule 243 (label_for_for1 -> .)
    IDENT           reduce using rule 243 (label_for_for1 -> .)
    SUPER           reduce using rule 243 (label_for_for1 -> .)
    NEW             reduce using rule 243 (label_for_for1 -> .)
    THIS            reduce using rule 243 (label_for_for1 -> .)
    LPAREN          reduce using rule 243 (label_for_for1 -> .)
    HEX_LIT         reduce using rule 243 (label_for_for1 -> .)
    OCTAL_LIT       reduce using rule 243 (label_for_for1 -> .)
    BINARY_LIT      reduce using rule 243 (label_for_for1 -> .)
    DECIMAL_LIT     reduce using rule 243 (label_for_for1 -> .)
    FLOAT_HEX_LIT   reduce using rule 243 (label_for_for1 -> .)
    FLOAT_DEC_LIT   reduce using rule 243 (label_for_for1 -> .)
    CHAR_LIT        reduce using rule 243 (label_for_for1 -> .)
    STRING_LIT      reduce using rule 243 (label_for_for1 -> .)
    BOOL_LIT        reduce using rule 243 (label_for_for1 -> .)
    NULL_LIT        reduce using rule 243 (label_for_for1 -> .)
    BOOLEAN         reduce using rule 243 (label_for_for1 -> .)
    VOID            reduce using rule 243 (label_for_for1 -> .)
    BYTE            reduce using rule 243 (label_for_for1 -> .)
    SHORT           reduce using rule 243 (label_for_for1 -> .)
    INT             reduce using rule 243 (label_for_for1 -> .)
    LONG            reduce using rule 243 (label_for_for1 -> .)
    CHAR            reduce using rule 243 (label_for_for1 -> .)
    FLOAT           reduce using rule 243 (label_for_for1 -> .)
    DOUBLE          reduce using rule 243 (label_for_for1 -> .)
    RPAREN          reduce using rule 243 (label_for_for1 -> .)

    label_for_for1                 shift and go to state 1085

state 1075

    (273) switch_block -> LBRACE switch_block_statements dec_scope RBRACE .

    $end            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    WHILE           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    IF              reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    FOR             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    LBRACE          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    ASSERT          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    SEMICOLON       reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    SWITCH          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    DO              reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    BREAK           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    CONTINUE        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    RETURN          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    SYNCHRONIZED    reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    THROW           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    TRY             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    IDENT           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    BOOLEAN         reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    VOID            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    BYTE            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    SHORT           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    INT             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    LONG            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    CHAR            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    FLOAT           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    DOUBLE          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    PUBLIC          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    PROTECTED       reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    PRIVATE         reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    STATIC          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    ABSTRACT        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    FINAL           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    NATIVE          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    TRANSIENT       reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    VOLATILE        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    STRICTFP        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    THIS            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    SUPER           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    INC             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    DEC             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    NEW             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    LSS             reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    LPAREN          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    ATRATE          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    HEX_LIT         reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    OCTAL_LIT       reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    BINARY_LIT      reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    DECIMAL_LIT     reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    CHAR_LIT        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    STRING_LIT      reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    BOOL_LIT        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    NULL_LIT        reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    CLASS           reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    INTERFACE       reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    RBRACE          reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    CASE            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    DEFAULT         reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)
    ELSE            reduce using rule 273 (switch_block -> LBRACE switch_block_statements dec_scope RBRACE .)


state 1076

    (275) switch_block -> LBRACE switch_block_statements switch_labels dec_scope . RBRACE

    RBRACE          shift and go to state 1086


state 1077

    (274) switch_block -> LBRACE switch_labels dec_scope RBRACE .

    $end            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    WHILE           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    IF              reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    FOR             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    LBRACE          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    ASSERT          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    SEMICOLON       reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    SWITCH          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    DO              reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    BREAK           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    CONTINUE        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    RETURN          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    SYNCHRONIZED    reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    THROW           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    TRY             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    IDENT           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    BOOLEAN         reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    VOID            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    BYTE            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    SHORT           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    INT             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    LONG            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    CHAR            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    FLOAT           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    DOUBLE          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    PUBLIC          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    PROTECTED       reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    PRIVATE         reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    STATIC          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    ABSTRACT        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    FINAL           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    NATIVE          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    TRANSIENT       reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    VOLATILE        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    STRICTFP        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    THIS            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    SUPER           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    INC             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    DEC             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    NEW             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    LSS             reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    LPAREN          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    ATRATE          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    HEX_LIT         reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    OCTAL_LIT       reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    BINARY_LIT      reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    DECIMAL_LIT     reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    CHAR_LIT        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    STRING_LIT      reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    BOOL_LIT        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    NULL_LIT        reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    CLASS           reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    INTERFACE       reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    RBRACE          reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    CASE            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    DEFAULT         reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)
    ELSE            reduce using rule 274 (switch_block -> LBRACE switch_labels dec_scope RBRACE .)


state 1078

    (281) switch_label -> CASE constant_expression COLON .

    CASE            reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    DEFAULT         reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    IF              reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    WHILE           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    FOR             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    LBRACE          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    ASSERT          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    SEMICOLON       reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    SWITCH          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    DO              reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    BREAK           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    CONTINUE        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    RETURN          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    SYNCHRONIZED    reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    THROW           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    TRY             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    IDENT           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    BOOLEAN         reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    VOID            reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    BYTE            reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    SHORT           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    INT             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    LONG            reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    CHAR            reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    FLOAT           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    DOUBLE          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    PUBLIC          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    PROTECTED       reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    PRIVATE         reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    STATIC          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    ABSTRACT        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    FINAL           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    NATIVE          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    TRANSIENT       reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    VOLATILE        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    STRICTFP        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    THIS            reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    SUPER           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    INC             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    DEC             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    NEW             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    LSS             reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    LPAREN          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    ATRATE          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    HEX_LIT         reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    OCTAL_LIT       reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    BINARY_LIT      reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    DECIMAL_LIT     reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    FLOAT_HEX_LIT   reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    FLOAT_DEC_LIT   reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    CHAR_LIT        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    STRING_LIT      reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    BOOL_LIT        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    NULL_LIT        reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    RBRACE          reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    CLASS           reduce using rule 281 (switch_label -> CASE constant_expression COLON .)
    INTERFACE       reduce using rule 281 (switch_label -> CASE constant_expression COLON .)


state 1079

    (500) class_type_list -> class_type_list COMMA class_type_elt .

    COMMA           reduce using rule 500 (class_type_list -> class_type_list COMMA class_type_elt .)
    LBRACE          reduce using rule 500 (class_type_list -> class_type_list COMMA class_type_elt .)
    SEMICOLON       reduce using rule 500 (class_type_list -> class_type_list COMMA class_type_elt .)


state 1080

    (230) if_then_statement -> IF LPAREN inc_scope expression . RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope expression . RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression . RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2

    RPAREN          shift and go to state 1087


state 1081

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement . label_for_if2
    (232) label_for_if2 -> .

    $end            reduce using rule 232 (label_for_if2 -> .)
    WHILE           reduce using rule 232 (label_for_if2 -> .)
    IF              reduce using rule 232 (label_for_if2 -> .)
    FOR             reduce using rule 232 (label_for_if2 -> .)
    LBRACE          reduce using rule 232 (label_for_if2 -> .)
    ASSERT          reduce using rule 232 (label_for_if2 -> .)
    SEMICOLON       reduce using rule 232 (label_for_if2 -> .)
    SWITCH          reduce using rule 232 (label_for_if2 -> .)
    DO              reduce using rule 232 (label_for_if2 -> .)
    BREAK           reduce using rule 232 (label_for_if2 -> .)
    CONTINUE        reduce using rule 232 (label_for_if2 -> .)
    RETURN          reduce using rule 232 (label_for_if2 -> .)
    SYNCHRONIZED    reduce using rule 232 (label_for_if2 -> .)
    THROW           reduce using rule 232 (label_for_if2 -> .)
    TRY             reduce using rule 232 (label_for_if2 -> .)
    IDENT           reduce using rule 232 (label_for_if2 -> .)
    BOOLEAN         reduce using rule 232 (label_for_if2 -> .)
    VOID            reduce using rule 232 (label_for_if2 -> .)
    BYTE            reduce using rule 232 (label_for_if2 -> .)
    SHORT           reduce using rule 232 (label_for_if2 -> .)
    INT             reduce using rule 232 (label_for_if2 -> .)
    LONG            reduce using rule 232 (label_for_if2 -> .)
    CHAR            reduce using rule 232 (label_for_if2 -> .)
    FLOAT           reduce using rule 232 (label_for_if2 -> .)
    DOUBLE          reduce using rule 232 (label_for_if2 -> .)
    PUBLIC          reduce using rule 232 (label_for_if2 -> .)
    PROTECTED       reduce using rule 232 (label_for_if2 -> .)
    PRIVATE         reduce using rule 232 (label_for_if2 -> .)
    STATIC          reduce using rule 232 (label_for_if2 -> .)
    ABSTRACT        reduce using rule 232 (label_for_if2 -> .)
    FINAL           reduce using rule 232 (label_for_if2 -> .)
    NATIVE          reduce using rule 232 (label_for_if2 -> .)
    TRANSIENT       reduce using rule 232 (label_for_if2 -> .)
    VOLATILE        reduce using rule 232 (label_for_if2 -> .)
    STRICTFP        reduce using rule 232 (label_for_if2 -> .)
    THIS            reduce using rule 232 (label_for_if2 -> .)
    SUPER           reduce using rule 232 (label_for_if2 -> .)
    INC             reduce using rule 232 (label_for_if2 -> .)
    DEC             reduce using rule 232 (label_for_if2 -> .)
    NEW             reduce using rule 232 (label_for_if2 -> .)
    LSS             reduce using rule 232 (label_for_if2 -> .)
    LPAREN          reduce using rule 232 (label_for_if2 -> .)
    ATRATE          reduce using rule 232 (label_for_if2 -> .)
    HEX_LIT         reduce using rule 232 (label_for_if2 -> .)
    OCTAL_LIT       reduce using rule 232 (label_for_if2 -> .)
    BINARY_LIT      reduce using rule 232 (label_for_if2 -> .)
    DECIMAL_LIT     reduce using rule 232 (label_for_if2 -> .)
    FLOAT_HEX_LIT   reduce using rule 232 (label_for_if2 -> .)
    FLOAT_DEC_LIT   reduce using rule 232 (label_for_if2 -> .)
    CHAR_LIT        reduce using rule 232 (label_for_if2 -> .)
    STRING_LIT      reduce using rule 232 (label_for_if2 -> .)
    BOOL_LIT        reduce using rule 232 (label_for_if2 -> .)
    NULL_LIT        reduce using rule 232 (label_for_if2 -> .)
    CLASS           reduce using rule 232 (label_for_if2 -> .)
    INTERFACE       reduce using rule 232 (label_for_if2 -> .)
    RBRACE          reduce using rule 232 (label_for_if2 -> .)
    CASE            reduce using rule 232 (label_for_if2 -> .)
    DEFAULT         reduce using rule 232 (label_for_if2 -> .)

    label_for_if2                  shift and go to state 1088

state 1082

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope . label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope . label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (239) label_for_while1 -> .

    THIS            reduce using rule 239 (label_for_while1 -> .)
    LPAREN          reduce using rule 239 (label_for_while1 -> .)
    NEW             reduce using rule 239 (label_for_while1 -> .)
    IDENT           reduce using rule 239 (label_for_while1 -> .)
    HEX_LIT         reduce using rule 239 (label_for_while1 -> .)
    OCTAL_LIT       reduce using rule 239 (label_for_while1 -> .)
    BINARY_LIT      reduce using rule 239 (label_for_while1 -> .)
    DECIMAL_LIT     reduce using rule 239 (label_for_while1 -> .)
    FLOAT_HEX_LIT   reduce using rule 239 (label_for_while1 -> .)
    FLOAT_DEC_LIT   reduce using rule 239 (label_for_while1 -> .)
    CHAR_LIT        reduce using rule 239 (label_for_while1 -> .)
    STRING_LIT      reduce using rule 239 (label_for_while1 -> .)
    BOOL_LIT        reduce using rule 239 (label_for_while1 -> .)
    NULL_LIT        reduce using rule 239 (label_for_while1 -> .)
    SUPER           reduce using rule 239 (label_for_while1 -> .)
    BOOLEAN         reduce using rule 239 (label_for_while1 -> .)
    VOID            reduce using rule 239 (label_for_while1 -> .)
    BYTE            reduce using rule 239 (label_for_while1 -> .)
    SHORT           reduce using rule 239 (label_for_while1 -> .)
    INT             reduce using rule 239 (label_for_while1 -> .)
    LONG            reduce using rule 239 (label_for_while1 -> .)
    CHAR            reduce using rule 239 (label_for_while1 -> .)
    FLOAT           reduce using rule 239 (label_for_while1 -> .)
    DOUBLE          reduce using rule 239 (label_for_while1 -> .)
    ADD             reduce using rule 239 (label_for_while1 -> .)
    SUB             reduce using rule 239 (label_for_while1 -> .)
    INC             reduce using rule 239 (label_for_while1 -> .)
    DEC             reduce using rule 239 (label_for_while1 -> .)
    LNOT            reduce using rule 239 (label_for_while1 -> .)
    NOT             reduce using rule 239 (label_for_while1 -> .)

    label_for_while1               shift and go to state 1089

state 1083

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope . for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope . for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (260) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope . type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> FOR inc_for_while_stack LPAREN inc_scope . modifiers type IDENT dims_opt
    (246) for_init_opt -> . for_init
    (247) for_init_opt -> . empty
    (379) type -> . primitive_type
    (380) type -> . reference_type
    (365) modifiers -> . modifier
    (366) modifiers -> . modifiers modifier
    (248) for_init -> . statement_expression_list
    (249) for_init -> . local_variable_declaration
    (583) empty -> .
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (390) reference_type -> . class_or_interface_type
    (391) reference_type -> . array_type
    (367) modifier -> . PUBLIC
    (368) modifier -> . PROTECTED
    (369) modifier -> . PRIVATE
    (370) modifier -> . STATIC
    (371) modifier -> . ABSTRACT
    (372) modifier -> . FINAL
    (373) modifier -> . NATIVE
    (374) modifier -> . SYNCHRONIZED
    (375) modifier -> . TRANSIENT
    (376) modifier -> . VOLATILE
    (377) modifier -> . STRICTFP
    (378) modifier -> . annotation
    (250) statement_expression_list -> . statement_expression
    (251) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (175) local_variable_declaration -> . type variable_declarators
    (176) local_variable_declaration -> . modifiers type variable_declarators
    (392) class_or_interface_type -> . class_or_interface
    (393) class_or_interface_type -> . generic_type
    (399) array_type -> . primitive_type dims
    (400) array_type -> . name dims
    (401) array_type -> . generic_type dims
    (402) array_type -> . generic_type PERIOD name dims
    (544) annotation -> . normal_annotation
    (545) annotation -> . marker_annotation
    (546) annotation -> . single_member_annotation
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (395) class_or_interface -> . name
    (396) class_or_interface -> . generic_type PERIOD name
    (397) generic_type -> . class_or_interface type_arguments
    (398) generic_type -> . class_or_interface LSS GTR
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (547) normal_annotation -> . annotation_name LPAREN member_value_pairs_opt RPAREN
    (554) marker_annotation -> . annotation_name
    (555) single_member_annotation -> . annotation_name LPAREN single_member_annotation_member_value RPAREN
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (548) annotation_name -> . ATRATE name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK

    SEMICOLON       reduce using rule 583 (empty -> .)
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    PUBLIC          shift and go to state 27
    PROTECTED       shift and go to state 28
    PRIVATE         shift and go to state 29
    STATIC          shift and go to state 24
    ABSTRACT        shift and go to state 30
    FINAL           shift and go to state 31
    NATIVE          shift and go to state 32
    SYNCHRONIZED    shift and go to state 33
    TRANSIENT       shift and go to state 34
    VOLATILE        shift and go to state 35
    STRICTFP        shift and go to state 36
    INC             shift and go to state 65
    DEC             shift and go to state 48
    IDENT           shift and go to state 830
    SUPER           shift and go to state 839
    NEW             shift and go to state 184
    ATRATE          shift and go to state 47
    THIS            shift and go to state 68
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88

    for_init_opt                   shift and go to state 1090
    type                           shift and go to state 829
    modifiers                      shift and go to state 831
    for_init                       shift and go to state 832
    empty                          shift and go to state 833
    primitive_type                 shift and go to state 151
    reference_type                 shift and go to state 152
    modifier                       shift and go to state 22
    statement_expression_list      shift and go to state 834
    local_variable_declaration     shift and go to state 835
    class_or_interface_type        shift and go to state 167
    array_type                     shift and go to state 168
    annotation                     shift and go to state 37
    statement_expression           shift and go to state 836
    class_or_interface             shift and go to state 181
    generic_type                   shift and go to state 182
    name                           shift and go to state 837
    normal_annotation              shift and go to state 40
    marker_annotation              shift and go to state 41
    single_member_annotation       shift and go to state 42
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    annotation_name                shift and go to state 45
    postfix_expression             shift and go to state 183
    primary                        shift and go to state 838
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72

state 1084

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .

    $end            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    WHILE           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    IF              reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    FOR             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    LBRACE          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    ASSERT          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    SEMICOLON       reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    SWITCH          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    DO              reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    BREAK           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    CONTINUE        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    RETURN          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    SYNCHRONIZED    reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    THROW           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    TRY             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    IDENT           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    BOOLEAN         reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    VOID            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    BYTE            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    SHORT           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    INT             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    LONG            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    CHAR            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    FLOAT           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    DOUBLE          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    PUBLIC          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    PROTECTED       reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    PRIVATE         reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    STATIC          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    ABSTRACT        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    FINAL           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    NATIVE          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    TRANSIENT       reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    VOLATILE        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    STRICTFP        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    THIS            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    SUPER           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    INC             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    DEC             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    NEW             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    LSS             reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    LPAREN          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    ATRATE          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    HEX_LIT         reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    OCTAL_LIT       reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    BINARY_LIT      reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    DECIMAL_LIT     reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    FLOAT_HEX_LIT   reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    FLOAT_DEC_LIT   reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    CHAR_LIT        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    STRING_LIT      reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    BOOL_LIT        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    NULL_LIT        reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    CLASS           reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    INTERFACE       reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    RBRACE          reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    CASE            reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)
    DEFAULT         reduce using rule 236 (while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2 .)


state 1085

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 . for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (254) for_update_opt -> . for_update
    (255) for_update_opt -> . empty
    (256) for_update -> . statement_expression_list
    (583) empty -> .
    (250) statement_expression_list -> . statement_expression
    (251) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (333) class_instance_creation_expression_name -> . name PERIOD
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    RPAREN          reduce using rule 583 (empty -> .)
    INC             shift and go to state 65
    DEC             shift and go to state 48
    IDENT           shift and go to state 830
    SUPER           shift and go to state 839
    NEW             shift and go to state 184
    THIS            shift and go to state 68
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    for_update_opt                 shift and go to state 1091
    for_update                     shift and go to state 1092
    empty                          shift and go to state 1093
    statement_expression_list      shift and go to state 1094
    statement_expression           shift and go to state 836
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    postfix_expression             shift and go to state 183
    name                           shift and go to state 998
    primary                        shift and go to state 838
    class_instance_creation_expression_name shift and go to state 89
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1086

    (275) switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .

    $end            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    WHILE           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    IF              reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    FOR             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    LBRACE          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    ASSERT          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    SEMICOLON       reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    SWITCH          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    DO              reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    BREAK           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    CONTINUE        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    RETURN          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    SYNCHRONIZED    reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    THROW           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    TRY             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    IDENT           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    BOOLEAN         reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    VOID            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    BYTE            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    SHORT           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    INT             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    LONG            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    CHAR            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    FLOAT           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    DOUBLE          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    PUBLIC          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    PROTECTED       reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    PRIVATE         reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    STATIC          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    ABSTRACT        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    FINAL           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    NATIVE          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    TRANSIENT       reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    VOLATILE        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    STRICTFP        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    THIS            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    SUPER           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    INC             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    DEC             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    NEW             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    LSS             reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    LPAREN          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    ATRATE          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    HEX_LIT         reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    OCTAL_LIT       reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    BINARY_LIT      reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    DECIMAL_LIT     reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    FLOAT_HEX_LIT   reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    FLOAT_DEC_LIT   reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    CHAR_LIT        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    STRING_LIT      reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    BOOL_LIT        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    NULL_LIT        reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    CLASS           reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    INTERFACE       reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    RBRACE          reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    CASE            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    DEFAULT         reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)
    ELSE            reduce using rule 275 (switch_block -> LBRACE switch_block_statements switch_labels dec_scope RBRACE .)


state 1087

    (230) if_then_statement -> IF LPAREN inc_scope expression RPAREN . label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN . label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN . label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (231) label_for_if1 -> .

    IF              reduce using rule 231 (label_for_if1 -> .)
    WHILE           reduce using rule 231 (label_for_if1 -> .)
    FOR             reduce using rule 231 (label_for_if1 -> .)
    LBRACE          reduce using rule 231 (label_for_if1 -> .)
    ASSERT          reduce using rule 231 (label_for_if1 -> .)
    SEMICOLON       reduce using rule 231 (label_for_if1 -> .)
    SWITCH          reduce using rule 231 (label_for_if1 -> .)
    DO              reduce using rule 231 (label_for_if1 -> .)
    BREAK           reduce using rule 231 (label_for_if1 -> .)
    CONTINUE        reduce using rule 231 (label_for_if1 -> .)
    RETURN          reduce using rule 231 (label_for_if1 -> .)
    SYNCHRONIZED    reduce using rule 231 (label_for_if1 -> .)
    THROW           reduce using rule 231 (label_for_if1 -> .)
    TRY             reduce using rule 231 (label_for_if1 -> .)
    IDENT           reduce using rule 231 (label_for_if1 -> .)
    THIS            reduce using rule 231 (label_for_if1 -> .)
    SUPER           reduce using rule 231 (label_for_if1 -> .)
    INC             reduce using rule 231 (label_for_if1 -> .)
    DEC             reduce using rule 231 (label_for_if1 -> .)
    NEW             reduce using rule 231 (label_for_if1 -> .)
    LSS             reduce using rule 231 (label_for_if1 -> .)
    LPAREN          reduce using rule 231 (label_for_if1 -> .)
    HEX_LIT         reduce using rule 231 (label_for_if1 -> .)
    OCTAL_LIT       reduce using rule 231 (label_for_if1 -> .)
    BINARY_LIT      reduce using rule 231 (label_for_if1 -> .)
    DECIMAL_LIT     reduce using rule 231 (label_for_if1 -> .)
    FLOAT_HEX_LIT   reduce using rule 231 (label_for_if1 -> .)
    FLOAT_DEC_LIT   reduce using rule 231 (label_for_if1 -> .)
    CHAR_LIT        reduce using rule 231 (label_for_if1 -> .)
    STRING_LIT      reduce using rule 231 (label_for_if1 -> .)
    BOOL_LIT        reduce using rule 231 (label_for_if1 -> .)
    NULL_LIT        reduce using rule 231 (label_for_if1 -> .)
    BOOLEAN         reduce using rule 231 (label_for_if1 -> .)
    VOID            reduce using rule 231 (label_for_if1 -> .)
    BYTE            reduce using rule 231 (label_for_if1 -> .)
    SHORT           reduce using rule 231 (label_for_if1 -> .)
    INT             reduce using rule 231 (label_for_if1 -> .)
    LONG            reduce using rule 231 (label_for_if1 -> .)
    CHAR            reduce using rule 231 (label_for_if1 -> .)
    FLOAT           reduce using rule 231 (label_for_if1 -> .)
    DOUBLE          reduce using rule 231 (label_for_if1 -> .)

    label_for_if1                  shift and go to state 1095

state 1088

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .

    $end            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    WHILE           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    IF              reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    FOR             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    LBRACE          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    ASSERT          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    SEMICOLON       reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    SWITCH          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    DO              reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    BREAK           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    CONTINUE        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    RETURN          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    SYNCHRONIZED    reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    THROW           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    TRY             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    IDENT           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    BOOLEAN         reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    VOID            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    BYTE            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    SHORT           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    INT             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    LONG            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    CHAR            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    FLOAT           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    DOUBLE          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    PUBLIC          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    PROTECTED       reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    PRIVATE         reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    STATIC          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    ABSTRACT        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    FINAL           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    NATIVE          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    TRANSIENT       reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    VOLATILE        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    STRICTFP        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    THIS            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    SUPER           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    INC             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    DEC             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    NEW             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    LSS             reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    LPAREN          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    ATRATE          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    HEX_LIT         reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    OCTAL_LIT       reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    BINARY_LIT      reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    DECIMAL_LIT     reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    FLOAT_HEX_LIT   reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    FLOAT_DEC_LIT   reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    CHAR_LIT        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    STRING_LIT      reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    BOOL_LIT        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    NULL_LIT        reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    CLASS           reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    INTERFACE       reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    RBRACE          reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    CASE            reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)
    DEFAULT         reduce using rule 234 (if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2 .)


state 1089

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 . expression RPAREN label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 . expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression                     shift and go to state 1096
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 1090

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt . SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt . SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2

    SEMICOLON       shift and go to state 1097


state 1091

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt . label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (245) label_for_for3 -> .

    RPAREN          reduce using rule 245 (label_for_for3 -> .)

    label_for_for3                 shift and go to state 1098

state 1092

    (254) for_update_opt -> for_update .

    RPAREN          reduce using rule 254 (for_update_opt -> for_update .)


state 1093

    (255) for_update_opt -> empty .

    RPAREN          reduce using rule 255 (for_update_opt -> empty .)


state 1094

    (256) for_update -> statement_expression_list .
    (251) statement_expression_list -> statement_expression_list . COMMA statement_expression

    RPAREN          reduce using rule 256 (for_update -> statement_expression_list .)
    COMMA           shift and go to state 920


state 1095

    (230) if_then_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 . statement label_for_if1
    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 . statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 . statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 981
    statement_no_short_if          shift and go to state 1099
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 989
    enhanced_for_statement_header  shift and go to state 992
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1096

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression . RPAREN label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression . RPAREN label_for_while1 statement_no_short_if label_for_while2

    RPAREN          shift and go to state 1100


state 1097

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON . label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON . label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (243) label_for_for1 -> .

    THIS            reduce using rule 243 (label_for_for1 -> .)
    LPAREN          reduce using rule 243 (label_for_for1 -> .)
    NEW             reduce using rule 243 (label_for_for1 -> .)
    IDENT           reduce using rule 243 (label_for_for1 -> .)
    HEX_LIT         reduce using rule 243 (label_for_for1 -> .)
    OCTAL_LIT       reduce using rule 243 (label_for_for1 -> .)
    BINARY_LIT      reduce using rule 243 (label_for_for1 -> .)
    DECIMAL_LIT     reduce using rule 243 (label_for_for1 -> .)
    FLOAT_HEX_LIT   reduce using rule 243 (label_for_for1 -> .)
    FLOAT_DEC_LIT   reduce using rule 243 (label_for_for1 -> .)
    CHAR_LIT        reduce using rule 243 (label_for_for1 -> .)
    STRING_LIT      reduce using rule 243 (label_for_for1 -> .)
    BOOL_LIT        reduce using rule 243 (label_for_for1 -> .)
    NULL_LIT        reduce using rule 243 (label_for_for1 -> .)
    SUPER           reduce using rule 243 (label_for_for1 -> .)
    BOOLEAN         reduce using rule 243 (label_for_for1 -> .)
    VOID            reduce using rule 243 (label_for_for1 -> .)
    BYTE            reduce using rule 243 (label_for_for1 -> .)
    SHORT           reduce using rule 243 (label_for_for1 -> .)
    INT             reduce using rule 243 (label_for_for1 -> .)
    LONG            reduce using rule 243 (label_for_for1 -> .)
    CHAR            reduce using rule 243 (label_for_for1 -> .)
    FLOAT           reduce using rule 243 (label_for_for1 -> .)
    DOUBLE          reduce using rule 243 (label_for_for1 -> .)
    ADD             reduce using rule 243 (label_for_for1 -> .)
    SUB             reduce using rule 243 (label_for_for1 -> .)
    INC             reduce using rule 243 (label_for_for1 -> .)
    DEC             reduce using rule 243 (label_for_for1 -> .)
    LNOT            reduce using rule 243 (label_for_for1 -> .)
    NOT             reduce using rule 243 (label_for_for1 -> .)
    SEMICOLON       reduce using rule 243 (label_for_for1 -> .)

    label_for_for1                 shift and go to state 1101

state 1098

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 . RPAREN label_for_for1 statement label_for_for2

    RPAREN          shift and go to state 1102


state 1099

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if . ELSE label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if . ELSE label_for_if3 statement_no_short_if label_for_if2

    ELSE            shift and go to state 1103


state 1100

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN . label_for_while1 statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN . label_for_while1 statement_no_short_if label_for_while2
    (239) label_for_while1 -> .

    IF              reduce using rule 239 (label_for_while1 -> .)
    WHILE           reduce using rule 239 (label_for_while1 -> .)
    FOR             reduce using rule 239 (label_for_while1 -> .)
    LBRACE          reduce using rule 239 (label_for_while1 -> .)
    ASSERT          reduce using rule 239 (label_for_while1 -> .)
    SEMICOLON       reduce using rule 239 (label_for_while1 -> .)
    SWITCH          reduce using rule 239 (label_for_while1 -> .)
    DO              reduce using rule 239 (label_for_while1 -> .)
    BREAK           reduce using rule 239 (label_for_while1 -> .)
    CONTINUE        reduce using rule 239 (label_for_while1 -> .)
    RETURN          reduce using rule 239 (label_for_while1 -> .)
    SYNCHRONIZED    reduce using rule 239 (label_for_while1 -> .)
    THROW           reduce using rule 239 (label_for_while1 -> .)
    TRY             reduce using rule 239 (label_for_while1 -> .)
    IDENT           reduce using rule 239 (label_for_while1 -> .)
    THIS            reduce using rule 239 (label_for_while1 -> .)
    SUPER           reduce using rule 239 (label_for_while1 -> .)
    INC             reduce using rule 239 (label_for_while1 -> .)
    DEC             reduce using rule 239 (label_for_while1 -> .)
    NEW             reduce using rule 239 (label_for_while1 -> .)
    LSS             reduce using rule 239 (label_for_while1 -> .)
    LPAREN          reduce using rule 239 (label_for_while1 -> .)
    HEX_LIT         reduce using rule 239 (label_for_while1 -> .)
    OCTAL_LIT       reduce using rule 239 (label_for_while1 -> .)
    BINARY_LIT      reduce using rule 239 (label_for_while1 -> .)
    DECIMAL_LIT     reduce using rule 239 (label_for_while1 -> .)
    FLOAT_HEX_LIT   reduce using rule 239 (label_for_while1 -> .)
    FLOAT_DEC_LIT   reduce using rule 239 (label_for_while1 -> .)
    CHAR_LIT        reduce using rule 239 (label_for_while1 -> .)
    STRING_LIT      reduce using rule 239 (label_for_while1 -> .)
    BOOL_LIT        reduce using rule 239 (label_for_while1 -> .)
    NULL_LIT        reduce using rule 239 (label_for_while1 -> .)
    BOOLEAN         reduce using rule 239 (label_for_while1 -> .)
    VOID            reduce using rule 239 (label_for_while1 -> .)
    BYTE            reduce using rule 239 (label_for_while1 -> .)
    SHORT           reduce using rule 239 (label_for_while1 -> .)
    INT             reduce using rule 239 (label_for_while1 -> .)
    LONG            reduce using rule 239 (label_for_while1 -> .)
    CHAR            reduce using rule 239 (label_for_while1 -> .)
    FLOAT           reduce using rule 239 (label_for_while1 -> .)
    DOUBLE          reduce using rule 239 (label_for_while1 -> .)

    label_for_while1               shift and go to state 1104

state 1101

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 . expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 . expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (252) expression_opt -> . expression
    (253) expression_opt -> . empty
    (1) expression -> . assignment_expression
    (583) empty -> .
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression QUES expression COLON conditional_expression
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression LOR marker_next_quad conditional_and_expression
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression LAND marker_next_quad inclusive_or_expression
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (36) inclusive_or_expression -> . exclusive_or_expression
    (37) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE
    (41) exclusive_or_expression -> . and_expression
    (42) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (46) and_expression -> . equality_expression
    (47) and_expression -> . and_expression AND equality_expression
    (51) equality_expression -> . instanceof_expression
    (52) equality_expression -> . equality_expression EQL instanceof_expression
    (53) equality_expression -> . equality_expression NEQ instanceof_expression
    (59) instanceof_expression -> . relational_expression
    (60) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (64) relational_expression -> . shift_expression
    (65) relational_expression -> . relational_expression GTR shift_expression
    (66) relational_expression -> . relational_expression LSS shift_expression
    (67) relational_expression -> . relational_expression GEQ shift_expression
    (68) relational_expression -> . relational_expression LEQ shift_expression
    (78) shift_expression -> . additive_expression
    (79) shift_expression -> . shift_expression SHL additive_expression
    (80) shift_expression -> . shift_expression SHR additive_expression
    (81) shift_expression -> . shift_expression SHR_UN additive_expression
    (89) additive_expression -> . multiplicative_expression
    (90) additive_expression -> . additive_expression ADD multiplicative_expression
    (91) additive_expression -> . additive_expression SUB multiplicative_expression
    (97) multiplicative_expression -> . unary_expression
    (98) multiplicative_expression -> . multiplicative_expression MUL unary_expression
    (99) multiplicative_expression -> . multiplicative_expression QUO unary_expression
    (100) multiplicative_expression -> . multiplicative_expression REM unary_expression
    (108) unary_expression -> . pre_increment_expression
    (109) unary_expression -> . pre_decrement_expression
    (110) unary_expression -> . ADD unary_expression
    (111) unary_expression -> . SUB unary_expression
    (112) unary_expression -> . unary_expression_not_plus_minus
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (120) unary_expression_not_plus_minus -> . postfix_expression
    (121) unary_expression_not_plus_minus -> . LNOT unary_expression
    (122) unary_expression_not_plus_minus -> . NOT unary_expression
    (123) unary_expression_not_plus_minus -> . cast_expression
    (160) cast_expression -> . LPAREN primitive_type dims_opt RPAREN unary_expression
    (161) cast_expression -> . LPAREN name type_arguments dims_opt RPAREN unary_expression_not_plus_minus
    (162) cast_expression -> . LPAREN name type_arguments PERIOD class_or_interface_type dims_opt RPAREN unary_expression_not_plus_minus
    (163) cast_expression -> . LPAREN name RPAREN unary_expression_not_plus_minus
    (164) cast_expression -> . LPAREN name dims RPAREN unary_expression_not_plus_minus

    SEMICOLON       reduce using rule 583 (empty -> .)
    THIS            shift and go to state 68
    LPAREN          shift and go to state 73
    NEW             shift and go to state 76
    IDENT           shift and go to state 77
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    SUPER           shift and go to state 74
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98
    ADD             shift and go to state 106
    SUB             shift and go to state 107
    INC             shift and go to state 65
    DEC             shift and go to state 48
    LNOT            shift and go to state 112
    NOT             shift and go to state 113

    expression_opt                 shift and go to state 1105
    expression                     shift and go to state 336
    empty                          shift and go to state 337
    assignment_expression          shift and go to state 50
    assignment                     shift and go to state 51
    conditional_expression         shift and go to state 52
    postfix_expression             shift and go to state 53
    conditional_or_expression      shift and go to state 54
    primary                        shift and go to state 55
    name                           shift and go to state 56
    post_increment_expression      shift and go to state 57
    post_decrement_expression      shift and go to state 58
    conditional_and_expression     shift and go to state 59
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    inclusive_or_expression        shift and go to state 66
    literal                        shift and go to state 67
    class_instance_creation_expression shift and go to state 69
    field_access                   shift and go to state 70
    method_invocation              shift and go to state 71
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75
    exclusive_or_expression        shift and go to state 78
    class_instance_creation_expression_name shift and go to state 89
    and_expression                 shift and go to state 99
    equality_expression            shift and go to state 100
    instanceof_expression          shift and go to state 101
    relational_expression          shift and go to state 102
    shift_expression               shift and go to state 103
    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 105
    unary_expression               shift and go to state 108
    pre_increment_expression       shift and go to state 109
    pre_decrement_expression       shift and go to state 110
    unary_expression_not_plus_minus shift and go to state 111
    cast_expression                shift and go to state 114

state 1102

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN . label_for_for1 statement label_for_for2
    (243) label_for_for1 -> .

    IF              reduce using rule 243 (label_for_for1 -> .)
    WHILE           reduce using rule 243 (label_for_for1 -> .)
    FOR             reduce using rule 243 (label_for_for1 -> .)
    LBRACE          reduce using rule 243 (label_for_for1 -> .)
    ASSERT          reduce using rule 243 (label_for_for1 -> .)
    SEMICOLON       reduce using rule 243 (label_for_for1 -> .)
    SWITCH          reduce using rule 243 (label_for_for1 -> .)
    DO              reduce using rule 243 (label_for_for1 -> .)
    BREAK           reduce using rule 243 (label_for_for1 -> .)
    CONTINUE        reduce using rule 243 (label_for_for1 -> .)
    RETURN          reduce using rule 243 (label_for_for1 -> .)
    SYNCHRONIZED    reduce using rule 243 (label_for_for1 -> .)
    THROW           reduce using rule 243 (label_for_for1 -> .)
    TRY             reduce using rule 243 (label_for_for1 -> .)
    IDENT           reduce using rule 243 (label_for_for1 -> .)
    THIS            reduce using rule 243 (label_for_for1 -> .)
    SUPER           reduce using rule 243 (label_for_for1 -> .)
    INC             reduce using rule 243 (label_for_for1 -> .)
    DEC             reduce using rule 243 (label_for_for1 -> .)
    NEW             reduce using rule 243 (label_for_for1 -> .)
    LSS             reduce using rule 243 (label_for_for1 -> .)
    LPAREN          reduce using rule 243 (label_for_for1 -> .)
    HEX_LIT         reduce using rule 243 (label_for_for1 -> .)
    OCTAL_LIT       reduce using rule 243 (label_for_for1 -> .)
    BINARY_LIT      reduce using rule 243 (label_for_for1 -> .)
    DECIMAL_LIT     reduce using rule 243 (label_for_for1 -> .)
    FLOAT_HEX_LIT   reduce using rule 243 (label_for_for1 -> .)
    FLOAT_DEC_LIT   reduce using rule 243 (label_for_for1 -> .)
    CHAR_LIT        reduce using rule 243 (label_for_for1 -> .)
    STRING_LIT      reduce using rule 243 (label_for_for1 -> .)
    BOOL_LIT        reduce using rule 243 (label_for_for1 -> .)
    NULL_LIT        reduce using rule 243 (label_for_for1 -> .)
    BOOLEAN         reduce using rule 243 (label_for_for1 -> .)
    VOID            reduce using rule 243 (label_for_for1 -> .)
    BYTE            reduce using rule 243 (label_for_for1 -> .)
    SHORT           reduce using rule 243 (label_for_for1 -> .)
    INT             reduce using rule 243 (label_for_for1 -> .)
    LONG            reduce using rule 243 (label_for_for1 -> .)
    CHAR            reduce using rule 243 (label_for_for1 -> .)
    FLOAT           reduce using rule 243 (label_for_for1 -> .)
    DOUBLE          reduce using rule 243 (label_for_for1 -> .)

    label_for_for1                 shift and go to state 1106

state 1103

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE . label_for_if3 statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE . label_for_if3 statement_no_short_if label_for_if2
    (233) label_for_if3 -> .

    IF              reduce using rule 233 (label_for_if3 -> .)
    WHILE           reduce using rule 233 (label_for_if3 -> .)
    FOR             reduce using rule 233 (label_for_if3 -> .)
    LBRACE          reduce using rule 233 (label_for_if3 -> .)
    ASSERT          reduce using rule 233 (label_for_if3 -> .)
    SEMICOLON       reduce using rule 233 (label_for_if3 -> .)
    SWITCH          reduce using rule 233 (label_for_if3 -> .)
    DO              reduce using rule 233 (label_for_if3 -> .)
    BREAK           reduce using rule 233 (label_for_if3 -> .)
    CONTINUE        reduce using rule 233 (label_for_if3 -> .)
    RETURN          reduce using rule 233 (label_for_if3 -> .)
    SYNCHRONIZED    reduce using rule 233 (label_for_if3 -> .)
    THROW           reduce using rule 233 (label_for_if3 -> .)
    TRY             reduce using rule 233 (label_for_if3 -> .)
    IDENT           reduce using rule 233 (label_for_if3 -> .)
    THIS            reduce using rule 233 (label_for_if3 -> .)
    SUPER           reduce using rule 233 (label_for_if3 -> .)
    INC             reduce using rule 233 (label_for_if3 -> .)
    DEC             reduce using rule 233 (label_for_if3 -> .)
    NEW             reduce using rule 233 (label_for_if3 -> .)
    LSS             reduce using rule 233 (label_for_if3 -> .)
    LPAREN          reduce using rule 233 (label_for_if3 -> .)
    HEX_LIT         reduce using rule 233 (label_for_if3 -> .)
    OCTAL_LIT       reduce using rule 233 (label_for_if3 -> .)
    BINARY_LIT      reduce using rule 233 (label_for_if3 -> .)
    DECIMAL_LIT     reduce using rule 233 (label_for_if3 -> .)
    FLOAT_HEX_LIT   reduce using rule 233 (label_for_if3 -> .)
    FLOAT_DEC_LIT   reduce using rule 233 (label_for_if3 -> .)
    CHAR_LIT        reduce using rule 233 (label_for_if3 -> .)
    STRING_LIT      reduce using rule 233 (label_for_if3 -> .)
    BOOL_LIT        reduce using rule 233 (label_for_if3 -> .)
    NULL_LIT        reduce using rule 233 (label_for_if3 -> .)
    BOOLEAN         reduce using rule 233 (label_for_if3 -> .)
    VOID            reduce using rule 233 (label_for_if3 -> .)
    BYTE            reduce using rule 233 (label_for_if3 -> .)
    SHORT           reduce using rule 233 (label_for_if3 -> .)
    INT             reduce using rule 233 (label_for_if3 -> .)
    LONG            reduce using rule 233 (label_for_if3 -> .)
    CHAR            reduce using rule 233 (label_for_if3 -> .)
    FLOAT           reduce using rule 233 (label_for_if3 -> .)
    DOUBLE          reduce using rule 233 (label_for_if3 -> .)

    label_for_if3                  shift and go to state 1107

state 1104

    (236) while_statement -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 . statement label_for_while2
    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 . statement_no_short_if label_for_while2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 1073
    statement_no_short_if          shift and go to state 1108
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 989
    enhanced_for_statement_header  shift and go to state 992
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1105

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt . SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt . SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2

    SEMICOLON       shift and go to state 1109


state 1106

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 . statement label_for_for2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 145
    WHILE           shift and go to state 147
    FOR             shift and go to state 148
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 1110
    statement_without_trailing_substatement shift and go to state 122
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 144
    enhanced_for_statement_header  shift and go to state 149
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1107

    (234) if_then_else_statement -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 . statement label_for_if2
    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 . statement_no_short_if label_for_if2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement_no_short_if          shift and go to state 1111
    statement                      shift and go to state 1081
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 989
    enhanced_for_statement_header  shift and go to state 992
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1108

    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if . label_for_while2
    (240) label_for_while2 -> .

    ELSE            reduce using rule 240 (label_for_while2 -> .)

    label_for_while2               shift and go to state 1112

state 1109

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON . label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON . label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (243) label_for_for1 -> .

    INC             reduce using rule 243 (label_for_for1 -> .)
    DEC             reduce using rule 243 (label_for_for1 -> .)
    IDENT           reduce using rule 243 (label_for_for1 -> .)
    SUPER           reduce using rule 243 (label_for_for1 -> .)
    NEW             reduce using rule 243 (label_for_for1 -> .)
    THIS            reduce using rule 243 (label_for_for1 -> .)
    LPAREN          reduce using rule 243 (label_for_for1 -> .)
    HEX_LIT         reduce using rule 243 (label_for_for1 -> .)
    OCTAL_LIT       reduce using rule 243 (label_for_for1 -> .)
    BINARY_LIT      reduce using rule 243 (label_for_for1 -> .)
    DECIMAL_LIT     reduce using rule 243 (label_for_for1 -> .)
    FLOAT_HEX_LIT   reduce using rule 243 (label_for_for1 -> .)
    FLOAT_DEC_LIT   reduce using rule 243 (label_for_for1 -> .)
    CHAR_LIT        reduce using rule 243 (label_for_for1 -> .)
    STRING_LIT      reduce using rule 243 (label_for_for1 -> .)
    BOOL_LIT        reduce using rule 243 (label_for_for1 -> .)
    NULL_LIT        reduce using rule 243 (label_for_for1 -> .)
    BOOLEAN         reduce using rule 243 (label_for_for1 -> .)
    VOID            reduce using rule 243 (label_for_for1 -> .)
    BYTE            reduce using rule 243 (label_for_for1 -> .)
    SHORT           reduce using rule 243 (label_for_for1 -> .)
    INT             reduce using rule 243 (label_for_for1 -> .)
    LONG            reduce using rule 243 (label_for_for1 -> .)
    CHAR            reduce using rule 243 (label_for_for1 -> .)
    FLOAT           reduce using rule 243 (label_for_for1 -> .)
    DOUBLE          reduce using rule 243 (label_for_for1 -> .)
    RPAREN          reduce using rule 243 (label_for_for1 -> .)

    label_for_for1                 shift and go to state 1113

state 1110

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement . label_for_for2
    (244) label_for_for2 -> .

    $end            reduce using rule 244 (label_for_for2 -> .)
    WHILE           reduce using rule 244 (label_for_for2 -> .)
    IF              reduce using rule 244 (label_for_for2 -> .)
    FOR             reduce using rule 244 (label_for_for2 -> .)
    LBRACE          reduce using rule 244 (label_for_for2 -> .)
    ASSERT          reduce using rule 244 (label_for_for2 -> .)
    SEMICOLON       reduce using rule 244 (label_for_for2 -> .)
    SWITCH          reduce using rule 244 (label_for_for2 -> .)
    DO              reduce using rule 244 (label_for_for2 -> .)
    BREAK           reduce using rule 244 (label_for_for2 -> .)
    CONTINUE        reduce using rule 244 (label_for_for2 -> .)
    RETURN          reduce using rule 244 (label_for_for2 -> .)
    SYNCHRONIZED    reduce using rule 244 (label_for_for2 -> .)
    THROW           reduce using rule 244 (label_for_for2 -> .)
    TRY             reduce using rule 244 (label_for_for2 -> .)
    IDENT           reduce using rule 244 (label_for_for2 -> .)
    BOOLEAN         reduce using rule 244 (label_for_for2 -> .)
    VOID            reduce using rule 244 (label_for_for2 -> .)
    BYTE            reduce using rule 244 (label_for_for2 -> .)
    SHORT           reduce using rule 244 (label_for_for2 -> .)
    INT             reduce using rule 244 (label_for_for2 -> .)
    LONG            reduce using rule 244 (label_for_for2 -> .)
    CHAR            reduce using rule 244 (label_for_for2 -> .)
    FLOAT           reduce using rule 244 (label_for_for2 -> .)
    DOUBLE          reduce using rule 244 (label_for_for2 -> .)
    PUBLIC          reduce using rule 244 (label_for_for2 -> .)
    PROTECTED       reduce using rule 244 (label_for_for2 -> .)
    PRIVATE         reduce using rule 244 (label_for_for2 -> .)
    STATIC          reduce using rule 244 (label_for_for2 -> .)
    ABSTRACT        reduce using rule 244 (label_for_for2 -> .)
    FINAL           reduce using rule 244 (label_for_for2 -> .)
    NATIVE          reduce using rule 244 (label_for_for2 -> .)
    TRANSIENT       reduce using rule 244 (label_for_for2 -> .)
    VOLATILE        reduce using rule 244 (label_for_for2 -> .)
    STRICTFP        reduce using rule 244 (label_for_for2 -> .)
    THIS            reduce using rule 244 (label_for_for2 -> .)
    SUPER           reduce using rule 244 (label_for_for2 -> .)
    INC             reduce using rule 244 (label_for_for2 -> .)
    DEC             reduce using rule 244 (label_for_for2 -> .)
    NEW             reduce using rule 244 (label_for_for2 -> .)
    LSS             reduce using rule 244 (label_for_for2 -> .)
    LPAREN          reduce using rule 244 (label_for_for2 -> .)
    ATRATE          reduce using rule 244 (label_for_for2 -> .)
    HEX_LIT         reduce using rule 244 (label_for_for2 -> .)
    OCTAL_LIT       reduce using rule 244 (label_for_for2 -> .)
    BINARY_LIT      reduce using rule 244 (label_for_for2 -> .)
    DECIMAL_LIT     reduce using rule 244 (label_for_for2 -> .)
    FLOAT_HEX_LIT   reduce using rule 244 (label_for_for2 -> .)
    FLOAT_DEC_LIT   reduce using rule 244 (label_for_for2 -> .)
    CHAR_LIT        reduce using rule 244 (label_for_for2 -> .)
    STRING_LIT      reduce using rule 244 (label_for_for2 -> .)
    BOOL_LIT        reduce using rule 244 (label_for_for2 -> .)
    NULL_LIT        reduce using rule 244 (label_for_for2 -> .)
    CLASS           reduce using rule 244 (label_for_for2 -> .)
    INTERFACE       reduce using rule 244 (label_for_for2 -> .)
    RBRACE          reduce using rule 244 (label_for_for2 -> .)
    CASE            reduce using rule 244 (label_for_for2 -> .)
    DEFAULT         reduce using rule 244 (label_for_for2 -> .)

    label_for_for2                 shift and go to state 1114

state 1111

    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if . label_for_if2
    (232) label_for_if2 -> .

    ELSE            reduce using rule 232 (label_for_if2 -> .)

    label_for_if2                  shift and go to state 1115

state 1112

    (237) while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2 .

    ELSE            reduce using rule 237 (while_statement_no_short_if -> WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2 .)


state 1113

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 . for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 . for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (254) for_update_opt -> . for_update
    (255) for_update_opt -> . empty
    (256) for_update -> . statement_expression_list
    (583) empty -> .
    (250) statement_expression_list -> . statement_expression
    (251) statement_expression_list -> . statement_expression_list COMMA statement_expression
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (333) class_instance_creation_expression_name -> . name PERIOD
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    RPAREN          reduce using rule 583 (empty -> .)
    INC             shift and go to state 65
    DEC             shift and go to state 48
    IDENT           shift and go to state 830
    SUPER           shift and go to state 839
    NEW             shift and go to state 184
    THIS            shift and go to state 68
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    for_update_opt                 shift and go to state 1116
    for_update                     shift and go to state 1092
    empty                          shift and go to state 1093
    statement_expression_list      shift and go to state 1094
    statement_expression           shift and go to state 836
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    postfix_expression             shift and go to state 183
    name                           shift and go to state 998
    primary                        shift and go to state 838
    class_instance_creation_expression_name shift and go to state 89
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1114

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .

    $end            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    WHILE           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    IF              reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    FOR             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    LBRACE          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    ASSERT          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    SEMICOLON       reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    SWITCH          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    DO              reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    BREAK           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    CONTINUE        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    RETURN          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    SYNCHRONIZED    reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    THROW           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    TRY             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    IDENT           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    BOOLEAN         reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    VOID            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    BYTE            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    SHORT           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    INT             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    LONG            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    CHAR            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    FLOAT           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    DOUBLE          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    PUBLIC          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    PROTECTED       reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    PRIVATE         reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    STATIC          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    ABSTRACT        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    FINAL           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    NATIVE          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    TRANSIENT       reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    VOLATILE        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    STRICTFP        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    THIS            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    SUPER           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    INC             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    DEC             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    NEW             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    LSS             reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    LPAREN          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    ATRATE          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    HEX_LIT         reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    OCTAL_LIT       reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    BINARY_LIT      reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    DECIMAL_LIT     reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    FLOAT_HEX_LIT   reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    FLOAT_DEC_LIT   reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    CHAR_LIT        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    STRING_LIT      reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    BOOL_LIT        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    NULL_LIT        reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    CLASS           reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    INTERFACE       reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    RBRACE          reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    CASE            reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)
    DEFAULT         reduce using rule 241 (for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2 .)


state 1115

    (235) if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2 .

    ELSE            reduce using rule 235 (if_then_else_statement_no_short_if -> IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2 .)


state 1116

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt . label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt . label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (245) label_for_for3 -> .

    RPAREN          reduce using rule 245 (label_for_for3 -> .)

    label_for_for3                 shift and go to state 1117

state 1117

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 . RPAREN label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 . RPAREN label_for_for1 statement_no_short_if label_for_for2

    RPAREN          shift and go to state 1118


state 1118

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN . label_for_for1 statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN . label_for_for1 statement_no_short_if label_for_for2
    (243) label_for_for1 -> .

    IF              reduce using rule 243 (label_for_for1 -> .)
    WHILE           reduce using rule 243 (label_for_for1 -> .)
    FOR             reduce using rule 243 (label_for_for1 -> .)
    LBRACE          reduce using rule 243 (label_for_for1 -> .)
    ASSERT          reduce using rule 243 (label_for_for1 -> .)
    SEMICOLON       reduce using rule 243 (label_for_for1 -> .)
    SWITCH          reduce using rule 243 (label_for_for1 -> .)
    DO              reduce using rule 243 (label_for_for1 -> .)
    BREAK           reduce using rule 243 (label_for_for1 -> .)
    CONTINUE        reduce using rule 243 (label_for_for1 -> .)
    RETURN          reduce using rule 243 (label_for_for1 -> .)
    SYNCHRONIZED    reduce using rule 243 (label_for_for1 -> .)
    THROW           reduce using rule 243 (label_for_for1 -> .)
    TRY             reduce using rule 243 (label_for_for1 -> .)
    IDENT           reduce using rule 243 (label_for_for1 -> .)
    THIS            reduce using rule 243 (label_for_for1 -> .)
    SUPER           reduce using rule 243 (label_for_for1 -> .)
    INC             reduce using rule 243 (label_for_for1 -> .)
    DEC             reduce using rule 243 (label_for_for1 -> .)
    NEW             reduce using rule 243 (label_for_for1 -> .)
    LSS             reduce using rule 243 (label_for_for1 -> .)
    LPAREN          reduce using rule 243 (label_for_for1 -> .)
    HEX_LIT         reduce using rule 243 (label_for_for1 -> .)
    OCTAL_LIT       reduce using rule 243 (label_for_for1 -> .)
    BINARY_LIT      reduce using rule 243 (label_for_for1 -> .)
    DECIMAL_LIT     reduce using rule 243 (label_for_for1 -> .)
    FLOAT_HEX_LIT   reduce using rule 243 (label_for_for1 -> .)
    FLOAT_DEC_LIT   reduce using rule 243 (label_for_for1 -> .)
    CHAR_LIT        reduce using rule 243 (label_for_for1 -> .)
    STRING_LIT      reduce using rule 243 (label_for_for1 -> .)
    BOOL_LIT        reduce using rule 243 (label_for_for1 -> .)
    NULL_LIT        reduce using rule 243 (label_for_for1 -> .)
    BOOLEAN         reduce using rule 243 (label_for_for1 -> .)
    VOID            reduce using rule 243 (label_for_for1 -> .)
    BYTE            reduce using rule 243 (label_for_for1 -> .)
    SHORT           reduce using rule 243 (label_for_for1 -> .)
    INT             reduce using rule 243 (label_for_for1 -> .)
    LONG            reduce using rule 243 (label_for_for1 -> .)
    CHAR            reduce using rule 243 (label_for_for1 -> .)
    FLOAT           reduce using rule 243 (label_for_for1 -> .)
    DOUBLE          reduce using rule 243 (label_for_for1 -> .)

    label_for_for1                 shift and go to state 1119

state 1119

    (241) for_statement -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 . statement label_for_for2
    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 . statement_no_short_if label_for_for2
    (184) statement -> . statement_without_trailing_substatement
    (185) statement -> . labeled_statement
    (186) statement -> . if_then_statement
    (187) statement -> . if_then_else_statement
    (188) statement -> . while_statement
    (189) statement -> . for_statement
    (190) statement -> . enhanced_for_statement
    (262) statement_no_short_if -> . statement_without_trailing_substatement
    (263) statement_no_short_if -> . labeled_statement_no_short_if
    (264) statement_no_short_if -> . if_then_else_statement_no_short_if
    (265) statement_no_short_if -> . while_statement_no_short_if
    (266) statement_no_short_if -> . for_statement_no_short_if
    (267) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (191) statement_without_trailing_substatement -> . block
    (192) statement_without_trailing_substatement -> . expression_statement
    (193) statement_without_trailing_substatement -> . assert_statement
    (194) statement_without_trailing_substatement -> . empty_statement
    (195) statement_without_trailing_substatement -> . switch_statement
    (196) statement_without_trailing_substatement -> . do_statement
    (197) statement_without_trailing_substatement -> . break_statement
    (198) statement_without_trailing_substatement -> . continue_statement
    (199) statement_without_trailing_substatement -> . return_statement
    (200) statement_without_trailing_substatement -> . synchronized_statement
    (201) statement_without_trailing_substatement -> . throw_statement
    (202) statement_without_trailing_substatement -> . try_statement
    (203) statement_without_trailing_substatement -> . try_statement_with_resources
    (227) labeled_statement -> . label COLON statement
    (230) if_then_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement label_for_if1
    (234) if_then_else_statement -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement label_for_if2
    (236) while_statement -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement label_for_while2
    (241) for_statement -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement label_for_for2
    (257) enhanced_for_statement -> . enhanced_for_statement_header statement
    (228) labeled_statement_no_short_if -> . label COLON statement_no_short_if
    (235) if_then_else_statement_no_short_if -> . IF LPAREN inc_scope expression RPAREN label_for_if1 statement_no_short_if ELSE label_for_if3 statement_no_short_if label_for_if2
    (237) while_statement_no_short_if -> . WHILE inc_for_while_stack LPAREN inc_scope label_for_while1 expression RPAREN label_for_while1 statement_no_short_if label_for_while2
    (242) for_statement_no_short_if -> . FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2
    (258) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (165) block -> . LBRACE inc_scope block_statements_opt dec_scope RBRACE
    (204) expression_statement -> . statement_expression SEMICOLON
    (205) expression_statement -> . explicit_constructor_invocation
    (268) assert_statement -> . ASSERT expression SEMICOLON
    (269) assert_statement -> . ASSERT expression COLON expression SEMICOLON
    (270) empty_statement -> . SEMICOLON
    (271) switch_statement -> . SWITCH LPAREN inc_scope expression RPAREN switch_block
    (284) do_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (285) break_statement -> . BREAK SEMICOLON
    (286) break_statement -> . BREAK IDENT SEMICOLON
    (287) continue_statement -> . CONTINUE SEMICOLON
    (288) continue_statement -> . CONTINUE IDENT SEMICOLON
    (289) return_statement -> . RETURN expression_opt SEMICOLON
    (290) synchronized_statement -> . SYNCHRONIZED LPAREN expression RPAREN block
    (291) throw_statement -> . THROW expression SEMICOLON
    (292) try_statement -> . TRY try_block catches
    (293) try_statement -> . TRY try_block catches_opt finally
    (304) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (305) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (229) label -> . IDENT
    (259) enhanced_for_statement_header -> . enhanced_for_statement_header_init COLON expression RPAREN
    (206) statement_expression -> . assignment
    (207) statement_expression -> . pre_increment_expression
    (208) statement_expression -> . pre_decrement_expression
    (209) statement_expression -> . post_increment_expression
    (210) statement_expression -> . post_decrement_expression
    (211) statement_expression -> . method_invocation
    (212) statement_expression -> . class_instance_creation_expression
    (315) explicit_constructor_invocation -> . THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (316) explicit_constructor_invocation -> . SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (317) explicit_constructor_invocation -> . type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (318) explicit_constructor_invocation -> . type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (319) explicit_constructor_invocation -> . primary PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (320) explicit_constructor_invocation -> . name PERIOD SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (321) explicit_constructor_invocation -> . primary PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (322) explicit_constructor_invocation -> . name PERIOD THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (323) explicit_constructor_invocation -> . primary PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (324) explicit_constructor_invocation -> . name PERIOD type_arguments SUPER LPAREN argument_list_opt RPAREN SEMICOLON
    (325) explicit_constructor_invocation -> . primary PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (326) explicit_constructor_invocation -> . name PERIOD type_arguments THIS LPAREN argument_list_opt RPAREN SEMICOLON
    (260) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope type IDENT dims_opt
    (261) enhanced_for_statement_header_init -> . FOR inc_for_while_stack LPAREN inc_scope modifiers type IDENT dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (118) pre_increment_expression -> . INC unary_expression
    (119) pre_decrement_expression -> . DEC unary_expression
    (135) post_increment_expression -> . postfix_expression INC
    (136) post_decrement_expression -> . postfix_expression DEC
    (220) method_invocation -> . IDENT LPAREN argument_list_opt RPAREN
    (221) method_invocation -> . name PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (222) method_invocation -> . primary PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (223) method_invocation -> . SUPER PERIOD type_arguments IDENT LPAREN argument_list_opt RPAREN
    (224) method_invocation -> . name PERIOD IDENT LPAREN argument_list_opt RPAREN
    (225) method_invocation -> . primary PERIOD IDENT LPAREN argument_list_opt RPAREN
    (226) method_invocation -> . SUPER PERIOD IDENT LPAREN argument_list_opt RPAREN
    (327) class_instance_creation_expression -> . NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (328) class_instance_creation_expression -> . NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (329) class_instance_creation_expression -> . primary PERIOD NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (330) class_instance_creation_expression -> . primary PERIOD NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (331) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type LPAREN argument_list_opt RPAREN class_body_opt
    (332) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type LPAREN argument_list_opt RPAREN class_body_opt
    (403) type_arguments -> . LSS type_argument_list1
    (137) primary -> . primary_no_new_array
    (138) primary -> . array_creation_with_array_initializer
    (139) primary -> . array_creation_without_array_initializer
    (349) name -> . simple_name
    (350) name -> . qualified_name
    (128) postfix_expression -> . primary
    (129) postfix_expression -> . name
    (130) postfix_expression -> . post_increment_expression
    (131) postfix_expression -> . post_decrement_expression
    (333) class_instance_creation_expression_name -> . name PERIOD
    (140) primary_no_new_array -> . literal
    (141) primary_no_new_array -> . THIS
    (142) primary_no_new_array -> . class_instance_creation_expression
    (143) primary_no_new_array -> . field_access
    (144) primary_no_new_array -> . method_invocation
    (145) primary_no_new_array -> . array_access
    (146) primary_no_new_array -> . LPAREN name RPAREN
    (147) primary_no_new_array -> . LPAREN expression_not_name RPAREN
    (148) primary_no_new_array -> . name PERIOD THIS
    (149) primary_no_new_array -> . name PERIOD SUPER
    (150) primary_no_new_array -> . name PERIOD CLASS
    (151) primary_no_new_array -> . name dims PERIOD CLASS
    (152) primary_no_new_array -> . primitive_type dims PERIOD CLASS
    (153) primary_no_new_array -> . primitive_type PERIOD CLASS
    (341) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (342) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (347) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (348) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (351) simple_name -> . IDENT
    (352) qualified_name -> . name PERIOD simple_name
    (353) literal -> . HEX_LIT
    (354) literal -> . OCTAL_LIT
    (355) literal -> . BINARY_LIT
    (356) literal -> . DECIMAL_LIT
    (357) literal -> . FLOAT_HEX_LIT
    (358) literal -> . FLOAT_DEC_LIT
    (359) literal -> . CHAR_LIT
    (360) literal -> . STRING_LIT
    (361) literal -> . BOOL_LIT
    (362) literal -> . NULL_LIT
    (336) field_access -> . primary PERIOD IDENT
    (337) field_access -> . SUPER PERIOD IDENT
    (338) array_access -> . name LBRACK expression RBRACK
    (339) array_access -> . primary_no_new_array LBRACK expression RBRACK
    (340) array_access -> . array_creation_with_array_initializer LBRACK expression RBRACK
    (381) primitive_type -> . BOOLEAN
    (382) primitive_type -> . VOID
    (383) primitive_type -> . BYTE
    (384) primitive_type -> . SHORT
    (385) primitive_type -> . INT
    (386) primitive_type -> . LONG
    (387) primitive_type -> . CHAR
    (388) primitive_type -> . FLOAT
    (389) primitive_type -> . DOUBLE

    IF              shift and go to state 980
    WHILE           shift and go to state 990
    FOR             shift and go to state 991
    LBRACE          shift and go to state 153
    ASSERT          shift and go to state 156
    SEMICOLON       shift and go to state 121
    SWITCH          shift and go to state 157
    DO              shift and go to state 158
    BREAK           shift and go to state 159
    CONTINUE        shift and go to state 161
    RETURN          shift and go to state 162
    SYNCHRONIZED    shift and go to state 323
    THROW           shift and go to state 164
    TRY             shift and go to state 165
    IDENT           shift and go to state 160
    THIS            shift and go to state 176
    SUPER           shift and go to state 177
    INC             shift and go to state 65
    DEC             shift and go to state 48
    NEW             shift and go to state 184
    LSS             shift and go to state 185
    LPAREN          shift and go to state 146
    HEX_LIT         shift and go to state 79
    OCTAL_LIT       shift and go to state 80
    BINARY_LIT      shift and go to state 81
    DECIMAL_LIT     shift and go to state 82
    FLOAT_HEX_LIT   shift and go to state 83
    FLOAT_DEC_LIT   shift and go to state 84
    CHAR_LIT        shift and go to state 85
    STRING_LIT      shift and go to state 86
    BOOL_LIT        shift and go to state 87
    NULL_LIT        shift and go to state 88
    BOOLEAN         shift and go to state 90
    VOID            shift and go to state 91
    BYTE            shift and go to state 92
    SHORT           shift and go to state 93
    INT             shift and go to state 94
    LONG            shift and go to state 95
    CHAR            shift and go to state 96
    FLOAT           shift and go to state 97
    DOUBLE          shift and go to state 98

    statement                      shift and go to state 1110
    statement_no_short_if          shift and go to state 1120
    statement_without_trailing_substatement shift and go to state 983
    labeled_statement              shift and go to state 123
    if_then_statement              shift and go to state 124
    if_then_else_statement         shift and go to state 125
    while_statement                shift and go to state 126
    for_statement                  shift and go to state 127
    enhanced_for_statement         shift and go to state 128
    labeled_statement_no_short_if  shift and go to state 984
    if_then_else_statement_no_short_if shift and go to state 985
    while_statement_no_short_if    shift and go to state 986
    for_statement_no_short_if      shift and go to state 987
    enhanced_for_statement_no_short_if shift and go to state 988
    block                          shift and go to state 131
    expression_statement           shift and go to state 132
    assert_statement               shift and go to state 133
    empty_statement                shift and go to state 134
    switch_statement               shift and go to state 135
    do_statement                   shift and go to state 136
    break_statement                shift and go to state 137
    continue_statement             shift and go to state 138
    return_statement               shift and go to state 139
    synchronized_statement         shift and go to state 140
    throw_statement                shift and go to state 141
    try_statement                  shift and go to state 142
    try_statement_with_resources   shift and go to state 143
    label                          shift and go to state 989
    enhanced_for_statement_header  shift and go to state 992
    statement_expression           shift and go to state 154
    explicit_constructor_invocation shift and go to state 155
    enhanced_for_statement_header_init shift and go to state 166
    assignment                     shift and go to state 169
    pre_increment_expression       shift and go to state 170
    pre_decrement_expression       shift and go to state 171
    post_increment_expression      shift and go to state 172
    post_decrement_expression      shift and go to state 173
    method_invocation              shift and go to state 174
    class_instance_creation_expression shift and go to state 175
    type_arguments                 shift and go to state 178
    primary                        shift and go to state 179
    name                           shift and go to state 324
    postfix_expression             shift and go to state 183
    class_instance_creation_expression_name shift and go to state 89
    primary_no_new_array           shift and go to state 60
    array_creation_with_array_initializer shift and go to state 61
    array_creation_without_array_initializer shift and go to state 62
    simple_name                    shift and go to state 63
    qualified_name                 shift and go to state 64
    literal                        shift and go to state 67
    field_access                   shift and go to state 70
    array_access                   shift and go to state 72
    primitive_type                 shift and go to state 75

state 1120

    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if . label_for_for2
    (244) label_for_for2 -> .

    ELSE            reduce using rule 244 (label_for_for2 -> .)

    label_for_for2                 shift and go to state 1121

state 1121

    (242) for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2 .

    ELSE            reduce using rule 242 (for_statement_no_short_if -> FOR inc_for_while_stack LPAREN inc_scope for_init_opt SEMICOLON label_for_for1 expression_opt SEMICOLON label_for_for1 for_update_opt label_for_for3 RPAREN label_for_for1 statement_no_short_if label_for_for2 .)

